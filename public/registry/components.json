{
  "tabs.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IHRhYnNMaXN0VmFyaWFudHMgPSBjdmEoCiAgJ2lubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQgbm90LXByb3NlJywKICB7CiAgICB2YXJpYW50czogewogICAgICBvcmllbnRhdGlvbjogewogICAgICAgIGhvcml6b250YWw6ICdmbGV4LXJvdycsCiAgICAgICAgdmVydGljYWw6ICdmbGV4LWNvbCB3LWZpdCcsCiAgICAgIH0sCiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJ3JvdW5kZWQtbGcgYmctYmFja2dyb3VuZCBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQgYm9yZGVyLWJvcmRlciBzaGFkb3ctc20nLAogICAgICAgIHBpbGxzOiAnZ2FwLTEnLAogICAgICAgIHVuZGVybGluZTogJ2JvcmRlci1iIGJvcmRlci1tdXRlZCBnYXAtMCcsCiAgICAgIH0sCiAgICAgIHNpemU6IHsKICAgICAgICBzbTogJycsCiAgICAgICAgbWQ6ICcnLAogICAgICAgIGxnOiAnJywKICAgICAgfSwKICAgIH0sCiAgICBjb21wb3VuZFZhcmlhbnRzOiBbCiAgICAgIHsgdmFyaWFudDogJ2RlZmF1bHQnLCBzaXplOiAnc20nLCBjbGFzczogJ3AtMC41JyB9LAogICAgICB7IHZhcmlhbnQ6ICdkZWZhdWx0Jywgc2l6ZTogJ21kJywgY2xhc3M6ICdwLTEnIH0sCiAgICAgIHsgdmFyaWFudDogJ2RlZmF1bHQnLCBzaXplOiAnbGcnLCBjbGFzczogJ3AtMS41JyB9LAogICAgXSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLAogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICAgIHNpemU6ICdtZCcsCiAgICB9LAogIH0KKQoKY29uc3QgdGFic1RyaWdnZXJWYXJpYW50cyA9IGN2YSgKICBgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHdoaXRlc3BhY2Utbm93cmFwCiAgIGZvbnQtbWVkaXVtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dAogICBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTEgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCBub3QtcHJvc2UgZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcvNTAgZm9jdXMtdmlzaWJsZTpib3JkZXItYm9yZGVyCiAgIGRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUgZGlzYWJsZWQ6b3BhY2l0eS01MCBjdXJzb3ItcG9pbnRlciBub3QtcHJvc2VgLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiBgCiAgICAgICAgICB3LWZ1bGwgcm91bmRlZC1tZAogICAgICAgICAgdGV4dC1mb3JlZ3JvdW5kLW11dGVkCiAgICAgICAgICBob3Zlcjp0ZXh0LWZvcmVncm91bmQKICAgICAgICAgIGRhdGEtW2FjdGl2ZS1pdGVtXTpiZy1iYWNrZ3JvdW5kLW11dGVkCiAgICAgICAgICBkYXRhLVthY3RpdmUtaXRlbV06dGV4dC1mb3JlZ3JvdW5kCiAgICAgICAgICBkYXRhLVthY3RpdmUtaXRlbV06c2hhZG93LXNtCiAgICAgICAgYCwKICAgICAgICBwaWxsczogYAogICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgdGV4dC1mb3JlZ3JvdW5kLW11dGVkCiAgICAgICAgICBob3ZlcjpiZy1iYWNrZ3JvdW5kCiAgICAgICAgICBob3Zlcjp0ZXh0LWZvcmVncm91bmQKICAgICAgICAgIGRhdGEtW2FjdGl2ZS1pdGVtXTpiZy1mb3JlZ3JvdW5kLW11dGVkCiAgICAgICAgICBkYXRhLVthY3RpdmUtaXRlbV06dGV4dC1iYWNrZ3JvdW5kCiAgICAgICAgICBkYXRhLVthY3RpdmUtaXRlbV06c2hhZG93LXNtCiAgICAgICAgYCwKICAgICAgICB1bmRlcmxpbmU6IGAKICAgICAgICAgIGJvcmRlci1iLTIgYm9yZGVyLXRyYW5zcGFyZW50CiAgICAgICAgICB0ZXh0LWZvcmVncm91bmQtbXV0ZWQKICAgICAgICAgIGhvdmVyOnRleHQtZm9yZWdyb3VuZAogICAgICAgICAgYm9yZGVyLW11dGVkCiAgICAgICAgICBkYXRhLVthY3RpdmUtaXRlbV06Ym9yZGVyLWZvcmVncm91bmQtbXV0ZWQKICAgICAgICAgIGRhdGEtW2FjdGl2ZS1pdGVtXTp0ZXh0LWZvcmVncm91bmQKICAgICAgICBgLAogICAgICB9LAogICAgICBzaXplOiB7CiAgICAgICAgc206ICcnLAogICAgICAgIG1kOiAnJywKICAgICAgICBsZzogJycsCiAgICAgIH0sCiAgICB9LAogICAgY29tcG91bmRWYXJpYW50czogWwogICAgICB7IHZhcmlhbnQ6ICdkZWZhdWx0Jywgc2l6ZTogJ3NtJywgY2xhc3M6ICdweC0yIHB5LTEgdGV4dC14cycgfSwKICAgICAgeyB2YXJpYW50OiAnZGVmYXVsdCcsIHNpemU6ICdtZCcsIGNsYXNzOiAncHgtMyBweS0xLjUgdGV4dC1zbScgfSwKICAgICAgeyB2YXJpYW50OiAnZGVmYXVsdCcsIHNpemU6ICdsZycsIGNsYXNzOiAncHgtNCBweS0yIHRleHQtYmFzZScgfSwKICAgICAgeyB2YXJpYW50OiAncGlsbHMnLCBzaXplOiAnc20nLCBjbGFzczogJ3B4LTMgcHktMS41IHRleHQteHMnIH0sCiAgICAgIHsgdmFyaWFudDogJ3BpbGxzJywgc2l6ZTogJ21kJywgY2xhc3M6ICdweC00IHB5LTIgdGV4dC1zbScgfSwKICAgICAgeyB2YXJpYW50OiAncGlsbHMnLCBzaXplOiAnbGcnLCBjbGFzczogJ3B4LTYgcHktMi41IHRleHQtYmFzZScgfSwKICAgICAgeyB2YXJpYW50OiAndW5kZXJsaW5lJywgc2l6ZTogJ3NtJywgY2xhc3M6ICdweC0zIHB5LTIgdGV4dC14cycgfSwKICAgICAgeyB2YXJpYW50OiAndW5kZXJsaW5lJywgc2l6ZTogJ21kJywgY2xhc3M6ICdweC00IHB5LTMgdGV4dC1zbScgfSwKICAgICAgeyB2YXJpYW50OiAndW5kZXJsaW5lJywgc2l6ZTogJ2xnJywgY2xhc3M6ICdweC02IHB5LTQgdGV4dC1iYXNlJyB9LAogICAgXSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICAgIHNpemU6ICdtZCcsCiAgICB9LAogIH0KKQoKaW50ZXJmYWNlIFRhYnNTdHlsZUNvbnRleHRWYWx1ZSB7CiAgdmFyaWFudDogJ2RlZmF1bHQnIHwgJ3BpbGxzJyB8ICd1bmRlcmxpbmUnCiAgc2l6ZTogJ3NtJyB8ICdtZCcgfCAnbGcnCiAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcKICBkaXNhYmxlZD86IGJvb2xlYW4KfQoKY29uc3QgVGFic1N0eWxlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8VGFic1N0eWxlQ29udGV4dFZhbHVlIHwgbnVsbD4obnVsbCkKCmZ1bmN0aW9uIHVzZVRhYnNTdHlsZUNvbnRleHQoKSB7CiAgY29uc3QgY3R4ID0gUmVhY3QudXNlQ29udGV4dChUYWJzU3R5bGVDb250ZXh0KQogIGlmICghY3R4KSB0aHJvdyBuZXcgRXJyb3IoJ1RhYnMgY29tcG9uZW50cyBtdXN0IGJlIHVzZWQgd2l0aGluIDxUYWJzPicpCiAgcmV0dXJuIGN0eAp9CgpleHBvcnQgaW50ZXJmYWNlIFRhYnNQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIHZhbHVlPzogc3RyaW5nCiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nCiAgb25WYWx1ZUNoYW5nZT86ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkCiAgb3JpZW50YXRpb24/OiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnCiAgdmFyaWFudD86ICdkZWZhdWx0JyB8ICdwaWxscycgfCAndW5kZXJsaW5lJwogIHNpemU/OiAnc20nIHwgJ21kJyB8ICdsZycKICBjbGFzc05hbWU/OiBzdHJpbmcKICBkaXNhYmxlZD86IGJvb2xlYW4KfQoKZXhwb3J0IGZ1bmN0aW9uIFRhYnMoewogIGNoaWxkcmVuLAogIHZhbHVlLAogIGRlZmF1bHRWYWx1ZSwKICBvblZhbHVlQ2hhbmdlLAogIG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnLAogIHZhcmlhbnQgPSAnZGVmYXVsdCcsCiAgc2l6ZSA9ICdtZCcsCiAgY2xhc3NOYW1lLAogIGRpc2FibGVkLAp9OiBUYWJzUHJvcHMpIHsKICBjb25zdCBzdG9yZSA9IEFyaWFraXQudXNlVGFiU3RvcmUoewogICAgZGVmYXVsdFNlbGVjdGVkSWQ6IGRlZmF1bHRWYWx1ZSwKICAgIHNlbGVjdGVkSWQ6IHZhbHVlLAogICAgc2V0U2VsZWN0ZWRJZDogKGlkKSA9PiB7CiAgICAgIGlmIChpZCAhPSBudWxsKSB7CiAgICAgICAgb25WYWx1ZUNoYW5nZT8uKGlkKQogICAgICB9CiAgICB9LAogICAgb3JpZW50YXRpb24sCiAgfSkKCiAgcmV0dXJuICgKICAgIDxUYWJzU3R5bGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHZhcmlhbnQsIHNpemUsIG9yaWVudGF0aW9uLCBkaXNhYmxlZCB9fT4KICAgICAgPEFyaWFraXQuVGFiUHJvdmlkZXIgc3RvcmU9e3N0b3JlfT4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICAgICAnbm90LXByb3NlJywKICAgICAgICAgICAgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ2ZsZXggZ2FwLTQnLAogICAgICAgICAgICBjbGFzc05hbWUKICAgICAgICAgICl9CiAgICAgICAgICBkYXRhLW9yaWVudGF0aW9uPXtvcmllbnRhdGlvbn0KICAgICAgICAgIGRhdGEtdmFyaWFudD17dmFyaWFudH0KICAgICAgICAgIGRhdGEtc2l6ZT17c2l6ZX0KICAgICAgICAgIGRhdGEtZGlzYWJsZWQ9e2Rpc2FibGVkID8gJycgOiB1bmRlZmluZWR9CiAgICAgICAgPgogICAgICAgICAge2NoaWxkcmVufQogICAgICAgIDwvZGl2PgogICAgICA8L0FyaWFraXQuVGFiUHJvdmlkZXI+CiAgICA8L1RhYnNTdHlsZUNvbnRleHQuUHJvdmlkZXI+CiAgKQp9CgpleHBvcnQgdHlwZSBUYWJzTGlzdFByb3BzID0gUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+CgpleHBvcnQgZnVuY3Rpb24gVGFic0xpc3QoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9OiBUYWJzTGlzdFByb3BzKSB7CiAgY29uc3QgeyBvcmllbnRhdGlvbiwgdmFyaWFudCwgc2l6ZSB9ID0gdXNlVGFic1N0eWxlQ29udGV4dCgpCiAgcmV0dXJuICgKICAgIDxBcmlha2l0LlRhYkxpc3QKICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICB0YWJzTGlzdFZhcmlhbnRzKHsgb3JpZW50YXRpb24sIHZhcmlhbnQsIHNpemUgfSksCiAgICAgICAgY2xhc3NOYW1lCiAgICAgICl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9Bcmlha2l0LlRhYkxpc3Q+CiAgKQp9CgpleHBvcnQgaW50ZXJmYWNlIFRhYnNUcmlnZ2VyUHJvcHMKICBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgdGFic1RyaWdnZXJWYXJpYW50cz4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICB2YWx1ZTogc3RyaW5nCn0KCmV4cG9ydCBmdW5jdGlvbiBUYWJzVHJpZ2dlcih7CiAgY2hpbGRyZW4sCiAgdmFsdWUsCiAgY2xhc3NOYW1lLAogIC4uLnByb3BzCn06IFRhYnNUcmlnZ2VyUHJvcHMpIHsKICBjb25zdCB7IHZhcmlhbnQsIHNpemUsIGRpc2FibGVkIH0gPSB1c2VUYWJzU3R5bGVDb250ZXh0KCkKICByZXR1cm4gKAogICAgPEFyaWFraXQuVGFiCiAgICAgIGlkPXt2YWx1ZX0KICAgICAgdmFsdWU9e3ZhbHVlfQogICAgICBjbGFzc05hbWU9e2NuKHRhYnNUcmlnZ2VyVmFyaWFudHMoeyB2YXJpYW50LCBzaXplIH0pLCBjbGFzc05hbWUpfQogICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9Bcmlha2l0LlRhYj4KICApCn0KCmV4cG9ydCBpbnRlcmZhY2UgVGFic0NvbnRlbnRQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIHZhbHVlOiBzdHJpbmcKICBjbGFzc05hbWU/OiBzdHJpbmcKfQoKZXhwb3J0IGZ1bmN0aW9uIFRhYnNDb250ZW50KHsgY2hpbGRyZW4sIHZhbHVlLCBjbGFzc05hbWUgfTogVGFic0NvbnRlbnRQcm9wcykgewogIHJldHVybiAoCiAgICA8QXJpYWtpdC5UYWJQYW5lbAogICAgICB0YWJJZD17dmFsdWV9CiAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgJ2ZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtcmluZy1vZmZzZXQvNTAgbm90LXByb3NlIGZvY3VzLXZpc2libGU6cmluZy1yaW5nLzUwIGZvY3VzLXZpc2libGU6Ym9yZGVyLWJvcmRlciBmb2N1cy12aXNpYmxlOnJpbmctMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTEgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUnLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L0FyaWFraXQuVGFiUGFuZWw+CiAgKQp9"
,
  "form.tsx": ""
,
  "tooltip.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgewogIFRvb2x0aXAgYXMgQXJpYWtpdFRvb2x0aXAsCiAgVG9vbHRpcEFuY2hvciwKICBUb29sdGlwQXJyb3csCiAgVG9vbHRpcFByb3ZpZGVyLAp9IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnCmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbScKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCnR5cGUgU2lkZSA9ICd0b3AnIHwgJ2JvdHRvbScgfCAnbGVmdCcgfCAncmlnaHQnCgpjb25zdCB0b29sdGlwQ29udGVudFZhcmlhbnRzID0gY3ZhKAogIGB6LTUwIHB4LTMgcHktMiB0ZXh0LXNtIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCByb3VuZGVkLW1kIHNoYWRvdy1tZCBwb2ludGVyLWV2ZW50cy1hdXRvIG5vdC1wcm9zZSBvdmVyZmxvdy1oaWRkZW4KICAgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dCBvcmlnaW4tdG9wIC10cmFuc2xhdGUteS0xIG9wYWNpdHktMCBzY2FsZS05NQogICBkYXRhLVtlbnRlcl06dHJhbnNsYXRlLXktMCBkYXRhLVtlbnRlcl06b3BhY2l0eS0xMDAgZGF0YS1bZW50ZXJdOnNjYWxlLTEwMAogICBkYXRhLVtsZWF2ZV06LXRyYW5zbGF0ZS15LTEgZGF0YS1bbGVhdmVdOm9wYWNpdHktMCBkYXRhLVtsZWF2ZV06c2NhbGUtOTVgLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsgZGVmYXVsdDogYGJnLWJhY2tncm91bmQtbXV0ZWQgdGV4dC1mb3JlZ3JvdW5kIGJvcmRlci1ib3JkZXJgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7IHZhcmlhbnQ6ICdkZWZhdWx0JyB9LAogIH0KKQoKZXhwb3J0IGludGVyZmFjZSBUb29sdGlwUHJvcHMgewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBkZWxheUR1cmF0aW9uPzogbnVtYmVyCn0KCmV4cG9ydCBpbnRlcmZhY2UgVG9vbHRpcFRyaWdnZXJQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxFbGVtZW50PiB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBDb250ZW50UHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwKICAgIE9taXQ8VmFyaWFudFByb3BzPHR5cGVvZiB0b29sdGlwQ29udGVudFZhcmlhbnRzPiwgJ3NpZGUnPiB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwogIHNpZGU/OiBTaWRlCn0KCmV4cG9ydCBjb25zdCBUb29sdGlwOiBSZWFjdC5GQzxUb29sdGlwUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBkZWxheUR1cmF0aW9uID0gNDAwLAp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxUb29sdGlwUHJvdmlkZXIgc2hvd1RpbWVvdXQ9e2RlbGF5RHVyYXRpb259IGhpZGVUaW1lb3V0PXsxMDB9PgogICAgICB7Y2hpbGRyZW59CiAgICA8L1Rvb2x0aXBQcm92aWRlcj4KICApCn0KCmV4cG9ydCBjb25zdCBUb29sdGlwVHJpZ2dlcjogUmVhY3QuRkM8VG9vbHRpcFRyaWdnZXJQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKICAuLi5wcm9wcwp9KSA9PiB7CiAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkgewogICAgcmV0dXJuICgKICAgICAgPFRvb2x0aXBBbmNob3IKICAgICAgICByZW5kZXI9eyhhbmNob3JQcm9wcykgPT4KICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudCgKICAgICAgICAgICAgY2hpbGRyZW4gYXMgUmVhY3QuUmVhY3RFbGVtZW50PHsgY2xhc3NOYW1lPzogc3RyaW5nIH0+LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgLi4uKGFuY2hvclByb3BzIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KSwKICAgICAgICAgICAgICBjbGFzc05hbWU6IGNuKAogICAgICAgICAgICAgICAgJ2lubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBub3QtcHJvc2UnLAogICAgICAgICAgICAgICAgY2xhc3NOYW1lLAogICAgICAgICAgICAgICAgKGNoaWxkcmVuIGFzIFJlYWN0LlJlYWN0RWxlbWVudDx7IGNsYXNzTmFtZT86IHN0cmluZyB9PikucHJvcHMKICAgICAgICAgICAgICAgICAgLmNsYXNzTmFtZQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIH0KICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgey4uLnByb3BzfQogICAgICAvPgogICAgKQogIH0KCiAgcmV0dXJuICgKICAgIDxUb29sdGlwQW5jaG9yCiAgICAgIGNsYXNzTmFtZT17Y24oJ25vdC1wcm9zZSBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXInLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIHtjaGlsZHJlbn0KICAgIDwvVG9vbHRpcEFuY2hvcj4KICApCn0KCmV4cG9ydCBjb25zdCBUb29sdGlwQ29udGVudDogUmVhY3QuRkM8VG9vbHRpcENvbnRlbnRQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKICB2YXJpYW50ID0gJ2RlZmF1bHQnLAogIC4uLnByb3BzCn0pID0+IHsKICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgewogICAgcmV0dXJuIG51bGwKICB9CgogIHJldHVybiBjcmVhdGVQb3J0YWwoCiAgICA8QXJpYWtpdFRvb2x0aXAKICAgICAgZ3V0dGVyPXstNH0KICAgICAgY2xhc3NOYW1lPXtjbih0b29sdGlwQ29udGVudFZhcmlhbnRzKHsgdmFyaWFudCB9KSwgY2xhc3NOYW1lKX0KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICAgIDxUb29sdGlwQXJyb3cgY2xhc3NOYW1lPSJmaWxsLWJhY2tncm91bmQtbXV0ZWQgc3Ryb2tlLW11dGVkIiAvPgogICAgPC9Bcmlha2l0VG9vbHRpcD4sCiAgICBkb2N1bWVudC5ib2R5CiAgKQp9"
,
  "calendar.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnCmltcG9ydCB7IEljb25zIH0gZnJvbSAnQC9hcHAvY29tcG9uZW50cy91aS9pY29ucycKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IGNhbGVuZGFyVmFyaWFudHMgPSBjdmEoCiAgWwogICAgJ3JvdW5kZWQtbGcgYmctYmFja2dyb3VuZCcsCiAgICAnc2hhZG93LW1kJywKICAgICd0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQnLAogICAgJ292ZXJmbG93LWhpZGRlbicsCiAgICAnbm90LXByb3NlJywKICAgICd0ZXh0LXhzJywKICAgICd3LWZpdCcsCiAgICAnbWF4LXctc20nLAogIF0sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgZGlzYWJsZWQ6IHsKICAgICAgICB0cnVlOiAnb3BhY2l0eS01MCBjdXJzb3Itbm90LWFsbG93ZWQnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgfSwKICB9CikKCmNvbnN0IGRheUJ1dHRvblZhcmlhbnRzID0gY3ZhKAogIFsKICAgICd0ZXh0LWNlbnRlcicsCiAgICAncm91bmRlZC1tZCcsCiAgICAndHJhbnNpdGlvbi1jb2xvcnMnLAogICAgJ2ZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwIG5vdC1wcm9zZSBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXInLAogICAgJ3ctOCcsCiAgICAnaC04JywKICAgICd0ZXh0LXhzJywKICAgICdmbGV4JywKICAgICdpdGVtcy1jZW50ZXInLAogICAgJ2p1c3RpZnktY2VudGVyJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHN0YXRlOiB7CiAgICAgICAgZGVmYXVsdDogJ2hvdmVyOmJnLWJhY2tncm91bmQtbXV0ZWQgdGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgICAgICBzZWxlY3RlZDogJ2JnLWZvcmVncm91bmQgdGV4dC1iYWNrZ3JvdW5kJywKICAgICAgICB0b2RheTogJ2JnLWJhY2tncm91bmQtbXV0ZWQgdGV4dC1mb3JlZ3JvdW5kJywKICAgICAgICBkaXNhYmxlZDogJ29wYWNpdHktNTAgY3Vyc29yLW5vdC1hbGxvd2VkIGxpbmUtdGhyb3VnaCcsCiAgICAgICAgb3V0c2lkZU1vbnRoOiAndGV4dC1mb3JlZ3JvdW5kLXN1YnRsZScsCiAgICAgIH0sCiAgICAgIGludGVyYWN0aW9uOiB7CiAgICAgICAgZW5hYmxlZDogJ2N1cnNvci1wb2ludGVyJywKICAgICAgICBkaXNhYmxlZDogJ2N1cnNvci1ub3QtYWxsb3dlZCcsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHN0YXRlOiAnZGVmYXVsdCcsCiAgICAgIGludGVyYWN0aW9uOiAnZW5hYmxlZCcsCiAgICB9LAogIH0KKQoKY29uc3QgREFZU19JTl9XRUVLID0gNwpjb25zdCBNT05USFMgPSBbCiAgJ0phbnVhcnknLAogICdGZWJydWFyeScsCiAgJ01hcmNoJywKICAnQXByaWwnLAogICdNYXknLAogICdKdW5lJywKICAnSnVseScsCiAgJ0F1Z3VzdCcsCiAgJ1NlcHRlbWJlcicsCiAgJ09jdG9iZXInLAogICdOb3ZlbWJlcicsCiAgJ0RlY2VtYmVyJywKXQpjb25zdCBXRUVLREFZUyA9IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10KCmV4cG9ydCBpbnRlcmZhY2UgQ2FsZW5kYXJQcm9wcwogIGV4dGVuZHMgT21pdDwKICAgICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+LAogICAgICAnb25DaGFuZ2UnIHwgJ2RlZmF1bHRWYWx1ZScKICAgID4sCiAgICBPbWl0PFZhcmlhbnRQcm9wczx0eXBlb2YgY2FsZW5kYXJWYXJpYW50cz4sICdkaXNhYmxlZCc+IHsKICB2YWx1ZT86IERhdGUKICBkZWZhdWx0VmFsdWU/OiBEYXRlCiAgb25DaGFuZ2U/OiAoZGF0ZTogRGF0ZSB8IHVuZGVmaW5lZCkgPT4gdm9pZAogIGRpc2FibGVkPzogYm9vbGVhbgogIGRpc2FibGVkRGF0ZXM/OiBEYXRlW10gfCAoKGRhdGU6IERhdGUpID0+IGJvb2xlYW4pCiAgbWluRGF0ZT86IERhdGUKICBtYXhEYXRlPzogRGF0ZQogIHNob3dXZWVrTnVtYmVycz86IGJvb2xlYW4KICBzaG93T3V0c2lkZURheXM/OiBib29sZWFuCiAgd2Vla1N0YXJ0c09uPzogMCB8IDEgfCAyIHwgMyB8IDQgfCA1IHwgNgogIGZvcm1hdE1vbnRoPzogKGRhdGU6IERhdGUpID0+IHN0cmluZwogIGZvcm1hdFdlZWtkYXk/OiAoZGF0ZTogRGF0ZSkgPT4gc3RyaW5nCiAgJ2FyaWEtbGFiZWwnPzogc3RyaW5nCn0KCmV4cG9ydCBjb25zdCBDYWxlbmRhcjogUmVhY3QuRkM8Q2FsZW5kYXJQcm9wcz4gPSAoewogIHZhbHVlOiBjb250cm9sbGVkVmFsdWUsCiAgZGVmYXVsdFZhbHVlLAogIG9uQ2hhbmdlLAogIGRpc2FibGVkID0gZmFsc2UsCiAgZGlzYWJsZWREYXRlcywKICBtaW5EYXRlLAogIG1heERhdGUsCiAgc2hvd1dlZWtOdW1iZXJzID0gZmFsc2UsCiAgc2hvd091dHNpZGVEYXlzID0gdHJ1ZSwKICB3ZWVrU3RhcnRzT24gPSAwLAogIGZvcm1hdE1vbnRoID0gKGRhdGUpID0+IGAke01PTlRIU1tkYXRlLmdldE1vbnRoKCldfSAke2RhdGUuZ2V0RnVsbFllYXIoKX1gLAogIGZvcm1hdFdlZWtkYXkgPSAoZGF0ZSkgPT4gV0VFS0RBWVNbZGF0ZS5nZXREYXkoKV0sCiAgY2xhc3NOYW1lID0gJycsCiAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsCiAgLi4ucHJvcHMKfSkgPT4gewogIGNvbnN0IFtpbnRlcm5hbFZhbHVlLCBzZXRJbnRlcm5hbFZhbHVlXSA9IHVzZVN0YXRlPERhdGUgfCB1bmRlZmluZWQ+KAogICAgZGVmYXVsdFZhbHVlCiAgKQogIGNvbnN0IFtjdXJyZW50TW9udGgsIHNldEN1cnJlbnRNb250aF0gPSB1c2VTdGF0ZSgoKSA9PiB7CiAgICByZXR1cm4gY29udHJvbGxlZFZhbHVlIHx8IGRlZmF1bHRWYWx1ZSB8fCBuZXcgRGF0ZSgpCiAgfSkKCiAgY29uc3QgaXNDb250cm9sbGVkID0gY29udHJvbGxlZFZhbHVlICE9PSB1bmRlZmluZWQKICBjb25zdCBzZWxlY3RlZERhdGUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkVmFsdWUgOiBpbnRlcm5hbFZhbHVlCiAgY29uc3QgaGVhZGluZ0lkID0gUmVhY3QudXNlSWQoKQoKICBjb25zdCBpc1NhbWVEYXkgPSB1c2VDYWxsYmFjaygoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKSA9PiB7CiAgICByZXR1cm4gKAogICAgICBkYXRlMS5nZXREYXRlKCkgPT09IGRhdGUyLmdldERhdGUoKSAmJgogICAgICBkYXRlMS5nZXRNb250aCgpID09PSBkYXRlMi5nZXRNb250aCgpICYmCiAgICAgIGRhdGUxLmdldEZ1bGxZZWFyKCkgPT09IGRhdGUyLmdldEZ1bGxZZWFyKCkKICAgICkKICB9LCBbXSkKCiAgY29uc3QgaXNTYW1lTW9udGggPSB1c2VDYWxsYmFjaygoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKSA9PiB7CiAgICByZXR1cm4gKAogICAgICBkYXRlMS5nZXRNb250aCgpID09PSBkYXRlMi5nZXRNb250aCgpICYmCiAgICAgIGRhdGUxLmdldEZ1bGxZZWFyKCkgPT09IGRhdGUyLmdldEZ1bGxZZWFyKCkKICAgICkKICB9LCBbXSkKCiAgY29uc3QgaXNEYXRlRGlzYWJsZWQgPSB1c2VDYWxsYmFjaygKICAgIChkYXRlOiBEYXRlKSA9PiB7CiAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuIHRydWUKCiAgICAgIGlmIChtaW5EYXRlICYmIGRhdGUgPCBtaW5EYXRlKSByZXR1cm4gdHJ1ZQogICAgICBpZiAobWF4RGF0ZSAmJiBkYXRlID4gbWF4RGF0ZSkgcmV0dXJuIHRydWUKCiAgICAgIGlmIChkaXNhYmxlZERhdGVzKSB7CiAgICAgICAgaWYgKHR5cGVvZiBkaXNhYmxlZERhdGVzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gZGlzYWJsZWREYXRlcyhkYXRlKQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGlzYWJsZWREYXRlcy5zb21lKChkaXNhYmxlZERhdGUpID0+CiAgICAgICAgICBpc1NhbWVEYXkoZGF0ZSwgZGlzYWJsZWREYXRlKQogICAgICAgICkKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9LAogICAgW2Rpc2FibGVkLCBtaW5EYXRlLCBtYXhEYXRlLCBkaXNhYmxlZERhdGVzLCBpc1NhbWVEYXldCiAgKQoKICBjb25zdCBjYWxlbmRhckRheXMgPSB1c2VNZW1vKCgpID0+IHsKICAgIGNvbnN0IHllYXIgPSBjdXJyZW50TW9udGguZ2V0RnVsbFllYXIoKQogICAgY29uc3QgbW9udGggPSBjdXJyZW50TW9udGguZ2V0TW9udGgoKQoKICAgIGNvbnN0IGZpcnN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKQogICAgY29uc3QgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIDApCgogICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZmlyc3REYXlPZk1vbnRoKQogICAgc3RhcnREYXRlLnNldERhdGUoCiAgICAgIHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAoKGZpcnN0RGF5T2ZNb250aC5nZXREYXkoKSAtIHdlZWtTdGFydHNPbiArIDcpICUgNykKICAgICkKCiAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUobGFzdERheU9mTW9udGgpCiAgICBjb25zdCBkYXlzVG9BZGQgPSA2IC0gKChsYXN0RGF5T2ZNb250aC5nZXREYXkoKSAtIHdlZWtTdGFydHNPbiArIDcpICUgNykKICAgIGVuZERhdGUuc2V0RGF0ZShlbmREYXRlLmdldERhdGUoKSArIGRheXNUb0FkZCkKCiAgICBjb25zdCBkYXlzOiBEYXRlW10gPSBbXQogICAgY29uc3QgY3VycmVudCA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSkKCiAgICB3aGlsZSAoY3VycmVudCA8PSBlbmREYXRlKSB7CiAgICAgIGRheXMucHVzaChuZXcgRGF0ZShjdXJyZW50KSkKICAgICAgY3VycmVudC5zZXREYXRlKGN1cnJlbnQuZ2V0RGF0ZSgpICsgMSkKICAgIH0KCiAgICByZXR1cm4gZGF5cwogIH0sIFtjdXJyZW50TW9udGgsIHdlZWtTdGFydHNPbl0pCgogIGNvbnN0IGdvVG9QcmV2aW91c01vbnRoID0gdXNlQ2FsbGJhY2soKCkgPT4gewogICAgc2V0Q3VycmVudE1vbnRoKAogICAgICAocHJldikgPT4gbmV3IERhdGUocHJldi5nZXRGdWxsWWVhcigpLCBwcmV2LmdldE1vbnRoKCkgLSAxLCAxKQogICAgKQogIH0sIFtdKQoKICBjb25zdCBnb1RvTmV4dE1vbnRoID0gdXNlQ2FsbGJhY2soKCkgPT4gewogICAgc2V0Q3VycmVudE1vbnRoKAogICAgICAocHJldikgPT4gbmV3IERhdGUocHJldi5nZXRGdWxsWWVhcigpLCBwcmV2LmdldE1vbnRoKCkgKyAxLCAxKQogICAgKQogIH0sIFtdKQoKICBjb25zdCBnb1RvVG9kYXkgPSB1c2VDYWxsYmFjaygoKSA9PiB7CiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkKICAgIHNldEN1cnJlbnRNb250aCh0b2RheSkKCiAgICBpZiAoIWlzRGF0ZURpc2FibGVkKHRvZGF5KSkgewogICAgICBpZiAoIWlzQ29udHJvbGxlZCkgewogICAgICAgIHNldEludGVybmFsVmFsdWUodG9kYXkpCiAgICAgIH0KICAgICAgb25DaGFuZ2U/Lih0b2RheSkKICAgIH0KICB9LCBbaXNDb250cm9sbGVkLCBpc0RhdGVEaXNhYmxlZCwgb25DaGFuZ2VdKQoKICBjb25zdCBnZXRJU09XZWVrTnVtYmVyID0gdXNlQ2FsbGJhY2soKGRhdGU6IERhdGUpID0+IHsKICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgKICAgICAgRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpKQogICAgKQogICAgY29uc3QgZGF5TnVtID0gZC5nZXRVVENEYXkoKSB8fCA3CiAgICBkLnNldFVUQ0RhdGUoZC5nZXRVVENEYXRlKCkgKyA0IC0gZGF5TnVtKQogICAgY29uc3QgeWVhclN0YXJ0ID0gbmV3IERhdGUoRGF0ZS5VVEMoZC5nZXRVVENGdWxsWWVhcigpLCAwLCAxKSkKICAgIHJldHVybiBNYXRoLmNlaWwoKChkLmdldFRpbWUoKSAtIHllYXJTdGFydC5nZXRUaW1lKCkpIC8gODY0MDAwMDAgKyAxKSAvIDcpCiAgfSwgW10pCgogIGNvbnN0IGhhbmRsZURhdGVTZWxlY3QgPSB1c2VDYWxsYmFjaygKICAgIChkYXRlOiBEYXRlKSA9PiB7CiAgICAgIGlmIChpc0RhdGVEaXNhYmxlZChkYXRlKSkgcmV0dXJuCgogICAgICBpZiAoIWlzQ29udHJvbGxlZCkgewogICAgICAgIHNldEludGVybmFsVmFsdWUoZGF0ZSkKICAgICAgfQoKICAgICAgb25DaGFuZ2U/LihkYXRlKQogICAgfSwKICAgIFtpc0RhdGVEaXNhYmxlZCwgaXNDb250cm9sbGVkLCBvbkNoYW5nZV0KICApCgogIGNvbnN0IHdlZWtkYXlzID0gdXNlTWVtbygoKSA9PiB7CiAgICBjb25zdCBkYXlzID0gW10KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgREFZU19JTl9XRUVLOyBpKyspIHsKICAgICAgY29uc3QgZGF5SW5kZXggPSAod2Vla1N0YXJ0c09uICsgaSkgJSBEQVlTX0lOX1dFRUsKICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKDIwMjMsIDAsIGRheUluZGV4ICsgMSkKICAgICAgY29uc3QgZGF5TmFtZSA9IGZvcm1hdFdlZWtkYXkoZGF0ZSkKICAgICAgZGF5cy5wdXNoKGRheU5hbWUuc2xpY2UoMCwgMikpCiAgICB9CiAgICByZXR1cm4gZGF5cwogIH0sIFt3ZWVrU3RhcnRzT24sIGZvcm1hdFdlZWtkYXldKQoKICBjb25zdCBmb2N1c0RhdGVJU08gPSB1c2VNZW1vKCgpID0+IHsKICAgIGNvbnN0IHRvSVNPID0gKGQ6IERhdGUpID0+IGQudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdCiAgICBjb25zdCBpc1Zpc2libGUgPSAoZDogRGF0ZSkgPT4KICAgICAgc2hvd091dHNpZGVEYXlzIHx8IGlzU2FtZU1vbnRoKGQsIGN1cnJlbnRNb250aCkKCiAgICBpZiAoc2VsZWN0ZWREYXRlKSB7CiAgICAgIGNvbnN0IGZvdW5kID0gY2FsZW5kYXJEYXlzLmZpbmQoCiAgICAgICAgKGQpID0+IGlzVmlzaWJsZShkKSAmJiBpc1NhbWVEYXkoZCwgc2VsZWN0ZWREYXRlKSAmJiAhaXNEYXRlRGlzYWJsZWQoZCkKICAgICAgKQogICAgICBpZiAoZm91bmQpIHJldHVybiB0b0lTTyhmb3VuZCkKICAgIH0KCiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkKICAgIGNvbnN0IHRvZGF5SW5WaWV3ID0gY2FsZW5kYXJEYXlzLmZpbmQoCiAgICAgIChkKSA9PiBpc1Zpc2libGUoZCkgJiYgaXNTYW1lRGF5KGQsIHRvZGF5KSAmJiAhaXNEYXRlRGlzYWJsZWQoZCkKICAgICkKICAgIGlmICh0b2RheUluVmlldykgcmV0dXJuIHRvSVNPKHRvZGF5SW5WaWV3KQoKICAgIGNvbnN0IGZpcnN0RW5hYmxlZEN1cnJlbnRNb250aCA9IGNhbGVuZGFyRGF5cy5maW5kKAogICAgICAoZCkgPT4gaXNTYW1lTW9udGgoZCwgY3VycmVudE1vbnRoKSAmJiBpc1Zpc2libGUoZCkgJiYgIWlzRGF0ZURpc2FibGVkKGQpCiAgICApCiAgICBpZiAoZmlyc3RFbmFibGVkQ3VycmVudE1vbnRoKSByZXR1cm4gdG9JU08oZmlyc3RFbmFibGVkQ3VycmVudE1vbnRoKQoKICAgIGNvbnN0IGZpcnN0RW5hYmxlZEFueSA9IGNhbGVuZGFyRGF5cy5maW5kKAogICAgICAoZCkgPT4gaXNWaXNpYmxlKGQpICYmICFpc0RhdGVEaXNhYmxlZChkKQogICAgKQogICAgcmV0dXJuIGZpcnN0RW5hYmxlZEFueSA/IHRvSVNPKGZpcnN0RW5hYmxlZEFueSkgOiB1bmRlZmluZWQKICB9LCBbCiAgICBjYWxlbmRhckRheXMsCiAgICBjdXJyZW50TW9udGgsCiAgICBpc0RhdGVEaXNhYmxlZCwKICAgIGlzU2FtZURheSwKICAgIGlzU2FtZU1vbnRoLAogICAgc2VsZWN0ZWREYXRlLAogICAgc2hvd091dHNpZGVEYXlzLAogIF0pCgogIGNvbnN0IGNvbXBvc2l0ZSA9IEFyaWFraXQudXNlQ29tcG9zaXRlU3RvcmUoewogICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJywKICAgIGZvY3VzTG9vcDogZmFsc2UsCiAgfSkKCiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgIGlmIChmb2N1c0RhdGVJU08pIHsKICAgICAgY29tcG9zaXRlLnNldEFjdGl2ZUlkKGBkLSR7Zm9jdXNEYXRlSVNPfWApCiAgICB9CiAgfSwgW2NvbXBvc2l0ZSwgZm9jdXNEYXRlSVNPXSkKCiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICBjYWxlbmRhclZhcmlhbnRzKHsKICAgICAgICAgIGRpc2FibGVkLAogICAgICAgIH0pLAogICAgICAgICdib3JkZXItYm9yZGVyIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQnLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbignZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuJywgJ3B4LTQgcHQtNCcpfT4KICAgICAgICA8YnV0dG9uCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBvbkNsaWNrPXtnb1RvUHJldmlvdXNNb250aH0KICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQtbXV0ZWQgaG92ZXI6YmctYmFja2dyb3VuZCBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwIG5vdC1wcm9zZSBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgY3Vyc29yLXBvaW50ZXIgcm91bmRlZC1tZCB0cmFuc2l0aW9uLWNvbG9ycyBmb2N1cy12aXNpYmxlOnJpbmctMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTEgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTAnLAogICAgICAgICAgICAncC0xLjUnCiAgICAgICAgICApfQogICAgICAgICAgYXJpYS1sYWJlbD0iUHJldmlvdXMgbW9udGgiCiAgICAgICAgPgogICAgICAgICAgPEljb25zLkNoZXZyb25MZWZ0IGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzc05hbWU9ImgtNCB3LTQiIC8+CiAgICAgICAgPC9idXR0b24+CgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTMiPgogICAgICAgICAgPGgyCiAgICAgICAgICAgIGlkPXtoZWFkaW5nSWR9CiAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICBhcmlhLWF0b21pYz0idHJ1ZSIKICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigndGV4dC1mb3JlZ3JvdW5kIGZvbnQtc2VtaWJvbGQnLCAndGV4dC1zbScpfQogICAgICAgICAgPgogICAgICAgICAgICB7Zm9ybWF0TW9udGgoY3VycmVudE1vbnRoKX0KICAgICAgICAgIDwvaDI+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgb25DbGljaz17Z29Ub1RvZGF5fQogICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICAgJ2JnLWJhY2tncm91bmQgaG92ZXI6YmctYmFja2dyb3VuZC1tdXRlZCB0ZXh0LWZvcmVncm91bmQtbXV0ZWQgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCBub3QtcHJvc2UgZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcvNTAgZm9jdXMtdmlzaWJsZTpib3JkZXItYm9yZGVyIGN1cnNvci1wb2ludGVyIHJvdW5kZWQtbWQgdHJhbnNpdGlvbi1jb2xvcnMgZm9jdXMtdmlzaWJsZTpyaW5nLTEgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC0xIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBkaXNhYmxlZDpvcGFjaXR5LTUwJywKICAgICAgICAgICAgICAncHgtMiBweS0xIHRleHQteHMnCiAgICAgICAgICAgICl9CiAgICAgICAgICA+CiAgICAgICAgICAgIFRvZGF5CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgb25DbGljaz17Z29Ub05leHRNb250aH0KICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQtbXV0ZWQgaG92ZXI6YmctYmFja2dyb3VuZCBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwIG5vdC1wcm9zZSBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgY3Vyc29yLXBvaW50ZXIgcm91bmRlZC1tZCB0cmFuc2l0aW9uLWNvbG9ycyBmb2N1cy12aXNpYmxlOnJpbmctMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTEgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTAnLAogICAgICAgICAgICAncC0xLjUnCiAgICAgICAgICApfQogICAgICAgICAgYXJpYS1sYWJlbD0iTmV4dCBtb250aCIKICAgICAgICA+CiAgICAgICAgICA8SWNvbnMuQ2hldnJvblJpZ2h0IGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzc05hbWU9ImgtNCB3LTQiIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzc05hbWU9InAtNCI+CiAgICAgICAgPGRpdgogICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgJ21iLTMgZ3JpZCcsCiAgICAgICAgICAgIHNob3dXZWVrTnVtYmVycyA/ICdncmlkLWNvbHMtOCcgOiAnZ3JpZC1jb2xzLTcnLAogICAgICAgICAgICAnZ2FwLTEnCiAgICAgICAgICApfQogICAgICAgID4KICAgICAgICAgIHtzaG93V2Vla051bWJlcnMgJiYgKAogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQtc3VidGxlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtY2VudGVyIGZvbnQtbWVkaXVtJywKICAgICAgICAgICAgICAgICdoLTggdy04IHRleHQteHMnCiAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgPgogICAgICAgICAgICAgIFdrCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgKX0KICAgICAgICAgIHt3ZWVrZGF5cy5tYXAoKGRheSkgPT4gewogICAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGtleT17ZGF5fQogICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgICAgICAgJ3RleHQtZm9yZWdyb3VuZC1zdWJ0bGUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC1jZW50ZXIgZm9udC1tZWRpdW0nLAogICAgICAgICAgICAgICAgICAnaC04IHctOCB0ZXh0LXhzJwogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7ZGF5fQogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICApCiAgICAgICAgICB9KX0KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPEFyaWFraXQuQ29tcG9zaXRlCiAgICAgICAgICBzdG9yZT17Y29tcG9zaXRlfQogICAgICAgICAgcm9sZT0iZ3JpZCIKICAgICAgICAgIHsuLi4oYXJpYUxhYmVsCiAgICAgICAgICAgID8geyBbJ2FyaWEtbGFiZWwnXTogYXJpYUxhYmVsIH0KICAgICAgICAgICAgOiB7IFsnYXJpYS1sYWJlbGxlZGJ5J106IGhlYWRpbmdJZCB9KX0KICAgICAgICAgIGNsYXNzTmFtZT0ic3BhY2UteS0xIgogICAgICAgID4KICAgICAgICAgIHtBcnJheS5mcm9tKAogICAgICAgICAgICB7IGxlbmd0aDogTWF0aC5jZWlsKGNhbGVuZGFyRGF5cy5sZW5ndGggLyBEQVlTX0lOX1dFRUspIH0sCiAgICAgICAgICAgIChfLCB3ZWVrSW5kZXgpID0+ICgKICAgICAgICAgICAgICA8QXJpYWtpdC5Db21wb3NpdGVSb3cKICAgICAgICAgICAgICAgIGtleT17CiAgICAgICAgICAgICAgICAgIGNhbGVuZGFyRGF5c1t3ZWVrSW5kZXggKiBEQVlTX0lOX1dFRUtdCiAgICAgICAgICAgICAgICAgICAgLnRvSVNPU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJ1QnKVswXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgICAgICAgJ2dyaWQnLAogICAgICAgICAgICAgICAgICBzaG93V2Vla051bWJlcnMgPyAnZ3JpZC1jb2xzLTgnIDogJ2dyaWQtY29scy03JywKICAgICAgICAgICAgICAgICAgJ2dhcC0xJwogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7c2hvd1dlZWtOdW1iZXJzICYmICgKICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICAgICAgICAgICAndGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0ZXh0LWNlbnRlcicsCiAgICAgICAgICAgICAgICAgICAgICAnaC04IHctOCB0ZXh0LXhzJwogICAgICAgICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICB7Z2V0SVNPV2Vla051bWJlcihjYWxlbmRhckRheXNbd2Vla0luZGV4ICogREFZU19JTl9XRUVLXSl9CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICAgIHtjYWxlbmRhckRheXMKICAgICAgICAgICAgICAgICAgLnNsaWNlKAogICAgICAgICAgICAgICAgICAgIHdlZWtJbmRleCAqIERBWVNfSU5fV0VFSywKICAgICAgICAgICAgICAgICAgICAod2Vla0luZGV4ICsgMSkgKiBEQVlTX0lOX1dFRUsKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAubWFwKChkYXRlLCBfZGF5SW5kZXgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1NlbGVjdGVkID0KICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSAmJiBpc1NhbWVEYXkoZGF0ZSwgc2VsZWN0ZWREYXRlKQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQ3VycmVudE1vbnRoID0gaXNTYW1lTW9udGgoZGF0ZSwgY3VycmVudE1vbnRoKQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVG9kYXkgPSBpc1NhbWVEYXkoZGF0ZSwgbmV3IERhdGUoKSkKICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0Rpc2FibGVkID0gaXNEYXRlRGlzYWJsZWQoZGF0ZSkKICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRTaG93ID0gc2hvd091dHNpZGVEYXlzIHx8IGlzQ3VycmVudE1vbnRoCgogICAgICAgICAgICAgICAgICAgIGlmICghc2hvdWxkU2hvdykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2RhdGUudG9JU09TdHJpbmcoKX0gY2xhc3NOYW1lPSJoLTggdy04IiAvPgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgIDxBcmlha2l0LkNvbXBvc2l0ZUl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2BkLSR7ZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF19YH0KICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtkYXRlLnRvSVNPU3RyaW5nKCl9CiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURhdGVTZWxlY3QoZGF0ZSl9CiAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17KGUpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICcgJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVEYXRlU2VsZWN0KGRhdGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJncmlkY2VsbCIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD17Qm9vbGVhbihpc1NlbGVjdGVkKX0KICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD17aXNEaXNhYmxlZCB8fCB1bmRlZmluZWR9CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGF0ZT17ZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF19CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5QnV0dG9uVmFyaWFudHMoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGlzU2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc2VsZWN0ZWQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXNUb2RheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RvZGF5JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXNEaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZGlzYWJsZWQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICFpc0N1cnJlbnRNb250aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdvdXRzaWRlTW9udGgnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2RlZmF1bHQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb246IGlzRGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJ2VuYWJsZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e2Ake2RhdGUuZ2V0RGF0ZSgpfSAke01PTlRIU1tkYXRlLmdldE1vbnRoKCldfSAke2RhdGUuZ2V0RnVsbFllYXIoKX1gfQogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWN1cnJlbnQ9e2lzVG9kYXkgPyAnZGF0ZScgOiB1bmRlZmluZWR9CiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRlLmdldERhdGUoKX0KICAgICAgICAgICAgICAgICAgICAgIDwvQXJpYWtpdC5Db21wb3NpdGVJdGVtPgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfSl9CiAgICAgICAgICAgICAgPC9Bcmlha2l0LkNvbXBvc2l0ZVJvdz4KICAgICAgICAgICAgKQogICAgICAgICAgKX0KICAgICAgICA8L0FyaWFraXQuQ29tcG9zaXRlPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICkKfQ=="
,
  "card.tsx": "aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJwoKZXhwb3J0IGludGVyZmFjZSBDYXJkUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKfQoKZXhwb3J0IGludGVyZmFjZSBDYXJkSGVhZGVyUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKfQoKZXhwb3J0IGludGVyZmFjZSBDYXJkVGl0bGVQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwogIGFzPzogUmVhY3QuRWxlbWVudFR5cGUKfQoKZXhwb3J0IGludGVyZmFjZSBDYXJkRGVzY3JpcHRpb25Qcm9wcwogIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTFBhcmFncmFwaEVsZW1lbnQ+IHsKICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgY2xhc3NOYW1lPzogc3RyaW5nCn0KCmV4cG9ydCBpbnRlcmZhY2UgQ2FyZENvbnRlbnRQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIENhcmRGb290ZXJQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIENhcmRBY3Rpb25zUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKfQoKZXhwb3J0IGNvbnN0IENhcmQgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBDYXJkUHJvcHM+KAogICh7IGNoaWxkcmVuLCBjbGFzc05hbWUgPSAnJywgLi4ucHJvcHMgfSwgcmVmKSA9PiB7CiAgICByZXR1cm4gKAogICAgICA8ZGl2CiAgICAgICAgcmVmPXtyZWZ9CiAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICdiZy1iYWNrZ3JvdW5kIG5vdC1wcm9zZSByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLW5vbmUgc2hhZG93LW1kIGRhcms6Ym9yZGVyLXNvbGlkJywKICAgICAgICAgIGNsYXNzTmFtZQogICAgICAgICl9CiAgICAgICAgey4uLnByb3BzfQogICAgICA+CiAgICAgICAge2NoaWxkcmVufQogICAgICA8L2Rpdj4KICAgICkKICB9CikKCkNhcmQuZGlzcGxheU5hbWUgPSAnQ2FyZCcKCmV4cG9ydCBjb25zdCBDYXJkSGVhZGVyOiBSZWFjdC5GQzxDYXJkSGVhZGVyUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPXtjbignbm90LXByb3NlIHB4LTQgcHQtNCcsIGNsYXNzTmFtZSl9IHsuLi5wcm9wc30+CiAgICAgIHtjaGlsZHJlbn0KICAgIDwvZGl2PgogICkKfQoKZXhwb3J0IGNvbnN0IENhcmRUaXRsZTogUmVhY3QuRkM8Q2FyZFRpdGxlUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUgPSAnJywKICBhczogQ29tcG9uZW50ID0gJ2gzJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoCiAgICBDb21wb25lbnQsCiAgICB7CiAgICAgIGNsYXNzTmFtZTogY24oCiAgICAgICAgJ3RleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtZm9yZWdyb3VuZCBsZWFkaW5nLXRpZ2h0IG5vdC1wcm9zZScsCiAgICAgICAgY2xhc3NOYW1lCiAgICAgICksCiAgICAgIC4uLnByb3BzLAogICAgfSwKICAgIGNoaWxkcmVuCiAgKQp9CgpleHBvcnQgY29uc3QgQ2FyZERlc2NyaXB0aW9uOiBSZWFjdC5GQzxDYXJkRGVzY3JpcHRpb25Qcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSA9ICcnLAogIC4uLnByb3BzCn0pID0+IHsKICByZXR1cm4gKAogICAgPHAKICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAndGV4dC1mb3JlZ3JvdW5kLW11dGVkLzgwIG5vdC1wcm9zZSBtdC0xIHRleHQtc20gbGVhZGluZy1yZWxheGVkJywKICAgICAgICBjbGFzc05hbWUKICAgICAgKX0KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L3A+CiAgKQp9CgpleHBvcnQgY29uc3QgQ2FyZENvbnRlbnQ6IFJlYWN0LkZDPENhcmRDb250ZW50UHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjbignbm90LXByb3NlIHRleHQtbWQgdGV4dC1mb3JlZ3JvdW5kLW11dGVkIHAtNCcsIGNsYXNzTmFtZSl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9kaXY+CiAgKQp9CgpleHBvcnQgY29uc3QgQ2FyZEZvb3RlcjogUmVhY3QuRkM8Q2FyZEZvb3RlclByb3BzPiA9ICh7CiAgY2hpbGRyZW4sCiAgY2xhc3NOYW1lID0gJycsCiAgLi4ucHJvcHMKfSkgPT4gewogIHJldHVybiAoCiAgICA8ZGl2CiAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgJ2JnLWJhY2tncm91bmQtbXV0ZWQvNTAgZGFyazpiZy1iYWNrZ3JvdW5kLW11dGVkLzMwIGJvcmRlci1ib3JkZXItbXV0ZWQgbm90LXByb3NlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktZW5kIGJvcmRlci10IHAtNCcsCiAgICAgICAgY2xhc3NOYW1lCiAgICAgICl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9kaXY+CiAgKQp9CgpleHBvcnQgY29uc3QgQ2FyZEFjdGlvbnM6IFJlYWN0LkZDPENhcmRBY3Rpb25zUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjbignbm90LXByb3NlIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yJywgY2xhc3NOYW1lKX0KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L2Rpdj4KICApCn0="
,
  "progress.tsx": "aW1wb3J0IHsgY3ZhLCB0eXBlIFZhcmlhbnRQcm9wcyB9IGZyb20gJ2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eScKaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBwcm9ncmVzc1ZhcmlhbnRzID0gY3ZhKAogIFsKICAgICdyZWxhdGl2ZSB3LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtZnVsbCcsCiAgICAnYmctYmFja2dyb3VuZC1tdXRlZCBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQgYm9yZGVyLWJvcmRlci1tdXRlZCBzaGFkb3ctaW5uZXInLAogICAgJ3RyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dCcsCiAgICAnbm90LXByb3NlJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiAnWyY+ZGl2XTpiZy1mb3JlZ3JvdW5kIGRhcms6WyY+ZGl2XTpiZy1mb3JlZ3JvdW5kLzUwJywKICAgICAgICBzdWNjZXNzOiAnWyY+ZGl2XTpiZy1zdWNjZXNzLzgwIGRhcms6WyY+ZGl2XTpiZy1zdWNjZXNzLzQwJywKICAgICAgICB3YXJuaW5nOiAnWyY+ZGl2XTpiZy13YXJuaW5nLzgwIGRhcms6WyY+ZGl2XTpiZy13YXJuaW5nLzQwJywKICAgICAgICBkZXN0cnVjdGl2ZTogJ1smPmRpdl06YmctZXJyb3IvODAgZGFyazpbJj5kaXZdOmJnLWVycm9yLzQwJywKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAnaC0yJywKICAgICAgICBtZDogJ2gtMycsCiAgICAgICAgbGc6ICdoLTQnLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICAgIHNpemU6ICdtZCcsCiAgICB9LAogIH0KKQoKZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzc1Byb3BzCiAgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHByb2dyZXNzVmFyaWFudHM+IHsKICB2YWx1ZT86IG51bWJlcgogIG1heD86IG51bWJlcgogIHNob3dMYWJlbD86IGJvb2xlYW4KICBjbGFzc05hbWU/OiBzdHJpbmcKICAnYXJpYS1sYWJlbCc/OiBzdHJpbmcKfQoKZXhwb3J0IGNvbnN0IFByb2dyZXNzOiBSZWFjdC5GQzxQcm9ncmVzc1Byb3BzPiA9ICh7CiAgdmFsdWUgPSAwLAogIG1heCA9IDEwMCwKICB2YXJpYW50ID0gJ2RlZmF1bHQnLAogIHNpemUgPSAnbWQnLAogIHNob3dMYWJlbCA9IGZhbHNlLAogIGNsYXNzTmFtZSA9ICcnLAogICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLAogIC4uLnByb3BzCn0pID0+IHsKICBjb25zdCBwZXJjZW50YWdlID0gTWF0aC5taW4oTWF0aC5tYXgoKHZhbHVlIC8gbWF4KSAqIDEwMCwgMCksIDEwMCkKCiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJ3LWZ1bGwiPgogICAgICB7c2hvd0xhYmVsICYmICgKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibWItMiBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4iPgogICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJ0ZXh0LWZvcmVncm91bmQtbXV0ZWQgdGV4dC1zbSBmb250LW1lZGl1bSI+CiAgICAgICAgICAgIHthcmlhTGFiZWwgfHwgJ1Byb2dyZXNzJ30KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0idGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSBtbC0yIHRleHQtc20iPgogICAgICAgICAgICB7TWF0aC5yb3VuZChwZXJjZW50YWdlKX0lCiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICA8ZGl2CiAgICAgICAgY2xhc3NOYW1lPXtjbihwcm9ncmVzc1ZhcmlhbnRzKHsgdmFyaWFudCwgc2l6ZSB9KSwgY2xhc3NOYW1lKX0KICAgICAgICByb2xlPSJwcm9ncmVzc2JhciIKICAgICAgICBhcmlhLXZhbHVlbWluPXswfQogICAgICAgIGFyaWEtdmFsdWVtYXg9e21heH0KICAgICAgICBhcmlhLXZhbHVlbm93PXt2YWx1ZX0KICAgICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWwgfHwgJ1Byb2dyZXNzJ30KICAgICAgICB7Li4ucHJvcHN9CiAgICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICAgICAncHJvZ3Jlc3MtZmlsbCBoLWZ1bGwgcm91bmRlZC1mdWxsIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTUwMCBlYXNlLWluLW91dCcKICAgICAgICAgICl9CiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogYCR7cGVyY2VudGFnZX0lYCB9fQogICAgICAgIC8+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgKQp9"
,
  "chat.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnCmltcG9ydCB7IEljb25zIH0gZnJvbSAnQC9hcHAvY29tcG9uZW50cy91aS9pY29ucycKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IGNoYXRWYXJpYW50cyA9IGN2YSgKICBbCiAgICAncmVsYXRpdmUgYmctYmFja2dyb3VuZCBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQgYm9yZGVyLWJvcmRlcicsCiAgICAncm91bmRlZC1sZyBzaGFkb3ctbWQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0JywKICAgICdvdmVyZmxvdy1oaWRkZW4gbm90LXByb3NlJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiAnJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogJ2RlZmF1bHQnLAogICAgfSwKICB9CikKCmNvbnN0IG1lc3NhZ2VWYXJpYW50cyA9IGN2YSgKICBbCiAgICAncm91bmRlZC1sZyBweC0zIHB5LTIgdGV4dC1zbSB3LWZpdCBtYXgtdy1bODAlXScsCiAgICAndHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0IG5vdC1wcm9zZScsCiAgICAnb3ZlcmZsb3ctaGlkZGVuICcsCiAgXSwKICB7CiAgICB2YXJpYW50czogewogICAgICB2YXJpYW50OiB7CiAgICAgICAgdXNlcjogJ2JnLWZvcmVncm91bmQtbXV0ZWQgdGV4dC1iYWNrZ3JvdW5kJywKICAgICAgICBhc3Npc3RhbnQ6ICdiZy1iYWNrZ3JvdW5kLW11dGVkIHRleHQtZm9yZWdyb3VuZCcsCiAgICAgICAgc3lzdGVtOgogICAgICAgICAgJ2JnLWJhY2tncm91bmQtbXV0ZWQgdGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSB0ZXh0LWNlbnRlciB0ZXh0LXhzIG14LWF1dG8nLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAndXNlcicsCiAgICB9LAogIH0KKQoKY29uc3QgaW5wdXRWYXJpYW50cyA9IGN2YSgKICBbCiAgICAnZmxleC0xIHB4LTMgcHktMiB0ZXh0LXNtIG1pbi1oLVs0MHB4XSByb3VuZGVkLWxnIGJvcmRlciB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQgcmVzaXplLW5vbmUnLAogICAgJ2ZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMScsCiAgICAnZGlzYWJsZWQ6b3BhY2l0eS01MCBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQnLAogICAgJ3BsYWNlaG9sZGVyOnRleHQtZm9yZWdyb3VuZC1zdWJ0bGUgbm90LXByb3NlJywKICAgICdmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiBbCiAgICAgICAgICAnYm9yZGVyLWJvcmRlci1tdXRlZCcsCiAgICAgICAgICAnYmctYmFja2dyb3VuZCcsCiAgICAgICAgICAndGV4dC1mb3JlZ3JvdW5kJywKICAgICAgICAgICdmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXInLAogICAgICAgICAgJ2ZvY3VzLXZpc2libGU6cmluZy1yaW5nLzUwJywKICAgICAgICBdLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICB9LAogIH0KKQoKZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHsKICBpZDogc3RyaW5nCiAgY29udGVudDogc3RyaW5nCiAgc2VuZGVyOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nCiAgdGltZXN0YW1wOiBEYXRlCiAgYXZhdGFyPzogc3RyaW5nCiAgbmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIFR5cGluZ1VzZXIgewogIGlkOiBzdHJpbmcKICBuYW1lPzogc3RyaW5nCiAgYXZhdGFyPzogc3RyaW5nCn0KCmV4cG9ydCBpbnRlcmZhY2UgQ2hhdFByb3BzCiAgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGNoYXRWYXJpYW50cz4gewogIG1lc3NhZ2VzPzogTWVzc2FnZVtdCiAgb25TZW5kTWVzc2FnZT86IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQKICBwbGFjZWhvbGRlcj86IHN0cmluZwogIGRpc2FibGVkPzogYm9vbGVhbgogIGF1dG9Gb2N1cz86IGJvb2xlYW4KICBtYXhMZW5ndGg/OiBudW1iZXIKICBzaG93VGltZXN0YW1wcz86IGJvb2xlYW4KICBzaG93QXZhdGFycz86IGJvb2xlYW4KICBhbGxvd011bHRpbGluZT86IGJvb2xlYW4KICB0eXBpbmdVc2Vycz86IFR5cGluZ1VzZXJbXQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlc1Byb3BzCiAgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gewogIG1lc3NhZ2VzOiBNZXNzYWdlW10KICBzaG93VGltZXN0YW1wcz86IGJvb2xlYW4KICBzaG93QXZhdGFycz86IGJvb2xlYW4KICB0eXBpbmdVc2Vycz86IFR5cGluZ1VzZXJbXQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4gewogIG1lc3NhZ2U6IE1lc3NhZ2UKICBzaG93VGltZXN0YW1wPzogYm9vbGVhbgogIHNob3dBdmF0YXI/OiBib29sZWFuCiAgY2xhc3NOYW1lPzogc3RyaW5nCn0KCmV4cG9ydCBpbnRlcmZhY2UgVHlwaW5nSW5kaWNhdG9yUHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7CiAgdHlwaW5nVXNlcnM6IFR5cGluZ1VzZXJbXQogIHNob3dBdmF0YXJzPzogYm9vbGVhbgogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIENoYXRJbnB1dFByb3BzIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+IHsKICBvblNlbmRNZXNzYWdlOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkCiAgcGxhY2Vob2xkZXI/OiBzdHJpbmcKICBkaXNhYmxlZD86IGJvb2xlYW4KICBhdXRvRm9jdXM/OiBib29sZWFuCiAgbWF4TGVuZ3RoPzogbnVtYmVyCiAgYWxsb3dNdWx0aWxpbmU/OiBib29sZWFuCiAgY2xhc3NOYW1lPzogc3RyaW5nCn0KCmV4cG9ydCBpbnRlcmZhY2UgQ2hhdEFjdGlvbnNQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgVHlwaW5nSW5kaWNhdG9yOiBSZWFjdC5GQzxUeXBpbmdJbmRpY2F0b3JQcm9wcz4gPSAoewogIHR5cGluZ1VzZXJzLAogIHNob3dBdmF0YXJzID0gZmFsc2UsCiAgY2xhc3NOYW1lID0gJycsCiAgLi4ucHJvcHMKfSkgPT4gewogIGlmICghdHlwaW5nVXNlcnMgfHwgdHlwaW5nVXNlcnMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbAoKICBjb25zdCBnZXRUeXBpbmdUZXh0ID0gKCkgPT4gewogICAgaWYgKHR5cGluZ1VzZXJzLmxlbmd0aCA9PT0gMSkgewogICAgICByZXR1cm4gYCR7dHlwaW5nVXNlcnNbMF0ubmFtZSB8fCAnU29tZW9uZSd9IGlzIHR5cGluZ2AKICAgIH0gZWxzZSBpZiAodHlwaW5nVXNlcnMubGVuZ3RoID09PSAyKSB7CiAgICAgIHJldHVybiBgJHt0eXBpbmdVc2Vyc1swXS5uYW1lIHx8ICdTb21lb25lJ30gYW5kICR7dHlwaW5nVXNlcnNbMV0ubmFtZSB8fCAnc29tZW9uZSBlbHNlJ30gYXJlIHR5cGluZ2AKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBgJHt0eXBpbmdVc2Vyc1swXS5uYW1lIHx8ICdTb21lb25lJ30gYW5kICR7dHlwaW5nVXNlcnMubGVuZ3RoIC0gMX0gb3RoZXJzIGFyZSB0eXBpbmdgCiAgICB9CiAgfQoKICByZXR1cm4gKAogICAgPGRpdgogICAgICByb2xlPSJzdGF0dXMiCiAgICAgIGNsYXNzTmFtZT17Y24oJ25vdC1wcm9zZSBmbGV4IGl0ZW1zLWVuZCBnYXAtMicsIGNsYXNzTmFtZSl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge3Nob3dBdmF0YXJzICYmICgKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iYmctYmFja2dyb3VuZC1tdXRlZCB0ZXh0LWZvcmVncm91bmQtbXV0ZWQgZmxleCBoLTggdy04IGZsZXgtc2hyaW5rLTAgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtZnVsbCB0ZXh0LXhzIGZvbnQtbWVkaXVtIj4KICAgICAgICAgIHt0eXBpbmdVc2Vyc1swXS5hdmF0YXIgPyAoCiAgICAgICAgICAgIC8qIGJpb21lLWlnbm9yZSBsaW50L3BlcmZvcm1hbmNlL25vSW1nRWxlbWVudDogcHJlZmVyIG5hdGl2ZSBpbWcgaGVyZSAqLwogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgc3JjPXt0eXBpbmdVc2Vyc1swXS5hdmF0YXJ9CiAgICAgICAgICAgICAgYWx0PXt0eXBpbmdVc2Vyc1swXS5uYW1lIHx8ICd0eXBpbmcnfQogICAgICAgICAgICAgIGNsYXNzTmFtZT0iaC1mdWxsIHctZnVsbCByb3VuZGVkLWZ1bGwgb2JqZWN0LWNvdmVyIgogICAgICAgICAgICAvPgogICAgICAgICAgKSA6ICgKICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAge3R5cGluZ1VzZXJzWzBdLm5hbWUKICAgICAgICAgICAgICAgID8gdHlwaW5nVXNlcnNbMF0ubmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKQogICAgICAgICAgICAgICAgOiAnPyd9CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICl9CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCB3LWZ1bGwgZmxleC1jb2wgaXRlbXMtc3RhcnQgZ2FwLTEiPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJiZy1iYWNrZ3JvdW5kLW11dGVkIHRleHQtZm9yZWdyb3VuZCBub3QtcHJvc2Ugdy1maXQgbWF4LXctWzgwJV0gcm91bmRlZC1sZyBweC0zIHB5LTIgdGV4dC1zbSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQiPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJ0ZXh0LWZvcmVncm91bmQtbXV0ZWQgdGV4dC14cyI+CiAgICAgICAgICAgICAge2dldFR5cGluZ1RleHQoKX0KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBnYXAtMSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImJnLWZvcmVncm91bmQtbXV0ZWQgaC0xLjUgdy0xLjUgYW5pbWF0ZS1ib3VuY2Ugcm91bmRlZC1mdWxsIFthbmltYXRpb24tZGVsYXk6LTAuM3NdIiAvPgogICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJiZy1mb3JlZ3JvdW5kLW11dGVkIGgtMS41IHctMS41IGFuaW1hdGUtYm91bmNlIHJvdW5kZWQtZnVsbCBbYW5pbWF0aW9uLWRlbGF5Oi0wLjE1c10iIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImJnLWZvcmVncm91bmQtbXV0ZWQgaC0xLjUgdy0xLjUgYW5pbWF0ZS1ib3VuY2Ugcm91bmRlZC1mdWxsIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICkKfQoKZXhwb3J0IGNvbnN0IENoYXQ6IFJlYWN0LkZDPENoYXRQcm9wcz4gPSAoewogIG1lc3NhZ2VzID0gW10sCiAgb25TZW5kTWVzc2FnZSwKICBwbGFjZWhvbGRlciA9ICdUeXBlIGEgbWVzc2FnZS4uLicsCiAgZGlzYWJsZWQgPSBmYWxzZSwKICBhdXRvRm9jdXMgPSBmYWxzZSwKICBtYXhMZW5ndGggPSA1MDAsCiAgc2hvd1RpbWVzdGFtcHMgPSBmYWxzZSwKICBzaG93QXZhdGFycyA9IGZhbHNlLAogIGFsbG93TXVsdGlsaW5lID0gdHJ1ZSwKICB0eXBpbmdVc2VycyA9IFtdLAogIHZhcmlhbnQgPSAnZGVmYXVsdCcsCiAgY2xhc3NOYW1lID0gJycsCiAgLi4ucHJvcHMKfSkgPT4gewogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oY2hhdFZhcmlhbnRzKHsgdmFyaWFudCB9KSwgY2xhc3NOYW1lKX0gey4uLnByb3BzfT4KICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggaC1mdWxsIGZsZXgtY29sIHJvdW5kZWQtbGciPgogICAgICAgIDxDaGF0TWVzc2FnZXMKICAgICAgICAgIG1lc3NhZ2VzPXttZXNzYWdlc30KICAgICAgICAgIHNob3dUaW1lc3RhbXBzPXtzaG93VGltZXN0YW1wc30KICAgICAgICAgIHNob3dBdmF0YXJzPXtzaG93QXZhdGFyc30KICAgICAgICAgIHR5cGluZ1VzZXJzPXt0eXBpbmdVc2Vyc30KICAgICAgICAgIGNsYXNzTmFtZT0ibWF4LWgtOTYgbWluLWgtMCBmbGV4LTEiCiAgICAgICAgLz4KICAgICAgICB7b25TZW5kTWVzc2FnZSAmJiAoCiAgICAgICAgICA8Q2hhdElucHV0CiAgICAgICAgICAgIG9uU2VuZE1lc3NhZ2U9e29uU2VuZE1lc3NhZ2V9CiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn0KICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgICAgICAgICBhdXRvRm9jdXM9e2F1dG9Gb2N1c30KICAgICAgICAgICAgbWF4TGVuZ3RoPXttYXhMZW5ndGh9CiAgICAgICAgICAgIGFsbG93TXVsdGlsaW5lPXthbGxvd011bHRpbGluZX0KICAgICAgICAgIC8+CiAgICAgICAgKX0KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApCn0KCmV4cG9ydCBjb25zdCBDaGF0TWVzc2FnZXM6IFJlYWN0LkZDPENoYXRNZXNzYWdlc1Byb3BzPiA9ICh7CiAgbWVzc2FnZXMsCiAgc2hvd1RpbWVzdGFtcHMgPSBmYWxzZSwKICBzaG93QXZhdGFycyA9IGZhbHNlLAogIHR5cGluZ1VzZXJzID0gW10sCiAgY2xhc3NOYW1lID0gJycsCiAgLi4ucHJvcHMKfSkgPT4gewogIGNvbnN0IG1lc3NhZ2VzRW5kUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKQogIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCkKCiAgLyogYmlvbWUtaWdub3JlIGxpbnQvY29ycmVjdG5lc3MvdXNlRXhoYXVzdGl2ZURlcGVuZGVuY2llczogc2Nyb2xsIGRlcGVuZHMgb24gbWVzc2FnZSBjb250ZW50IGNoYW5nZXMgKi8KICB1c2VFZmZlY3QoKCkgPT4gewogICAgaWYgKGNvbnRhaW5lclJlZi5jdXJyZW50ICYmIG1lc3NhZ2VzRW5kUmVmLmN1cnJlbnQpIHsKICAgICAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUmVmLmN1cnJlbnQKICAgICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gY29udGFpbmVyLnNjcm9sbEhlaWdodAogICAgICBjb25zdCBoZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0CiAgICAgIGNvbnN0IG1heFNjcm9sbFRvcCA9IHNjcm9sbEhlaWdodCAtIGhlaWdodAoKICAgICAgY29udGFpbmVyLnNjcm9sbFRvKHsKICAgICAgICB0b3A6IG1heFNjcm9sbFRvcCA+IDAgPyBtYXhTY3JvbGxUb3AgOiAwLAogICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJywKICAgICAgfSkKICAgIH0KICB9LCBbbWVzc2FnZXMubGVuZ3RoLCB0eXBpbmdVc2Vycy5sZW5ndGhdKQoKICByZXR1cm4gKAogICAgPGRpdgogICAgICByZWY9e2NvbnRhaW5lclJlZn0KICAgICAgcm9sZT0ibG9nIgogICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgYXJpYS1yZWxldmFudD0iYWRkaXRpb25zIHRleHQiCiAgICAgIGFyaWEtbGFiZWw9IkNoYXQgbWVzc2FnZXMiCiAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgJ25vdC1wcm9zZSBmbGV4LTEgc3BhY2UteS0zIG92ZXJmbG93LXktYXV0byBwLTQnLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIHttZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+ICgKICAgICAgICA8Q2hhdE1lc3NhZ2UKICAgICAgICAgIGtleT17bWVzc2FnZS5pZH0KICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9CiAgICAgICAgICBzaG93VGltZXN0YW1wPXtzaG93VGltZXN0YW1wc30KICAgICAgICAgIHNob3dBdmF0YXI9e3Nob3dBdmF0YXJzfQogICAgICAgIC8+CiAgICAgICkpfQogICAgICA8VHlwaW5nSW5kaWNhdG9yIHR5cGluZ1VzZXJzPXt0eXBpbmdVc2Vyc30gc2hvd0F2YXRhcnM9e3Nob3dBdmF0YXJzfSAvPgogICAgICA8ZGl2IHJlZj17bWVzc2FnZXNFbmRSZWZ9IC8+CiAgICA8L2Rpdj4KICApCn0KCmV4cG9ydCBjb25zdCBDaGF0TWVzc2FnZTogUmVhY3QuRkM8Q2hhdE1lc3NhZ2VQcm9wcz4gPSAoewogIG1lc3NhZ2UsCiAgc2hvd1RpbWVzdGFtcCA9IGZhbHNlLAogIHNob3dBdmF0YXIgPSBmYWxzZSwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgY29uc3QgaXNVc2VyID0gbWVzc2FnZS5zZW5kZXIgPT09ICd1c2VyJwogIGNvbnN0IGlzU3lzdGVtID0gbWVzc2FnZS5zZW5kZXIgPT09ICdzeXN0ZW0nCgogIHJldHVybiAoCiAgICA8ZGl2CiAgICAgIHJvbGU9e2lzU3lzdGVtID8gJ3N0YXR1cycgOiAnbGlzdGl0ZW0nfQogICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICdub3QtcHJvc2UgZmxleCBpdGVtcy1lbmQgZ2FwLTInLAogICAgICAgIGlzVXNlciA/ICdmbGV4LXJvdy1yZXZlcnNlJyA6ICdmbGV4LXJvdycsCiAgICAgICAgaXNTeXN0ZW0gPyAnanVzdGlmeS1jZW50ZXInIDogJycsCiAgICAgICAgY2xhc3NOYW1lCiAgICAgICl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge3Nob3dBdmF0YXIgJiYgIWlzU3lzdGVtICYmICgKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iYmctYmFja2dyb3VuZC1tdXRlZCB0ZXh0LWZvcmVncm91bmQtbXV0ZWQgZmxleCBoLTggdy04IGZsZXgtc2hyaW5rLTAgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtZnVsbCB0ZXh0LXhzIGZvbnQtbWVkaXVtIj4KICAgICAgICAgIHttZXNzYWdlLmF2YXRhciA/ICgKICAgICAgICAgICAgLyogYmlvbWUtaWdub3JlIGxpbnQvcGVyZm9ybWFuY2Uvbm9JbWdFbGVtZW50OiBwcmVmZXIgbmF0aXZlIGltZyBoZXJlICovCiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICBzcmM9e21lc3NhZ2UuYXZhdGFyfQogICAgICAgICAgICAgIGFsdD17bWVzc2FnZS5uYW1lIHx8IG1lc3NhZ2Uuc2VuZGVyfQogICAgICAgICAgICAgIGNsYXNzTmFtZT0iaC1mdWxsIHctZnVsbCByb3VuZGVkLWZ1bGwgb2JqZWN0LWNvdmVyIgogICAgICAgICAgICAvPgogICAgICAgICAgKSA6ICgKICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAge21lc3NhZ2UubmFtZQogICAgICAgICAgICAgICAgPyBtZXNzYWdlLm5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkKICAgICAgICAgICAgICAgIDogbWVzc2FnZS5zZW5kZXIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICl9CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICA8ZGl2CiAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICdmbGV4IHctZnVsbCBmbGV4LWNvbCBnYXAtMScsCiAgICAgICAgICBpc1VzZXIgPyAnaXRlbXMtZW5kJyA6ICdpdGVtcy1zdGFydCcsCiAgICAgICAgICBpc1N5c3RlbSA/ICdpdGVtcy1jZW50ZXInIDogJycKICAgICAgICApfQogICAgICA+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKG1lc3NhZ2VWYXJpYW50cyh7IHZhcmlhbnQ6IG1lc3NhZ2Uuc2VuZGVyIH0pKX0+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oJ2ZsZXggdy1mdWxsIGZsZXgtY29sIGdhcC0xJyl9PgogICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0id2hpdGVzcGFjZS1wcmUtd3JhcCI+e21lc3NhZ2UuY29udGVudH08L2Rpdj4KICAgICAgICAgICAge3Nob3dUaW1lc3RhbXAgJiYgKAogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICAgICAgICAgICAndGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSBkYXJrOnRleHQtZm9yZWdyb3VuZC1zdWJ0bGUgdGV4dC14cycsCiAgICAgICAgICAgICAgICAgIGlzVXNlciA/ICd0ZXh0LXJpZ2h0JyA6ICd0ZXh0LWxlZnQnLAogICAgICAgICAgICAgICAgICBpc1N5c3RlbSA/ICd0ZXh0LWNlbnRlcicgOiAnJwogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7bWVzc2FnZS50aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7CiAgICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsCiAgICAgICAgICAgICAgICB9KX0KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICl9CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApCn0KCmV4cG9ydCBjb25zdCBDaGF0SW5wdXQ6IFJlYWN0LkZDPENoYXRJbnB1dFByb3BzPiA9ICh7CiAgb25TZW5kTWVzc2FnZSwKICBwbGFjZWhvbGRlciA9ICdUeXBlIGEgbWVzc2FnZS4uLicsCiAgZGlzYWJsZWQgPSBmYWxzZSwKICBhdXRvRm9jdXMgPSBmYWxzZSwKICBtYXhMZW5ndGggPSA1MDAsCiAgYWxsb3dNdWx0aWxpbmUgPSB0cnVlLAogIGNsYXNzTmFtZSA9ICcnLAogIC4uLnByb3BzCn0pID0+IHsKICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZSgnJykKICBjb25zdCB0ZXh0YXJlYVJlZiA9IHVzZVJlZjxIVE1MVGV4dEFyZWFFbGVtZW50PihudWxsKQogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAoYXV0b0ZvY3VzKSB7CiAgICAgIHRleHRhcmVhUmVmLmN1cnJlbnQ/LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KQogICAgfQogIH0sIFthdXRvRm9jdXNdKQoKICBjb25zdCBoYW5kbGVTdWJtaXQgPSB1c2VDYWxsYmFjaygKICAgIChlOiBSZWFjdC5Gb3JtRXZlbnQpID0+IHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgIGlmIChtZXNzYWdlLnRyaW0oKSAmJiAhZGlzYWJsZWQpIHsKICAgICAgICBvblNlbmRNZXNzYWdlKG1lc3NhZ2UudHJpbSgpKQogICAgICAgIHNldE1lc3NhZ2UoJycpCiAgICAgICAgaWYgKHRleHRhcmVhUmVmLmN1cnJlbnQpIHsKICAgICAgICAgIHRleHRhcmVhUmVmLmN1cnJlbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgW21lc3NhZ2UsIGRpc2FibGVkLCBvblNlbmRNZXNzYWdlXQogICkKCiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKAogICAgKGU6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHsKICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7CiAgICAgICAgaWYgKGFsbG93TXVsdGlsaW5lICYmIGUuc2hpZnRLZXkpIHsKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgICBoYW5kbGVTdWJtaXQoZSkKICAgICAgfQogICAgfSwKICAgIFthbGxvd011bHRpbGluZSwgaGFuZGxlU3VibWl0XQogICkKCiAgY29uc3QgaGFuZGxlVGV4dGFyZWFDaGFuZ2UgPSB1c2VDYWxsYmFjaygKICAgIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PikgPT4gewogICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlCiAgICAgIGlmIChtYXhMZW5ndGggJiYgdmFsdWUubGVuZ3RoID4gbWF4TGVuZ3RoKSByZXR1cm4KCiAgICAgIHNldE1lc3NhZ2UodmFsdWUpCgogICAgICBpZiAodGV4dGFyZWFSZWYuY3VycmVudCkgewogICAgICAgIHRleHRhcmVhUmVmLmN1cnJlbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nCiAgICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5taW4odGV4dGFyZWFSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQsIDEyMCkKICAgICAgICB0ZXh0YXJlYVJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9IGAke25ld0hlaWdodH1weGAKICAgICAgfQogICAgfSwKICAgIFttYXhMZW5ndGhdCiAgKQoKICByZXR1cm4gKAogICAgPGRpdgogICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICdiZy1iYWNrZ3JvdW5kLW11dGVkLzUwIGRhcms6YmctYmFja2dyb3VuZC1tdXRlZC8zMCBib3JkZXItYm9yZGVyLW11dGVkIG5vdC1wcm9zZSBib3JkZXItdCBwLTQnLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIiPgogICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgcmVmPXt0ZXh0YXJlYVJlZn0KICAgICAgICAgIHZhbHVlPXttZXNzYWdlfQogICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVRleHRhcmVhQ2hhbmdlfQogICAgICAgICAgb25LZXlEb3duPXtoYW5kbGVLZXlEb3dufQogICAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfQogICAgICAgICAgYXJpYS1sYWJlbD17cGxhY2Vob2xkZXIgfHwgJ1R5cGUgYSBtZXNzYWdlJ30KICAgICAgICAgIGFyaWEtbXVsdGlsaW5lPXthbGxvd011bHRpbGluZX0KICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgICAgICAgIHJvd3M9ezF9CiAgICAgICAgICBjbGFzc05hbWU9e2lucHV0VmFyaWFudHMoeyB2YXJpYW50OiAnZGVmYXVsdCcgfSl9CiAgICAgICAgLz4KICAgICAgICA8YnV0dG9uCiAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICBhcmlhLWxhYmVsPSJTZW5kIG1lc3NhZ2UiCiAgICAgICAgICBkaXNhYmxlZD17IW1lc3NhZ2UudHJpbSgpIHx8IGRpc2FibGVkfQogICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgJ2gtZnVsbCByb3VuZGVkLWxnIHB4LTMgcHktMiBmb250LW1lZGl1bSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQnLAogICAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgZm9jdXMtdmlzaWJsZTpyaW5nLTEgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC0xIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lJywKICAgICAgICAgICAgJ25vdC1wcm9zZSBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQgZGlzYWJsZWQ6b3BhY2l0eS01MCcsCiAgICAgICAgICAgICdiZy1mb3JlZ3JvdW5kJywKICAgICAgICAgICAgJ2hvdmVyOmJnLWZvcmVncm91bmQtbXV0ZWQnLAogICAgICAgICAgICAndGV4dC1iYWNrZ3JvdW5kJywKICAgICAgICAgICAgJ3NoYWRvdy1zbScKICAgICAgICAgICl9CiAgICAgICAgPgogICAgICAgICAgPEljb25zLlNlbmRNZXNzYWdlCiAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICBjbGFzc05hbWU9Im1iLTAuNSBtbC0xIHNpemUtNSAtcm90YXRlLTQ1IgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgICB7bWF4TGVuZ3RoICYmICgKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0idGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSBkYXJrOnRleHQtZm9yZWdyb3VuZC1zdWJ0bGUgbXQtMSB0ZXh0LXJpZ2h0IHRleHQteHMiPgogICAgICAgICAge21lc3NhZ2UubGVuZ3RofS97bWF4TGVuZ3RofQogICAgICAgIDwvZGl2PgogICAgICApfQogICAgPC9kaXY+CiAgKQp9CgpleHBvcnQgY29uc3QgQ2hhdEFjdGlvbnM6IFJlYWN0LkZDPENoYXRBY3Rpb25zUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjbignbm90LXByb3NlIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yJywgY2xhc3NOYW1lKX0KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L2Rpdj4KICApCn0="
,
  "input.tsx": "aW1wb3J0IHsgY3ZhLCB0eXBlIFZhcmlhbnRQcm9wcyB9IGZyb20gJ2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eScKaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJwoKY29uc3QgaW5wdXRWYXJpYW50cyA9IGN2YSgKICBbCiAgICAndy1maXQgZmxleCByb3VuZGVkLWxnIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQnLAogICAgJ2ZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMScsCiAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCcsCiAgICAnZGlzYWJsZWQ6b3BhY2l0eS01MCBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQnLAogICAgJ3BsYWNlaG9sZGVyOnRleHQtZm9yZWdyb3VuZC1zdWJ0bGUnLAogICAgJ25vdC1wcm9zZSBzaGFkb3ctc20nLAogIF0sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogewogICAgICAgIGRlZmF1bHQ6IFsKICAgICAgICAgICdib3JkZXItYm9yZGVyJywKICAgICAgICAgICdiZy1iYWNrZ3JvdW5kJywKICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQnLAogICAgICAgICAgJ2ZvY3VzLXZpc2libGU6Ym9yZGVyLWJvcmRlcicsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcvNTAnLAogICAgICAgIF0sCiAgICAgICAgZXJyb3I6IFsKICAgICAgICAgICdib3JkZXItZXJyb3IvNDAnLAogICAgICAgICAgJ2JnLWJhY2tncm91bmQnLAogICAgICAgICAgJ3RleHQtZm9yZWdyb3VuZCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpib3JkZXItZXJyb3IvNTAnLAogICAgICAgICAgJ2ZvY3VzLXZpc2libGU6cmluZy1lcnJvci81MCBkYXJrOmZvY3VzLXZpc2libGU6cmluZy1lcnJvci81MCcsCiAgICAgICAgXSwKICAgICAgICBzdWNjZXNzOiBbCiAgICAgICAgICAnYm9yZGVyLXN1Y2Nlc3MvNDAnLAogICAgICAgICAgJ2JnLWJhY2tncm91bmQnLAogICAgICAgICAgJ3RleHQtZm9yZWdyb3VuZCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpib3JkZXItc3VjY2Vzcy81MCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLXN1Y2Nlc3MvNTAgZGFyazpmb2N1cy12aXNpYmxlOnJpbmctc3VjY2Vzcy81MCcsCiAgICAgICAgXSwKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAncHgtMyBweS0xLjUgdGV4dC1zbScsCiAgICAgICAgbWQ6ICdweC0zIHB5LTIgdGV4dC1zbScsCiAgICAgICAgbGc6ICdweC00IHB5LTMgdGV4dC1iYXNlJywKICAgICAgfSwKICAgICAgaGFzTGVmdEljb246IHsKICAgICAgICB0cnVlOiAncGwtMTAnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgICAgaGFzUmlnaHRJY29uOiB7CiAgICAgICAgdHJ1ZTogJ3ByLTEwJywKICAgICAgICBmYWxzZTogJycsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6ICdkZWZhdWx0JywKICAgICAgc2l6ZTogJ21kJywKICAgICAgaGFzTGVmdEljb246IGZhbHNlLAogICAgICBoYXNSaWdodEljb246IGZhbHNlLAogICAgfSwKICB9CikKCmNvbnN0IGljb25WYXJpYW50cyA9IGN2YSgKICBbJ2Fic29sdXRlIHRvcC0xLzIgdHJhbnNmb3JtIC10cmFuc2xhdGUteS0xLzInLCAndGV4dC1mb3JlZ3JvdW5kLXN1YnRsZSddLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHBvc2l0aW9uOiB7CiAgICAgICAgbGVmdDogJ2xlZnQtMycsCiAgICAgICAgcmlnaHQ6ICdyaWdodC0zJywKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAndy00IGgtNCcsCiAgICAgICAgbWQ6ICd3LTQgaC00JywKICAgICAgICBsZzogJ3ctNSBoLTUnLAogICAgICB9LAogICAgICBkaXNhYmxlZDogewogICAgICAgIHRydWU6ICdvcGFjaXR5LTUwJywKICAgICAgICBmYWxzZTogJycsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHNpemU6ICdtZCcsCiAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgIH0sCiAgfQopCgpjb25zdCBsYWJlbFZhcmlhbnRzID0gY3ZhKCdibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTEuNScsIHsKICB2YXJpYW50czogewogICAgdmFyaWFudDogewogICAgICBkZWZhdWx0OiAndGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgICAgZXJyb3I6ICd0ZXh0LWZvcmVncm91bmQtbXV0ZWQnLAogICAgICBzdWNjZXNzOiAndGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgIH0sCiAgfSwKICBkZWZhdWx0VmFyaWFudHM6IHsKICAgIHZhcmlhbnQ6ICdkZWZhdWx0JywKICB9LAp9KQoKY29uc3QgbWVzc2FnZVZhcmlhbnRzID0gY3ZhKCdtdC0xLjUgdGV4dC1zbScsIHsKICB2YXJpYW50czogewogICAgdHlwZTogewogICAgICBlcnJvcjogJ3RleHQtZXJyb3IvOTAnLAogICAgICBzdWNjZXNzOiAndGV4dC1zdWNjZXNzLzkwJywKICAgICAgaGVscGVyOiAndGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgIH0sCiAgfSwKfSkKCmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRQcm9wcwogIGV4dGVuZHMgT21pdDxSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+LCAnc2l6ZSc+LAogICAgVmFyaWFudFByb3BzPHR5cGVvZiBpbnB1dFZhcmlhbnRzPiB7CiAgbGFiZWw/OiBzdHJpbmcKICBoZWxwZXJUZXh0Pzogc3RyaW5nCiAgc3VjY2Vzc01lc3NhZ2U/OiBzdHJpbmcKICBlcnJvck1lc3NhZ2U/OiBzdHJpbmcKICBsZWZ0SWNvbj86IFJlYWN0LlJlYWN0Tm9kZQogIHJpZ2h0SWNvbj86IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwogIGNvbnRhaW5lckNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgSW5wdXQ6IFJlYWN0LkZDPElucHV0UHJvcHM+ID0gKHsKICB2YXJpYW50ID0gJ2RlZmF1bHQnLAogIHNpemUgPSAnbWQnLAogIGxhYmVsLAogIGhlbHBlclRleHQsCiAgc3VjY2Vzc01lc3NhZ2UsCiAgZXJyb3JNZXNzYWdlLAogIGxlZnRJY29uLAogIHJpZ2h0SWNvbiwKICBjbGFzc05hbWUgPSAnJywKICBjb250YWluZXJDbGFzc05hbWUgPSAnJywKICBkaXNhYmxlZCwKICAuLi5wcm9wcwp9KSA9PiB7CiAgY29uc3QgaGFzTGVmdEljb24gPSAhIWxlZnRJY29uCiAgY29uc3QgaGFzUmlnaHRJY29uID0gISFyaWdodEljb24KICBjb25zdCBkaXNwbGF5RXJyb3JNZXNzYWdlID0gdmFyaWFudCA9PT0gJ2Vycm9yJyAmJiBlcnJvck1lc3NhZ2UKCiAgY29uc3QgYXV0b0lkID0gUmVhY3QudXNlSWQoKQogIGNvbnN0IGlucHV0SWQgPSBwcm9wcy5pZCA/PyBhdXRvSWQKICBjb25zdCBkZXNjcmliZWRCeTogc3RyaW5nW10gPSBbXQoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9e2Bub3QtcHJvc2UgJHtjb250YWluZXJDbGFzc05hbWV9YH0+CiAgICAgIHtsYWJlbCAmJiAoCiAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2lucHV0SWR9IGNsYXNzTmFtZT17bGFiZWxWYXJpYW50cyh7IHZhcmlhbnQgfSl9PgogICAgICAgICAge2xhYmVsfQogICAgICAgIDwvbGFiZWw+CiAgICAgICl9CgogICAgICA8ZGl2IGNsYXNzTmFtZT0icmVsYXRpdmUiPgogICAgICAgIHtsZWZ0SWNvbiAmJiAoCiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgICAgaWNvblZhcmlhbnRzKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnbGVmdCcsCiAgICAgICAgICAgICAgICBzaXplLAogICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICEhZGlzYWJsZWQsCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgJ1smPnN2Z106aC1mdWxsIFsmPnN2Z106dy1mdWxsJwogICAgICAgICAgICApfQogICAgICAgICAgPgogICAgICAgICAgICB7bGVmdEljb259CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApfQoKICAgICAgICA8aW5wdXQKICAgICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICAgIGlucHV0VmFyaWFudHMoeyB2YXJpYW50LCBzaXplLCBoYXNMZWZ0SWNvbiwgaGFzUmlnaHRJY29uIH0pLAogICAgICAgICAgICBjbGFzc05hbWUKICAgICAgICAgICl9CiAgICAgICAgICBpZD17aW5wdXRJZH0KICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgICAgICAgIGFyaWEtaW52YWxpZD17ZGlzcGxheUVycm9yTWVzc2FnZSA/IHRydWUgOiB1bmRlZmluZWR9CiAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXsoKCkgPT4gewogICAgICAgICAgICBpZiAoZGlzcGxheUVycm9yTWVzc2FnZSkgZGVzY3JpYmVkQnkucHVzaChgJHtpbnB1dElkfS1lcnJvcmApCiAgICAgICAgICAgIGVsc2UgaWYgKHN1Y2Nlc3NNZXNzYWdlKSBkZXNjcmliZWRCeS5wdXNoKGAke2lucHV0SWR9LXN1Y2Nlc3NgKQogICAgICAgICAgICBpZiAoaGVscGVyVGV4dCkgZGVzY3JpYmVkQnkucHVzaChgJHtpbnB1dElkfS1oZWxwZXJgKQogICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVkQnkubGVuZ3RoID8gZGVzY3JpYmVkQnkuam9pbignICcpIDogdW5kZWZpbmVkCiAgICAgICAgICB9KSgpfQogICAgICAgICAgey4uLnByb3BzfQogICAgICAgIC8+CgogICAgICAgIHtyaWdodEljb24gJiYgKAogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICAgICAgIGljb25WYXJpYW50cyh7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0JywKICAgICAgICAgICAgICAgIHNpemUsCiAgICAgICAgICAgICAgICBkaXNhYmxlZDogISFkaXNhYmxlZCwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAnWyY+c3ZnXTpoLWZ1bGwgWyY+c3ZnXTp3LWZ1bGwnCiAgICAgICAgICAgICl9CiAgICAgICAgICA+CiAgICAgICAgICAgIHtyaWdodEljb259CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApfQogICAgICA8L2Rpdj4KCiAgICAgIHtkaXNwbGF5RXJyb3JNZXNzYWdlICYmICgKICAgICAgICA8cAogICAgICAgICAgaWQ9e2Ake2lucHV0SWR9LWVycm9yYH0KICAgICAgICAgIGNsYXNzTmFtZT17bWVzc2FnZVZhcmlhbnRzKHsgdHlwZTogJ2Vycm9yJyB9KX0KICAgICAgICA+CiAgICAgICAgICB7ZXJyb3JNZXNzYWdlfQogICAgICAgIDwvcD4KICAgICAgKX0KCiAgICAgIHshZGlzcGxheUVycm9yTWVzc2FnZSAmJiBzdWNjZXNzTWVzc2FnZSAmJiAoCiAgICAgICAgPHAKICAgICAgICAgIGlkPXtgJHtpbnB1dElkfS1zdWNjZXNzYH0KICAgICAgICAgIGNsYXNzTmFtZT17bWVzc2FnZVZhcmlhbnRzKHsgdHlwZTogJ3N1Y2Nlc3MnIH0pfQogICAgICAgID4KICAgICAgICAgIHtzdWNjZXNzTWVzc2FnZX0KICAgICAgICA8L3A+CiAgICAgICl9CgogICAgICB7aGVscGVyVGV4dCAmJiAoCiAgICAgICAgPHAKICAgICAgICAgIGlkPXtgJHtpbnB1dElkfS1oZWxwZXJgfQogICAgICAgICAgY2xhc3NOYW1lPXttZXNzYWdlVmFyaWFudHMoeyB0eXBlOiAnaGVscGVyJyB9KX0KICAgICAgICA+CiAgICAgICAgICB7aGVscGVyVGV4dH0KICAgICAgICA8L3A+CiAgICAgICl9CiAgICA8L2Rpdj4KICApCn0="
,
  "alert.tsx": "aW1wb3J0IHsgY3ZhLCB0eXBlIFZhcmlhbnRQcm9wcyB9IGZyb20gJ2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eScKaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JwoKaW1wb3J0IHsgSWNvbnMgfSBmcm9tICdAL2FwcC9jb21wb25lbnRzL3VpL2ljb25zJwppbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJwoKY29uc3QgYWxlcnRWYXJpYW50cyA9IGN2YSgKICAncmVsYXRpdmUgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQgcHgtNCBweS0zIGZsZXggaXRlbXMtc3RhcnQgZ2FwLTMgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0IHctZml0IHNoYWRvdy1zbSBub3QtcHJvc2UnLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJ2JvcmRlci1ib3JkZXIgYmctYmFja2dyb3VuZCB0ZXh0LWZvcmVncm91bmQtbXV0ZWQgWyZfW2RhdGEtc2xvdD1hbGVydC1pY29uXV06dGV4dC1mb3JlZ3JvdW5kLW11dGVkIG92ZXJmbG93LWhpZGRlbicsCiAgICAgICAgZGVzdHJ1Y3RpdmU6CiAgICAgICAgICAnYm9yZGVyLWJvcmRlciBiZy1iYWNrZ3JvdW5kIHRleHQtZXJyb3IvOTAgWyZfW2RhdGEtc2xvdD1hbGVydC1pY29uXV06dGV4dC1lcnJvci85MCcsCiAgICAgICAgd2FybmluZzoKICAgICAgICAgICdib3JkZXItYm9yZGVyIGJnLWJhY2tncm91bmQgdGV4dC13YXJuaW5nLzkwIFsmX1tkYXRhLXNsb3Q9YWxlcnQtaWNvbl1dOnRleHQtd2FybmluZy85MCcsCiAgICAgICAgc3VjY2VzczoKICAgICAgICAgICdib3JkZXItYm9yZGVyIGJnLWJhY2tncm91bmQgdGV4dC1zdWNjZXNzLzkwIFsmX1tkYXRhLXNsb3Q9YWxlcnQtaWNvbl1dOnRleHQtc3VjY2Vzcy85MCcsCiAgICAgIH0sCiAgICAgIHNpemU6IHsKICAgICAgICBkZWZhdWx0OiAncHgtNCBweS0zJywKICAgICAgICBzbTogJ3B4LTMgcHktMicsCiAgICAgICAgbGc6ICdweC02IHB5LTQnLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICAgIHNpemU6ICdkZWZhdWx0JywKICAgIH0sCiAgfQopCgpjb25zdCBhbGVydFRpdGxlVmFyaWFudHMgPSBjdmEoJ21iLTEgZm9udC1zZW1pYm9sZCBsZWFkaW5nLW5vbmUgbm90LXByb3NlJywgewogIHZhcmlhbnRzOiB7CiAgICBzaXplOiB7CiAgICAgIGRlZmF1bHQ6ICd0ZXh0LXNtJywKICAgICAgc206ICd0ZXh0LXhzJywKICAgICAgbGc6ICd0ZXh0LWJhc2UnLAogICAgfSwKICB9LAogIGRlZmF1bHRWYXJpYW50czogewogICAgc2l6ZTogJ2RlZmF1bHQnLAogIH0sCn0pCgpjb25zdCBhbGVydERlc2NyaXB0aW9uVmFyaWFudHMgPSBjdmEoCiAgJ1smX3BdOmxlYWRpbmctcmVsYXhlZCBvcGFjaXR5LTkwIG5vdC1wcm9zZSB0ZXh0LWZvcmVncm91bmQtbXV0ZWQvODAnLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHNpemU6IHsKICAgICAgICBkZWZhdWx0OiAndGV4dC14cycsCiAgICAgICAgc206ICd0ZXh0LXhzJywKICAgICAgICBsZzogJ3RleHQtc20nLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnZGVmYXVsdCcsCiAgICB9LAogIH0KKQoKdHlwZSBBbGVydFZhcmlhbnQgPSBOb25OdWxsYWJsZTxWYXJpYW50UHJvcHM8dHlwZW9mIGFsZXJ0VmFyaWFudHM+Wyd2YXJpYW50J10+Cgp0eXBlIEljb25Db21wb25lbnQgPSB0eXBlb2YgSWNvbnMuSW5mbwoKY29uc3QgdmFyaWFudEljb25NYXA6IFJlY29yZDxBbGVydFZhcmlhbnQsIEljb25Db21wb25lbnQ+ID0gewogIGRlZmF1bHQ6IEljb25zLkluZm8sCiAgZGVzdHJ1Y3RpdmU6IEljb25zLlgsCiAgd2FybmluZzogSWNvbnMuV2FybmluZywKICBzdWNjZXNzOiBJY29ucy5TdWNjZXNzLAp9CgpleHBvcnQgaW50ZXJmYWNlIEFsZXJ0UHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYWxlcnRWYXJpYW50cz4gewogIGNsYXNzTmFtZT86IHN0cmluZwogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBzaG93SWNvbj86IGJvb2xlYW4KfQoKZXhwb3J0IGludGVyZmFjZSBBbGVydFRpdGxlUHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxIZWFkaW5nRWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGFsZXJ0VGl0bGVWYXJpYW50cz4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKICBhcz86IFJlYWN0LkVsZW1lbnRUeXBlCn0KCmV4cG9ydCBpbnRlcmZhY2UgQWxlcnREZXNjcmlwdGlvblByb3BzCiAgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MUGFyYWdyYXBoRWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGFsZXJ0RGVzY3JpcHRpb25WYXJpYW50cz4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKfQoKZXhwb3J0IGludGVyZmFjZSBBbGVydEljb25Qcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgQWxlcnQ6IFJlYWN0LkZDPEFsZXJ0UHJvcHM+ID0gKHsKICB2YXJpYW50LAogIHNpemUsCiAgY2xhc3NOYW1lLAogIGNoaWxkcmVuLAogIHNob3dJY29uID0gdHJ1ZSwKICAuLi5wcm9wcwp9KSA9PiB7CiAgY29uc3QgdmFyaWFudEtleSA9ICh2YXJpYW50ID8/ICdkZWZhdWx0JykgYXMgQWxlcnRWYXJpYW50CiAgY29uc3QgRGVmYXVsdEljb24gPSB2YXJpYW50SWNvbk1hcFt2YXJpYW50S2V5XSA/PyBJY29ucy5JbmZvCgogIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKQogIGNvbnN0IGljb25JbmRleCA9IGNoaWxkcmVuQXJyYXkuZmluZEluZGV4KAogICAgKGNoaWxkKSA9PiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZSA9PT0gQWxlcnRJY29uCiAgKQoKICBjb25zdCBjb250ZW50Q2hpbGRyZW4gPSBjaGlsZHJlbkFycmF5LmZpbHRlcigKICAgIChfLCBpbmRleCkgPT4gaW5kZXggIT09IGljb25JbmRleAogICkKCiAgbGV0IGljb25FbGVtZW50OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsID0gbnVsbAoKICBpZiAoc2hvd0ljb24gJiYgaWNvbkluZGV4ICE9PSAtMSkgewogICAgaWNvbkVsZW1lbnQgPSBjaGlsZHJlbkFycmF5W2ljb25JbmRleF0KICB9IGVsc2UgaWYgKHNob3dJY29uICYmIERlZmF1bHRJY29uKSB7CiAgICBpY29uRWxlbWVudCA9ICgKICAgICAgPGRpdgogICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgIGRhdGEtc2xvdD0iYWxlcnQtaWNvbiIKICAgICAgICBjbGFzc05hbWU9Im10LTAuNSBmbGV4IGgtNCB3LTQgc2hyaW5rLTAgdGV4dC1jdXJyZW50IgogICAgICA+CiAgICAgICAgPERlZmF1bHRJY29uIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzc05hbWU9ImgtNCB3LTQiIC8+CiAgICAgIDwvZGl2PgogICAgKQogIH0KCiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgcm9sZT0iYWxlcnQiCiAgICAgIGNsYXNzTmFtZT17Y24oYWxlcnRWYXJpYW50cyh7IHZhcmlhbnQsIHNpemUgfSksIGNsYXNzTmFtZSl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2ljb25FbGVtZW50fQogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBtaW4tdy0wIGZsZXgtMSBmbGV4LWNvbCI+e2NvbnRlbnRDaGlsZHJlbn08L2Rpdj4KICAgIDwvZGl2PgogICkKfQoKZXhwb3J0IGNvbnN0IEFsZXJ0VGl0bGU6IFJlYWN0LkZDPEFsZXJ0VGl0bGVQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKICBzaXplLAogIGFzOiBDb21wb25lbnQgPSAnaDUnLAogIC4uLnByb3BzCn0pID0+IHsKICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgKICAgIENvbXBvbmVudCwKICAgIHsKICAgICAgY2xhc3NOYW1lOiBjbihhbGVydFRpdGxlVmFyaWFudHMoeyBzaXplIH0pLCBjbGFzc05hbWUpLAogICAgICAuLi5wcm9wcywKICAgIH0sCiAgICBjaGlsZHJlbgogICkKfQoKZXhwb3J0IGNvbnN0IEFsZXJ0RGVzY3JpcHRpb246IFJlYWN0LkZDPEFsZXJ0RGVzY3JpcHRpb25Qcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKICBzaXplLAogIC4uLnByb3BzCn0pID0+IHsKICByZXR1cm4gKAogICAgPGRpdgogICAgICBjbGFzc05hbWU9e2NuKGFsZXJ0RGVzY3JpcHRpb25WYXJpYW50cyh7IHNpemUgfSksIGNsYXNzTmFtZSl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9kaXY+CiAgKQp9CgpleHBvcnQgY29uc3QgQWxlcnRJY29uOiBSZWFjdC5GQzxBbGVydEljb25Qcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSA9ICcnLAp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgIGRhdGEtc2xvdD0iYWxlcnQtaWNvbiIKICAgICAgY2xhc3NOYW1lPXtjbignbXQtMC41IGZsZXggaC00IHctNCBzaHJpbmstMCB0ZXh0LWN1cnJlbnQnLCBjbGFzc05hbWUpfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L2Rpdj4KICApCn0="
,
  "accordion.tsx": ""
,
  "skeleton.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBza2VsZXRvblZhcmlhbnRzID0gY3ZhKCdiZy1iYWNrZ3JvdW5kLW11dGVkIG5vdC1wcm9zZScsIHsKICB2YXJpYW50czogewogICAgdmFyaWFudDogewogICAgICBkZWZhdWx0OiAnJywKICAgICAgc2hpbW1lcjoKICAgICAgICAicmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIGFmdGVyOmNvbnRlbnQtWycnXSBhZnRlcjphYnNvbHV0ZSBhZnRlcjppbnNldC0wIGFmdGVyOmFuaW1hdGUtW3NoaW1tZXJfMnNfZWFzZS1pbi1vdXRfaW5maW5pdGVdIGFmdGVyOmJnLVtsaW5lYXItZ3JhZGllbnQoOTBkZWcsdHJhbnNwYXJlbnRfMCUscmdiYSgwLDAsMCwwLjA1KV81MCUsdHJhbnNwYXJlbnRfMTAwJSldIGRhcms6YWZ0ZXI6YmctW2xpbmVhci1ncmFkaWVudCg5MGRlZyx0cmFuc3BhcmVudF8wJSxyZ2JhKDI1NSwyNTUsMjU1LDAuMDUpXzUwJSx0cmFuc3BhcmVudF8xMDAlKV0iLAogICAgfSwKICAgIHNoYXBlOiB7CiAgICAgIHJlY3RhbmdsZTogJ3JvdW5kZWQnLAogICAgICBjaXJjbGU6ICdyb3VuZGVkLWZ1bGwnLAogICAgICB0ZXh0OiAncm91bmRlZCcsCiAgICB9LAogICAgc2l6ZTogewogICAgICBzbTogJycsCiAgICAgIG1kOiAnJywKICAgICAgbGc6ICcnLAogICAgfSwKICB9LAogIGNvbXBvdW5kVmFyaWFudHM6IFsKICAgIHsKICAgICAgc2hhcGU6ICd0ZXh0JywKICAgICAgc2l6ZTogJ3NtJywKICAgICAgY2xhc3M6ICdoLTMnLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICd0ZXh0JywKICAgICAgc2l6ZTogJ21kJywKICAgICAgY2xhc3M6ICdoLTQnLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICd0ZXh0JywKICAgICAgc2l6ZTogJ2xnJywKICAgICAgY2xhc3M6ICdoLTUnLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICdjaXJjbGUnLAogICAgICBzaXplOiAnc20nLAogICAgICBjbGFzczogJ3ctOCBoLTgnLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICdjaXJjbGUnLAogICAgICBzaXplOiAnbWQnLAogICAgICBjbGFzczogJ3ctMTIgaC0xMicsCiAgICB9LAogICAgewogICAgICBzaGFwZTogJ2NpcmNsZScsCiAgICAgIHNpemU6ICdsZycsCiAgICAgIGNsYXNzOiAndy0xNiBoLTE2JywKICAgIH0sCiAgICB7CiAgICAgIHNoYXBlOiAncmVjdGFuZ2xlJywKICAgICAgc2l6ZTogJ3NtJywKICAgICAgY2xhc3M6ICdoLTgnLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICdyZWN0YW5nbGUnLAogICAgICBzaXplOiAnbWQnLAogICAgICBjbGFzczogJ2gtMTInLAogICAgfSwKICAgIHsKICAgICAgc2hhcGU6ICdyZWN0YW5nbGUnLAogICAgICBzaXplOiAnbGcnLAogICAgICBjbGFzczogJ2gtMTYnLAogICAgfSwKICBdLAogIGRlZmF1bHRWYXJpYW50czogewogICAgdmFyaWFudDogJ2RlZmF1bHQnLAogICAgc2hhcGU6ICdyZWN0YW5nbGUnLAogICAgc2l6ZTogJ21kJywKICB9LAp9KQoKY29uc3QgbGFzdFRleHRMaW5lVmFyaWFudHMgPSBjdmEoJycsIHsKICB2YXJpYW50czogewogICAgaXNMYXN0OiB7CiAgICAgIHRydWU6ICd3LTMvNCcsCiAgICAgIGZhbHNlOiAndy1mdWxsJywKICAgIH0sCiAgfSwKICBkZWZhdWx0VmFyaWFudHM6IHsKICAgIGlzTGFzdDogZmFsc2UsCiAgfSwKfSkKCmV4cG9ydCBpbnRlcmZhY2UgU2tlbGV0b25Qcm9wcwogIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+LAogICAgVmFyaWFudFByb3BzPHR5cGVvZiBza2VsZXRvblZhcmlhbnRzPiB7CiAgd2lkdGg/OiBzdHJpbmcgfCBudW1iZXIKICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXIKICBsaW5lcz86IG51bWJlcgogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgU2tlbGV0b246IFJlYWN0LkZDPFNrZWxldG9uUHJvcHM+ID0gKHsKICB2YXJpYW50ID0gJ2RlZmF1bHQnLAogIHNpemUgPSAnbWQnLAogIHNoYXBlID0gJ3JlY3RhbmdsZScsCiAgd2lkdGgsCiAgaGVpZ2h0LAogIGxpbmVzID0gMSwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgdXNlRWZmZWN0KCgpID0+IHsKICAgIGlmICh2YXJpYW50ICE9PSAnc2hpbW1lcicpIHJldHVybgogICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hpbW1lci1rZXlmcmFtZXMnKSkgewogICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJykKICAgICAgc3R5bGUuaWQgPSAnc2hpbW1lci1rZXlmcmFtZXMnCiAgICAgIHN0eWxlLmlubmVySFRNTCA9IGBAa2V5ZnJhbWVzIHNoaW1tZXIge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XG4gIH1cbn1gCiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpCiAgICB9CiAgfSwgW3ZhcmlhbnRdKQoKICBjb25zdCBsaW5lS2V5cyA9IHVzZU1lbW8oCiAgICAoKSA9PgogICAgICBBcnJheS5mcm9tKHsgbGVuZ3RoOiBsaW5lcyB9LCAoKSA9PgogICAgICAgIHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmICdyYW5kb21VVUlEJyBpbiBjcnlwdG8KICAgICAgICAgID8gKGNyeXB0byBhcyBDcnlwdG8pLnJhbmRvbVVVSUQoKQogICAgICAgICAgOiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKQogICAgICApLAogICAgW2xpbmVzXQogICkKCiAgaWYgKHNoYXBlID09PSAndGV4dCcgJiYgbGluZXMgPiAxKSB7CiAgICByZXR1cm4gKAogICAgICA8ZGl2CiAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICAgIGNsYXNzTmFtZT17Y24oJ3NwYWNlLXktMicsIGNsYXNzTmFtZSl9CiAgICAgICAgey4uLnByb3BzfQogICAgICA+CiAgICAgICAge2xpbmVLZXlzLm1hcCgoa2V5LCBpbmRleCkgPT4gKAogICAgICAgICAgPGRpdgogICAgICAgICAgICBrZXk9e2tleX0KICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgICBza2VsZXRvblZhcmlhbnRzKHsgdmFyaWFudCwgc2hhcGUsIHNpemUgfSksCiAgICAgICAgICAgICAgbGFzdFRleHRMaW5lVmFyaWFudHMoeyBpc0xhc3Q6IGluZGV4ID09PSBsaW5lcyAtIDEgfSkKICAgICAgICAgICAgKX0KICAgICAgICAgICAgc3R5bGU9e3sKICAgICAgICAgICAgICB3aWR0aDogd2lkdGggJiYgaW5kZXggPT09IDAgPyB3aWR0aCA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCA/IGhlaWdodCA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgfX0KICAgICAgICAgIC8+CiAgICAgICAgKSl9CiAgICAgIDwvZGl2PgogICAgKQogIH0KCiAgY29uc3QgaW5saW5lU3R5bGVzOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge30KICBpZiAod2lkdGgpIGlubGluZVN0eWxlcy53aWR0aCA9IHdpZHRoCiAgaWYgKGhlaWdodCkgaW5saW5lU3R5bGVzLmhlaWdodCA9IGhlaWdodAoKICByZXR1cm4gKAogICAgPGRpdgogICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgIHNrZWxldG9uVmFyaWFudHMoeyB2YXJpYW50LCBzaGFwZSwgc2l6ZSB9KSwKICAgICAgICBzaGFwZSA9PT0gJ2NpcmNsZScgPyAnJyA6ICd3LWZ1bGwnLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgICBzdHlsZT17aW5saW5lU3R5bGVzfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfQ=="
,
  "command-k.tsx": ""
,
  "toast.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgUmVhY3QsIHsKICB1c2VDYWxsYmFjaywKICB1c2VFZmZlY3QsCiAgdXNlTGF5b3V0RWZmZWN0LAogIHVzZU1lbW8sCiAgdXNlUmVmLAogIHVzZVN0YXRlLAp9IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBJY29ucyB9IGZyb20gJ0AvYXBwL2NvbXBvbmVudHMvdWkvaWNvbnMnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBQT1NJVElPTl9DT05GSUdTID0gewogICd0b3AtbGVmdCc6IHsKICAgIGFuaW1hdGVJbjogeyB4OiAtMTAwLCB5OiAtMjAgfSwKICAgIGFuaW1hdGVPdXQ6IHsgeDogLTEwMCwgeTogLTIwIH0sCiAgfSwKICAndG9wLWNlbnRlcic6IHsKICAgIGFuaW1hdGVJbjogeyB4OiAwLCB5OiAtMTAwIH0sCiAgICBhbmltYXRlT3V0OiB7IHg6IDAsIHk6IC0xMDAgfSwKICB9LAogICd0b3AtcmlnaHQnOiB7CiAgICBhbmltYXRlSW46IHsgeDogMTAwLCB5OiAtMjAgfSwKICAgIGFuaW1hdGVPdXQ6IHsgeDogMTAwLCB5OiAtMjAgfSwKICB9LAogICdib3R0b20tbGVmdCc6IHsKICAgIGFuaW1hdGVJbjogeyB4OiAtMTAwLCB5OiAyMCB9LAogICAgYW5pbWF0ZU91dDogeyB4OiAtMTAwLCB5OiAxMDAgfSwKICB9LAogICdib3R0b20tY2VudGVyJzogewogICAgYW5pbWF0ZUluOiB7IHg6IDAsIHk6IDEwMCB9LAogICAgYW5pbWF0ZU91dDogeyB4OiAwLCB5OiAxMDAgfSwKICB9LAogICdib3R0b20tcmlnaHQnOiB7CiAgICBhbmltYXRlSW46IHsgeDogMTAwLCB5OiAyMCB9LAogICAgYW5pbWF0ZU91dDogeyB4OiAxMDAsIHk6IDEwMCB9LAogIH0sCn0gYXMgY29uc3QKCmNvbnN0IEZPQ1VTQUJMRV9TRUxFQ1RPUlMgPSBbCiAgJ2J1dHRvbjpub3QoW2Rpc2FibGVkXSknLAogICdpbnB1dDpub3QoW2Rpc2FibGVkXSknLAogICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLAogICdzZWxlY3Q6bm90KFtkaXNhYmxlZF0pJywKICAnYVtocmVmXScsCiAgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleD0iLTEiXSknLApdLmpvaW4oJywgJykKCmNvbnN0IEFOSU1BVElPTl9DT05GSUcgPSB7CiAgRU5URVJfRFVSQVRJT046IDIuMCwKICBFWElUX0RVUkFUSU9OOiAwLjQ1LAogIFNUQUNLX0RVUkFUSU9OOiAwLjUsCiAgU1RBQ0tfT0ZGU0VUOiAxNiwKICBFWFBBTkRFRF9HQVA6IDEyLAogIFNDQUxFX0ZBQ1RPUjogMC4wNCwKICBNSU5fU0NBTEU6IDAuOTIsCiAgTUFYX1ZJU0lCTEVfVE9BU1RTOiAzLAogIFpfSU5ERVhfQkFTRTogNTAsCiAgRUFTSU5HX0RFRkFVTFQ6ICdjdWJpYy1iZXppZXIoMC4yNSwgMC4xLCAwLjI1LCAxKScsCiAgRUFTSU5HX0VYSVQ6ICdjdWJpYy1iZXppZXIoMC4yNSwgMC4xLCAwLjI1LCAxKScsCn0gYXMgY29uc3QKCnR5cGUgVG9hc3RTdWJzY3JpYmVyID0gKHRvYXN0czogVG9hc3REYXRhW10pID0+IHZvaWQKCmNsYXNzIFRvYXN0U3RhdGUgewogIHByaXZhdGUgdG9hc3RzOiBUb2FzdERhdGFbXSA9IFtdCiAgcHJpdmF0ZSBzdWJzY3JpYmVyczogU2V0PFRvYXN0U3Vic2NyaWJlcj4gPSBuZXcgU2V0KCkKICBwcml2YXRlIGlkQ291bnRlciA9IDAKCiAgc3Vic2NyaWJlKGNhbGxiYWNrOiBUb2FzdFN1YnNjcmliZXIpOiAoKSA9PiB2b2lkIHsKICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKQogICAgcmV0dXJuICgpID0+IHsKICAgICAgdGhpcy5zdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spCiAgICB9CiAgfQoKICBwcml2YXRlIG5vdGlmeSgpOiB2b2lkIHsKICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2FsbGJhY2spID0+IHsKICAgICAgY2FsbGJhY2soWy4uLnRoaXMudG9hc3RzXSkKICAgIH0pCiAgfQoKICBwcml2YXRlIGdlbmVyYXRlSWQoKTogc3RyaW5nIHsKICAgIHJldHVybiBgdG9hc3QtJHtEYXRlLm5vdygpfS0keysrdGhpcy5pZENvdW50ZXJ9YAogIH0KCiAgYWRkKGRhdGE6IE9taXQ8VG9hc3REYXRhLCAnaWQnPik6IHN0cmluZyB7CiAgICBjb25zdCBpZCA9IHRoaXMuZ2VuZXJhdGVJZCgpCiAgICBjb25zdCBuZXdUb2FzdDogVG9hc3REYXRhID0geyAuLi5kYXRhLCBpZCB9CiAgICB0aGlzLnRvYXN0cyA9IFtuZXdUb2FzdCwgLi4udGhpcy50b2FzdHNdCiAgICB0aGlzLm5vdGlmeSgpCiAgICByZXR1cm4gaWQKICB9CgogIHJlbW92ZShpZDogc3RyaW5nKTogdm9pZCB7CiAgICB0aGlzLnRvYXN0cyA9IHRoaXMudG9hc3RzLmZpbHRlcigodG9hc3QpID0+IHRvYXN0LmlkICE9PSBpZCkKICAgIHRoaXMubm90aWZ5KCkKICB9CgogIHVwZGF0ZShpZDogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFRvYXN0RGF0YT4pOiB2b2lkIHsKICAgIHRoaXMudG9hc3RzID0gdGhpcy50b2FzdHMubWFwKCh0b2FzdCkgPT4KICAgICAgdG9hc3QuaWQgPT09IGlkID8geyAuLi50b2FzdCwgLi4uZGF0YSB9IDogdG9hc3QKICAgICkKICAgIHRoaXMubm90aWZ5KCkKICB9CgogIGRpc21pc3NBbGwoKTogdm9pZCB7CiAgICB0aGlzLnRvYXN0cyA9IHRoaXMudG9hc3RzLm1hcCgodG9hc3QpID0+ICh7CiAgICAgIC4uLnRvYXN0LAogICAgICBzaG91bGRDbG9zZTogdHJ1ZSwKICAgICAgZHVyYXRpb246IDAsCiAgICB9KSkKICAgIHRoaXMubm90aWZ5KCkKICB9CgogIGdldFRvYXN0cygpOiBUb2FzdERhdGFbXSB7CiAgICByZXR1cm4gWy4uLnRoaXMudG9hc3RzXQogIH0KfQoKY29uc3QgdG9hc3RTdGF0ZSA9IG5ldyBUb2FzdFN0YXRlKCkKCmNsYXNzIFRvYXN0ZXJJbnN0YW5jZU1hbmFnZXIgewogIHByaXZhdGUgYWN0aXZlSW5zdGFuY2VJZDogc3RyaW5nIHwgbnVsbCA9IG51bGwKICBwcml2YXRlIGluc3RhbmNlQ291bnRlciA9IDAKCiAgcmVnaXN0ZXJJbnN0YW5jZSgpOiBzdHJpbmcgewogICAgY29uc3QgaW5zdGFuY2VJZCA9IGB0b2FzdGVyLSR7Kyt0aGlzLmluc3RhbmNlQ291bnRlcn1gCiAgICBpZiAoIXRoaXMuYWN0aXZlSW5zdGFuY2VJZCkgewogICAgICB0aGlzLmFjdGl2ZUluc3RhbmNlSWQgPSBpbnN0YW5jZUlkCiAgICB9CiAgICByZXR1cm4gaW5zdGFuY2VJZAogIH0KCiAgdW5yZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlSWQ6IHN0cmluZyk6IHZvaWQgewogICAgaWYgKHRoaXMuYWN0aXZlSW5zdGFuY2VJZCA9PT0gaW5zdGFuY2VJZCkgewogICAgICB0aGlzLmFjdGl2ZUluc3RhbmNlSWQgPSBudWxsCiAgICB9CiAgfQoKICBpc0FjdGl2ZUluc3RhbmNlKGluc3RhbmNlSWQ6IHN0cmluZyk6IGJvb2xlYW4gewogICAgcmV0dXJuIHRoaXMuYWN0aXZlSW5zdGFuY2VJZCA9PT0gaW5zdGFuY2VJZAogIH0KfQoKY29uc3QgdG9hc3Rlckluc3RhbmNlTWFuYWdlciA9IG5ldyBUb2FzdGVySW5zdGFuY2VNYW5hZ2VyKCkKCmNvbnN0IHRvYXN0Q29udGFpbmVyVmFyaWFudHMgPSBjdmEoCiAgJ2ZpeGVkIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ub25lIGRhcms6Ym9yZGVyLXNvbGlkIHNoYWRvdy0yeGwgbm90LXByb3NlIHBvaW50ZXItZXZlbnRzLWF1dG8gd2lsbC1jaGFuZ2UtdHJhbnNmb3JtIGJhY2tkcm9wLWJsdXItbGcgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0JywKICB7CiAgICB2YXJpYW50czogewogICAgICBwb3NpdGlvbjogewogICAgICAgICd0b3AtbGVmdCc6ICd0b3AtNCBsZWZ0LTQgbWF4LXctc20gdy1mdWxsJywKICAgICAgICAndG9wLWNlbnRlcic6CiAgICAgICAgICAndG9wLTQgbGVmdC0xLzIgdHJhbnNmb3JtIC10cmFuc2xhdGUteC0xLzIgbWF4LXctc20gdy1mdWxsJywKICAgICAgICAndG9wLXJpZ2h0JzogJ3RvcC00IHJpZ2h0LTQgbWF4LXctc20gdy1mdWxsJywKICAgICAgICAnYm90dG9tLWxlZnQnOiAnYm90dG9tLTQgbGVmdC00IG1heC13LXNtIHctZnVsbCcsCiAgICAgICAgJ2JvdHRvbS1jZW50ZXInOgogICAgICAgICAgJ2JvdHRvbS00IGxlZnQtMS8yIHRyYW5zZm9ybSAtdHJhbnNsYXRlLXgtMS8yIG1heC13LXNtIHctZnVsbCcsCiAgICAgICAgJ2JvdHRvbS1yaWdodCc6ICdib3R0b20tNCByaWdodC00IG1heC13LXNtIHctZnVsbCcsCiAgICAgIH0sCiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJ2JvcmRlci1ib3JkZXIgYmctYmFja2dyb3VuZC1tdXRlZCB0ZXh0LWZvcmVncm91bmQgb3ZlcmZsb3ctaGlkZGVuJywKICAgICAgICBzdWNjZXNzOiAnYm9yZGVyLWJvcmRlciBiZy1iYWNrZ3JvdW5kLW11dGVkIHRleHQtc3VjY2Vzcy85MCcsCiAgICAgICAgd2FybmluZzogJ2JvcmRlci1ib3JkZXIgYmctYmFja2dyb3VuZC1tdXRlZCB0ZXh0LXdhcm5pbmcvOTAnLAogICAgICAgIGRlc3RydWN0aXZlOiAnYm9yZGVyLWJvcmRlciBiZy1iYWNrZ3JvdW5kLW11dGVkIHRleHQtZXJyb3IvOTAnLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBwb3NpdGlvbjogJ2JvdHRvbS1jZW50ZXInLAogICAgICB2YXJpYW50OiAnZGVmYXVsdCcsCiAgICB9LAogIH0KKQoKY29uc3QgdG9hc3RDb250ZW50VmFyaWFudHMgPSBjdmEoJ3JlbGF0aXZlIHJvdW5kZWQtbGcgb3ZlcmZsb3ctaGlkZGVuJywgewogIHZhcmlhbnRzOiB7CiAgICB2YXJpYW50OiB7CiAgICAgIGRlZmF1bHQ6ICcnLAogICAgICBzdWNjZXNzOiAnJywKICAgICAgd2FybmluZzogJycsCiAgICAgIGRlc3RydWN0aXZlOiAnJywKICAgIH0sCiAgfSwKICBkZWZhdWx0VmFyaWFudHM6IHsKICAgIHZhcmlhbnQ6ICdkZWZhdWx0JywKICB9LAp9KQoKZXhwb3J0IHR5cGUgVG9hc3RQb3NpdGlvbiA9CiAgfCAndG9wLWxlZnQnCiAgfCAndG9wLWNlbnRlcicKICB8ICd0b3AtcmlnaHQnCiAgfCAnYm90dG9tLWxlZnQnCiAgfCAnYm90dG9tLWNlbnRlcicKICB8ICdib3R0b20tcmlnaHQnCgpleHBvcnQgaW50ZXJmYWNlIFRvYXN0RGF0YSBleHRlbmRzIFZhcmlhbnRQcm9wczx0eXBlb2YgdG9hc3RDb250YWluZXJWYXJpYW50cz4gewogIGlkOiBzdHJpbmcKICB0aXRsZT86IHN0cmluZwogIGRlc2NyaXB0aW9uPzogc3RyaW5nCiAgY2xhc3NOYW1lPzogc3RyaW5nCiAgZHVyYXRpb24/OiBudW1iZXIKICBhY3Rpb24/OiB7CiAgICBsYWJlbDogc3RyaW5nCiAgICBvbkNsaWNrOiAoKSA9PiB2b2lkCiAgfQogIG9uQ2xvc2U/OiAoKSA9PiB2b2lkCiAgc2hvdWxkQ2xvc2U/OiBib29sZWFuCn0KCmV4cG9ydCBjb25zdCB0b2FzdCA9IChkYXRhOiBPbWl0PFRvYXN0RGF0YSwgJ2lkJz4gfCBzdHJpbmcpOiBzdHJpbmcgPT4gewogIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiB0b2FzdFN0YXRlLmFkZCh7IGRlc2NyaXB0aW9uOiBkYXRhIH0pCiAgfQogIHJldHVybiB0b2FzdFN0YXRlLmFkZChkYXRhKQp9Cgp0b2FzdC5zdWNjZXNzID0gKGRhdGE6IE9taXQ8VG9hc3REYXRhLCAnaWQnIHwgJ3ZhcmlhbnQnPiB8IHN0cmluZyk6IHN0cmluZyA9PiB7CiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHRvYXN0U3RhdGUuYWRkKHsgZGVzY3JpcHRpb246IGRhdGEsIHZhcmlhbnQ6ICdzdWNjZXNzJyB9KQogIH0KICByZXR1cm4gdG9hc3RTdGF0ZS5hZGQoeyAuLi5kYXRhLCB2YXJpYW50OiAnc3VjY2VzcycgfSkKfQoKdG9hc3Qud2FybmluZyA9IChkYXRhOiBPbWl0PFRvYXN0RGF0YSwgJ2lkJyB8ICd2YXJpYW50Jz4gfCBzdHJpbmcpOiBzdHJpbmcgPT4gewogIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiB0b2FzdFN0YXRlLmFkZCh7IGRlc2NyaXB0aW9uOiBkYXRhLCB2YXJpYW50OiAnd2FybmluZycgfSkKICB9CiAgcmV0dXJuIHRvYXN0U3RhdGUuYWRkKHsgLi4uZGF0YSwgdmFyaWFudDogJ3dhcm5pbmcnIH0pCn0KCnRvYXN0LmVycm9yID0gKGRhdGE6IE9taXQ8VG9hc3REYXRhLCAnaWQnIHwgJ3ZhcmlhbnQnPiB8IHN0cmluZyk6IHN0cmluZyA9PiB7CiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHRvYXN0U3RhdGUuYWRkKHsgZGVzY3JpcHRpb246IGRhdGEsIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScgfSkKICB9CiAgcmV0dXJuIHRvYXN0U3RhdGUuYWRkKHsgLi4uZGF0YSwgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyB9KQp9Cgp0b2FzdC5kaXNtaXNzID0gKGlkOiBzdHJpbmcpOiB2b2lkID0+IHsKICB0b2FzdFN0YXRlLnVwZGF0ZShpZCwgeyBzaG91bGRDbG9zZTogdHJ1ZSB9KQp9Cgp0b2FzdC5kaXNtaXNzQWxsID0gKCk6IHZvaWQgPT4gewogIHRvYXN0U3RhdGUuZGlzbWlzc0FsbCgpCn0KCmludGVyZmFjZSBUb2FzdEl0ZW1Qcm9wcyB7CiAgdG9hc3Q6IFRvYXN0RGF0YSAmIHsgaW5kZXg6IG51bWJlcjsgdG90YWw6IG51bWJlciB9CiAgb25SZW1vdmU6IChpZDogc3RyaW5nKSA9PiB2b2lkCiAgaXNHcm91cEhvdmVyZWQ/OiBib29sZWFuCiAgZXhwYW5kZWRPZmZzZXQ/OiBudW1iZXIKICBvbkhlaWdodENoYW5nZT86IChpZDogc3RyaW5nLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZAogIG9uR3JvdXBIb3ZlckVudGVyPzogKCkgPT4gdm9pZAp9Cgpjb25zdCBUb2FzdEl0ZW06IFJlYWN0LkZDPFRvYXN0SXRlbVByb3BzPiA9IFJlYWN0Lm1lbW8oCiAgKHsKICAgIHRvYXN0LAogICAgb25SZW1vdmUsCiAgICBpc0dyb3VwSG92ZXJlZCA9IGZhbHNlLAogICAgZXhwYW5kZWRPZmZzZXQgPSAwLAogICAgb25IZWlnaHRDaGFuZ2UsCiAgICBvbkdyb3VwSG92ZXJFbnRlciwKICB9KSA9PiB7CiAgICBjb25zdCB0b2FzdFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCkKICAgIGNvbnN0IHRpbWVvdXRSZWYgPSB1c2VSZWY8UmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCBudWxsPihudWxsKQogICAgY29uc3QgdGltZXJTdGFydFJlZiA9IHVzZVJlZjxudW1iZXIgfCBudWxsPihudWxsKQogICAgY29uc3QgcmVtYWluaW5nUmVmID0gdXNlUmVmPG51bWJlcj4oTnVtYmVyLk5hTikKICAgIGNvbnN0IGVudGVyQW5pbWF0aW9uUmVmID0gdXNlUmVmPG51bWJlciB8IG51bGw+KG51bGwpCiAgICBjb25zdCBpc0V4aXRpbmcgPSB1c2VSZWYoZmFsc2UpCiAgICBjb25zdCBoYXNBbmltYXRlZEluID0gdXNlUmVmKGZhbHNlKQogICAgY29uc3QgW2lzSXRlbUhvdmVyZWQsIHNldElzSXRlbUhvdmVyZWRdID0gdXNlU3RhdGUoZmFsc2UpCiAgICBjb25zdCBbYW5pbWF0aW9uU3RhdGUsIHNldEFuaW1hdGlvblN0YXRlXSA9IHVzZVN0YXRlPAogICAgICAnZW50ZXJpbmcnIHwgJ2VudGVyZWQnIHwgJ2V4aXRpbmcnIHwgJ3N0YWNraW5nJwogICAgPignZW50ZXJpbmcnKQoKICAgIGNvbnN0IHsKICAgICAgaWQsCiAgICAgIHRpdGxlLAogICAgICBkZXNjcmlwdGlvbiwKICAgICAgdmFyaWFudCA9ICdkZWZhdWx0JywKICAgICAgZHVyYXRpb24gPSA1MDAwLAogICAgICBhY3Rpb24sCiAgICAgIGluZGV4LAogICAgICBzaG91bGRDbG9zZSwKICAgICAgcG9zaXRpb24gPSAnYm90dG9tLWNlbnRlcicsCiAgICAgIGNsYXNzTmFtZSA9ICcnLAogICAgICBvbkNsb3NlLAogICAgfSA9IHRvYXN0CgogICAgY29uc3QgdGl0bGVJZCA9IHRpdGxlID8gYCR7aWR9LXRpdGxlYCA6IHVuZGVmaW5lZAogICAgY29uc3QgZGVzY3JpcHRpb25JZCA9IGRlc2NyaXB0aW9uID8gYCR7aWR9LWRlc2NgIDogdW5kZWZpbmVkCiAgICBjb25zdCBsaXZlUm9sZSA9IHZhcmlhbnQgPT09ICdkZXN0cnVjdGl2ZScgPyAnYWxlcnQnIDogJ3N0YXR1cycKICAgIGNvbnN0IGxpdmVQb2xpdGVuZXNzID0gdmFyaWFudCA9PT0gJ2Rlc3RydWN0aXZlJyA/ICdhc3NlcnRpdmUnIDogJ3BvbGl0ZScKCiAgICBjb25zdCBjb25maWcgPSBQT1NJVElPTl9DT05GSUdTW3Bvc2l0aW9uIGFzIGtleW9mIHR5cGVvZiBQT1NJVElPTl9DT05GSUdTXQoKICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7CiAgICAgIGlmICghdG9hc3RSZWYuY3VycmVudCkgcmV0dXJuCiAgICAgIGNvbnN0IGVsID0gdG9hc3RSZWYuY3VycmVudAogICAgICBjb25zdCBub3RpZnkgPSAoKSA9PiB7CiAgICAgICAgaWYgKCFvbkhlaWdodENoYW5nZSkgcmV0dXJuCiAgICAgICAgb25IZWlnaHRDaGFuZ2UoaWQsIGVsLm9mZnNldEhlaWdodCkKICAgICAgfQogICAgICBub3RpZnkoKQogICAgICBjb25zdCBybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiBub3RpZnkoKSkKICAgICAgcm8ub2JzZXJ2ZShlbCkKICAgICAgcmV0dXJuICgpID0+IHJvLmRpc2Nvbm5lY3QoKQogICAgfSwgW2lkLCBvbkhlaWdodENoYW5nZV0pCgogICAgY29uc3QgZ2V0Rm9jdXNhYmxlRWxlbWVudHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7CiAgICAgIGlmICghdG9hc3RSZWYuY3VycmVudCkgcmV0dXJuIFtdCiAgICAgIHJldHVybiBBcnJheS5mcm9tKAogICAgICAgIHRvYXN0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfU0VMRUNUT1JTKQogICAgICApIGFzIEhUTUxFbGVtZW50W10KICAgIH0sIFtdKQoKICAgIGNvbnN0IGhhbmRsZVRyYW5zaXRpb25FbmQgPSB1c2VDYWxsYmFjaygKICAgICAgKGU6IFJlYWN0LlRyYW5zaXRpb25FdmVudCkgPT4gewogICAgICAgIGlmIChlLnRhcmdldCAhPT0gdG9hc3RSZWYuY3VycmVudCkgcmV0dXJuCiAgICAgICAgaWYgKGUucHJvcGVydHlOYW1lICE9PSAnb3BhY2l0eScpIHJldHVybgoKICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUgPT09ICdleGl0aW5nJykgewogICAgICAgICAgb25DbG9zZT8uKCkKICAgICAgICAgIG9uUmVtb3ZlKGlkKQogICAgICAgIH0KICAgICAgfSwKICAgICAgW2FuaW1hdGlvblN0YXRlLCBpZCwgb25SZW1vdmUsIG9uQ2xvc2VdCiAgICApCgogICAgY29uc3QgaGFuZGxlQ2xvc2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7CiAgICAgIGlmICghdG9hc3RSZWYuY3VycmVudCB8fCBpc0V4aXRpbmcuY3VycmVudCkgcmV0dXJuCgogICAgICBpc0V4aXRpbmcuY3VycmVudCA9IHRydWUKCiAgICAgIGlmIChlbnRlckFuaW1hdGlvblJlZi5jdXJyZW50KSB7CiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZW50ZXJBbmltYXRpb25SZWYuY3VycmVudCkKICAgICAgICBlbnRlckFuaW1hdGlvblJlZi5jdXJyZW50ID0gbnVsbAogICAgICB9CgogICAgICBpZiAodGltZW91dFJlZi5jdXJyZW50KSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRSZWYuY3VycmVudCkKICAgICAgICB0aW1lb3V0UmVmLmN1cnJlbnQgPSBudWxsCiAgICAgIH0KCiAgICAgIHNldEFuaW1hdGlvblN0YXRlKCdleGl0aW5nJykKICAgIH0sIFtdKQoKICAgIHVzZUVmZmVjdCgoKSA9PiB7CiAgICAgIGlmIChzaG91bGRDbG9zZSkgewogICAgICAgIGhhbmRsZUNsb3NlKCkKICAgICAgfQogICAgfSwgW3Nob3VsZENsb3NlLCBoYW5kbGVDbG9zZV0pCgogICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsKICAgICAgaWYgKCF0b2FzdFJlZi5jdXJyZW50IHx8IGlzRXhpdGluZy5jdXJyZW50KSByZXR1cm4KCiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0b2FzdFJlZi5jdXJyZW50CiAgICAgIGNvbnN0IGlzTGF0ZXN0ID0gaW5kZXggPT09IDAKCiAgICAgIGNvbnN0IHNldEZvY3VzVG9Ub2FzdCA9ICgpID0+IHsKICAgICAgICBpZiAoIWlzTGF0ZXN0KSByZXR1cm4KICAgICAgICBjb25zdCBmb2N1c2FibGVFbGVtZW50cyA9IGdldEZvY3VzYWJsZUVsZW1lbnRzKCkKICAgICAgICBpZiAoZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID4gMCkgewogICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHNbMF0uZm9jdXMoKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50LmZvY3VzKCkKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICghaGFzQW5pbWF0ZWRJbi5jdXJyZW50ICYmIGlzTGF0ZXN0KSB7CiAgICAgICAgaGFzQW5pbWF0ZWRJbi5jdXJyZW50ID0gdHJ1ZQogICAgICAgIHNldEFuaW1hdGlvblN0YXRlKCdlbnRlcmluZycpCgogICAgICAgIGVudGVyQW5pbWF0aW9uUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgZW50ZXJBbmltYXRpb25SZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7CiAgICAgICAgICAgIHNldEFuaW1hdGlvblN0YXRlKCdlbnRlcmVkJykKICAgICAgICAgICAgaWYgKGFjdGlvbikgewogICAgICAgICAgICAgIHNldFRpbWVvdXQoCiAgICAgICAgICAgICAgICBzZXRGb2N1c1RvVG9hc3QsCiAgICAgICAgICAgICAgICBBTklNQVRJT05fQ09ORklHLkVOVEVSX0RVUkFUSU9OICogMTAwMAogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICB9IGVsc2UgaWYgKGhhc0FuaW1hdGVkSW4uY3VycmVudCkgewogICAgICAgIGlmIChhbmltYXRpb25TdGF0ZSAhPT0gJ3N0YWNraW5nJyB8fCBpbmRleCA+IDApIHsKICAgICAgICAgIHNldEFuaW1hdGlvblN0YXRlKCdzdGFja2luZycpCiAgICAgICAgfQoKICAgICAgICBpZiAoaW5kZXggPj0gQU5JTUFUSU9OX0NPTkZJRy5NQVhfVklTSUJMRV9UT0FTVFMpIHsKICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gb25SZW1vdmUoaWQpLCBBTklNQVRJT05fQ09ORklHLlNUQUNLX0RVUkFUSU9OICogMTAwMCkKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2V0QW5pbWF0aW9uU3RhdGUoJ3N0YWNraW5nJykKCiAgICAgICAgaWYgKGluZGV4ID49IEFOSU1BVElPTl9DT05GSUcuTUFYX1ZJU0lCTEVfVE9BU1RTKSB7CiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IG9uUmVtb3ZlKGlkKSwgQU5JTUFUSU9OX0NPTkZJRy5TVEFDS19EVVJBVElPTiAqIDEwMDApCiAgICAgICAgfQogICAgICB9CiAgICB9LCBbaW5kZXgsIGlkLCBvblJlbW92ZSwgZ2V0Rm9jdXNhYmxlRWxlbWVudHMsIGFuaW1hdGlvblN0YXRlLCBhY3Rpb25dKQoKICAgIHVzZUVmZmVjdCgoKSA9PiB7CiAgICAgIGlmIChzaG91bGRDbG9zZSB8fCAhaGFzQW5pbWF0ZWRJbi5jdXJyZW50KSByZXR1cm4KICAgICAgaWYgKGR1cmF0aW9uIDw9IDApIHJldHVybgoKICAgICAgaWYgKHJlbWFpbmluZ1JlZi5jdXJyZW50ID09IG51bGwgfHwgTnVtYmVyLmlzTmFOKHJlbWFpbmluZ1JlZi5jdXJyZW50KSkgewogICAgICAgIHJlbWFpbmluZ1JlZi5jdXJyZW50ID0gZHVyYXRpb24KICAgICAgfQoKICAgICAgY29uc3QgaXNQYXVzZWQgPSBpc0dyb3VwSG92ZXJlZCB8fCBpc0l0ZW1Ib3ZlcmVkCiAgICAgIGlmIChpc1BhdXNlZCkgewogICAgICAgIGlmICh0aW1lb3V0UmVmLmN1cnJlbnQpIHsKICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0UmVmLmN1cnJlbnQpCiAgICAgICAgICB0aW1lb3V0UmVmLmN1cnJlbnQgPSBudWxsCiAgICAgICAgfQogICAgICAgIGlmICh0aW1lclN0YXJ0UmVmLmN1cnJlbnQgIT09IG51bGwpIHsKICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gdGltZXJTdGFydFJlZi5jdXJyZW50CiAgICAgICAgICByZW1haW5pbmdSZWYuY3VycmVudCA9IE1hdGgubWF4KDAsIHJlbWFpbmluZ1JlZi5jdXJyZW50IC0gZWxhcHNlZCkKICAgICAgICAgIHRpbWVyU3RhcnRSZWYuY3VycmVudCA9IG51bGwKICAgICAgICB9CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIGlmICghdGltZW91dFJlZi5jdXJyZW50KSB7CiAgICAgICAgY29uc3QgbXMgPSBNYXRoLm1heCgwLCByZW1haW5pbmdSZWYuY3VycmVudCA/PyBkdXJhdGlvbikKICAgICAgICBpZiAobXMgPT09IDApIHsKICAgICAgICAgIGhhbmRsZUNsb3NlKCkKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICB0aW1lclN0YXJ0UmVmLmN1cnJlbnQgPSBEYXRlLm5vdygpCiAgICAgICAgdGltZW91dFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICBoYW5kbGVDbG9zZSgpCiAgICAgICAgfSwgbXMpCiAgICAgIH0KCiAgICAgIHJldHVybiAoKSA9PiB7CiAgICAgICAgaWYgKHRpbWVvdXRSZWYuY3VycmVudCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRSZWYuY3VycmVudCkKICAgICAgICAgIGlmICh0aW1lclN0YXJ0UmVmLmN1cnJlbnQgIT09IG51bGwpIHsKICAgICAgICAgICAgY29uc3QgZWxhcHNlZCA9IERhdGUubm93KCkgLSB0aW1lclN0YXJ0UmVmLmN1cnJlbnQKICAgICAgICAgICAgcmVtYWluaW5nUmVmLmN1cnJlbnQgPSBNYXRoLm1heCgwLCByZW1haW5pbmdSZWYuY3VycmVudCAtIGVsYXBzZWQpCiAgICAgICAgICB9CiAgICAgICAgICB0aW1lb3V0UmVmLmN1cnJlbnQgPSBudWxsCiAgICAgICAgICB0aW1lclN0YXJ0UmVmLmN1cnJlbnQgPSBudWxsCiAgICAgICAgfQogICAgICB9CiAgICB9LCBbZHVyYXRpb24sIHNob3VsZENsb3NlLCBoYW5kbGVDbG9zZSwgaXNHcm91cEhvdmVyZWQsIGlzSXRlbUhvdmVyZWRdKQoKICAgIHVzZUVmZmVjdCgoKSA9PiB7CiAgICAgIHJlbWFpbmluZ1JlZi5jdXJyZW50ID0gZHVyYXRpb24KICAgIH0sIFtkdXJhdGlvbl0pCgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICBpZiAoZW50ZXJBbmltYXRpb25SZWYuY3VycmVudCkgewogICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZW50ZXJBbmltYXRpb25SZWYuY3VycmVudCkKICAgICAgICB9CiAgICAgICAgaWYgKHRpbWVvdXRSZWYuY3VycmVudCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRSZWYuY3VycmVudCkKICAgICAgICB9CiAgICAgIH0KICAgIH0sIFtdKQoKICAgIGNvbnN0IGlzVG9wUG9zaXRpb24gPSBwb3NpdGlvbj8uc3RhcnRzV2l0aCgndG9wLScpCiAgICBjb25zdCBvZmZzZXQgPSBpc1RvcFBvc2l0aW9uCiAgICAgID8gaW5kZXggKiBBTklNQVRJT05fQ09ORklHLlNUQUNLX09GRlNFVAogICAgICA6IC0oaW5kZXggKiBBTklNQVRJT05fQ09ORklHLlNUQUNLX09GRlNFVCkKICAgIGNvbnN0IHNjYWxlID0gTWF0aC5tYXgoCiAgICAgIEFOSU1BVElPTl9DT05GSUcuTUlOX1NDQUxFLAogICAgICAxIC0gaW5kZXggKiBBTklNQVRJT05fQ09ORklHLlNDQUxFX0ZBQ1RPUgogICAgKQogICAgY29uc3QgekluZGV4ID0gQU5JTUFUSU9OX0NPTkZJRy5aX0lOREVYX0JBU0UgLSBpbmRleAogICAgY29uc3QgaXNMYXRlc3QgPSBpbmRleCA9PT0gMAoKICAgIGNvbnN0IHRyYW5zZm9ybVN0eWxlID0gdXNlTWVtbygoKSA9PiB7CiAgICAgIGlmIChpc0dyb3VwSG92ZXJlZCAmJiBhbmltYXRpb25TdGF0ZSAhPT0gJ2V4aXRpbmcnKSB7CiAgICAgICAgY29uc3QgZXhwYW5kZWRUcmFuc2xhdGUgPSBpc1RvcFBvc2l0aW9uCiAgICAgICAgICA/IGAke2V4cGFuZGVkT2Zmc2V0fWAKICAgICAgICAgIDogYCR7LWV4cGFuZGVkT2Zmc2V0fWAKICAgICAgICByZXR1cm4gewogICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKDBweCwgJHtleHBhbmRlZFRyYW5zbGF0ZX1weCkgc2NhbGUoMSlgLAogICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHN3aXRjaCAoYW5pbWF0aW9uU3RhdGUpIHsKICAgICAgICBjYXNlICdlbnRlcmluZyc6CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtjb25maWcuYW5pbWF0ZUluLnh9cHgsICR7Y29uZmlnLmFuaW1hdGVJbi55fXB4KWAsCiAgICAgICAgICAgIG9wYWNpdHk6IDAsCiAgICAgICAgICB9CiAgICAgICAgY2FzZSAnZW50ZXJlZCc6CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMHB4LCAke29mZnNldH1weClgLAogICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgfQogICAgICAgIGNhc2UgJ2V4aXRpbmcnOgogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7Y29uZmlnLmFuaW1hdGVPdXQueH1weCwgJHtjb25maWcuYW5pbWF0ZU91dC55fXB4KWAsCiAgICAgICAgICAgIG9wYWNpdHk6IDAsCiAgICAgICAgICB9CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgwcHgsICR7b2Zmc2V0fXB4KSBzY2FsZSgke2lzTGF0ZXN0ID8gMSA6IHNjYWxlfSlgLAogICAgICAgICAgICBvcGFjaXR5OiBpbmRleCA+PSBBTklNQVRJT05fQ09ORklHLk1BWF9WSVNJQkxFX1RPQVNUUyA/IDAgOiAxLAogICAgICAgICAgfQogICAgICB9CiAgICB9LCBbCiAgICAgIGFuaW1hdGlvblN0YXRlLAogICAgICBjb25maWcuYW5pbWF0ZUluLngsCiAgICAgIGNvbmZpZy5hbmltYXRlSW4ueSwKICAgICAgY29uZmlnLmFuaW1hdGVPdXQueCwKICAgICAgY29uZmlnLmFuaW1hdGVPdXQueSwKICAgICAgb2Zmc2V0LAogICAgICBpc0xhdGVzdCwKICAgICAgc2NhbGUsCiAgICAgIGluZGV4LAogICAgICBpc0dyb3VwSG92ZXJlZCwKICAgICAgZXhwYW5kZWRPZmZzZXQsCiAgICAgIGlzVG9wUG9zaXRpb24sCiAgICBdKQoKICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IHVzZU1lbW8oKCkgPT4gewogICAgICBzd2l0Y2ggKGFuaW1hdGlvblN0YXRlKSB7CiAgICAgICAgY2FzZSAnZW50ZXJpbmcnOgogICAgICAgIGNhc2UgJ2VudGVyZWQnOgogICAgICAgICAgcmV0dXJuIGAke0FOSU1BVElPTl9DT05GSUcuRU5URVJfRFVSQVRJT059c2AKICAgICAgICBjYXNlICdleGl0aW5nJzoKICAgICAgICAgIHJldHVybiBgJHtBTklNQVRJT05fQ09ORklHLkVYSVRfRFVSQVRJT059c2AKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGAke0FOSU1BVElPTl9DT05GSUcuU1RBQ0tfRFVSQVRJT059c2AKICAgICAgfQogICAgfSwgW2FuaW1hdGlvblN0YXRlXSkKCiAgICBjb25zdCB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB1c2VNZW1vKCgpID0+IHsKICAgICAgcmV0dXJuIGFuaW1hdGlvblN0YXRlID09PSAnZXhpdGluZycKICAgICAgICA/IEFOSU1BVElPTl9DT05GSUcuRUFTSU5HX0VYSVQKICAgICAgICA6IEFOSU1BVElPTl9DT05GSUcuRUFTSU5HX0RFRkFVTFQKICAgIH0sIFthbmltYXRpb25TdGF0ZV0pCgogICAgcmV0dXJuICgKICAgICAgPGRpdgogICAgICAgIHJlZj17dG9hc3RSZWZ9CiAgICAgICAgY2xhc3NOYW1lPXtjbih0b2FzdENvbnRhaW5lclZhcmlhbnRzKHsgcG9zaXRpb24sIHZhcmlhbnQgfSksIGNsYXNzTmFtZSl9CiAgICAgICAgc3R5bGU9e3sKICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogcG9zaXRpb24/LnN0YXJ0c1dpdGgoJ3RvcC0nKQogICAgICAgICAgICA/ICdjZW50ZXIgdG9wJwogICAgICAgICAgICA6ICdjZW50ZXIgYm90dG9tJywKICAgICAgICAgIHpJbmRleCwKICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259ICR7dHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9ufSwgb3BhY2l0eSAke3RyYW5zaXRpb25EdXJhdGlvbn0gJHt0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb259YCwKICAgICAgICAgIC4uLnRyYW5zZm9ybVN0eWxlLAogICAgICAgIH19CiAgICAgICAgcm9sZT17bGl2ZVJvbGV9CiAgICAgICAgYXJpYS1saXZlPXtsaXZlUG9saXRlbmVzc30KICAgICAgICBhcmlhLWF0b21pYz0idHJ1ZSIKICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXtkZXNjcmlwdGlvbklkfQogICAgICAgIHRhYkluZGV4PXstMX0KICAgICAgICBvblRyYW5zaXRpb25FbmQ9e2hhbmRsZVRyYW5zaXRpb25FbmR9CiAgICAgICAgZGF0YS10b2FzdC1pZD17aWR9CiAgICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICByb2xlPSJhbGVydCIKICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gewogICAgICAgICAgICBzZXRJc0l0ZW1Ib3ZlcmVkKHRydWUpCiAgICAgICAgICAgIG9uR3JvdXBIb3ZlckVudGVyPy4oKQogICAgICAgICAgfX0KICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gc2V0SXNJdGVtSG92ZXJlZChmYWxzZSl9CiAgICAgICAgICBvbkZvY3VzQ2FwdHVyZT17KCkgPT4gc2V0SXNJdGVtSG92ZXJlZCh0cnVlKX0KICAgICAgICAgIG9uQmx1ckNhcHR1cmU9eyhlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0b2FzdFJlZi5jdXJyZW50CiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBlLnJlbGF0ZWRUYXJnZXQgYXMgTm9kZSB8IG51bGwKICAgICAgICAgICAgaWYgKCFjdXJyZW50IHx8ICFuZXh0IHx8ICFjdXJyZW50LmNvbnRhaW5zKG5leHQpKSB7CiAgICAgICAgICAgICAgc2V0SXNJdGVtSG92ZXJlZChmYWxzZSkKICAgICAgICAgICAgfQogICAgICAgICAgfX0KICAgICAgICA+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24odG9hc3RDb250ZW50VmFyaWFudHMoeyB2YXJpYW50IH0pKX0+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xvc2V9CiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQtc3VidGxlIGhvdmVyOnRleHQtZm9yZWdyb3VuZC1tdXRlZCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBhYnNvbHV0ZSB0b3AtMiByaWdodC0yIGN1cnNvci1wb2ludGVyIHJvdW5kZWQtbWQgcC0xIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTIwMCBmb2N1cy12aXNpYmxlOnJpbmctMSBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZScKICAgICAgICAgICAgICApfQogICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIHRvYXN0IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPEljb25zLlggYXJpYS1oaWRkZW49InRydWUiIGNsYXNzTmFtZT0iaC00IHctNCIgLz4KICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0icC00IHByLTgiPgogICAgICAgICAgICAgIHt0aXRsZSAmJiAoCiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGlkPXt0aXRsZUlkfQogICAgICAgICAgICAgICAgICBjbGFzc05hbWU9Im1iLTEgdGV4dC1zbSBsZWFkaW5nLXRpZ2h0IGZvbnQtc2VtaWJvbGQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt0aXRsZX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAge2Rlc2NyaXB0aW9uICYmICgKICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgaWQ9e2Rlc2NyaXB0aW9uSWR9CiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0idGV4dC1mb3JlZ3JvdW5kLW11dGVkLzgwIHRleHQtc20gbGVhZGluZy1yZWxheGVkIG9wYWNpdHktODAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHtkZXNjcmlwdGlvbn0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAge2FjdGlvbiAmJiAoCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibXQtMyI+CiAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm9uQ2xpY2soKQogICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2xvc2UoKQogICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJiZy1mb3JlZ3JvdW5kIGhvdmVyOmJnLWZvcmVncm91bmQtbXV0ZWQgdGV4dC1iYWNrZ3JvdW5kIGZvY3VzLXZpc2libGU6cmluZy1yaW5nLzUwIGlubGluZS1mbGV4IGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLW1kIHB4LTMgcHktMS41IHRleHQtc20gZm9udC1tZWRpdW0gc2hhZG93LXNtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIHthY3Rpb24ubGFiZWx9CiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICApCiAgfSwKICAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+IHsKICAgIHJldHVybiAoCiAgICAgIHByZXZQcm9wcy50b2FzdC5pZCA9PT0gbmV4dFByb3BzLnRvYXN0LmlkICYmCiAgICAgIHByZXZQcm9wcy50b2FzdC5pbmRleCA9PT0gbmV4dFByb3BzLnRvYXN0LmluZGV4ICYmCiAgICAgIHByZXZQcm9wcy50b2FzdC5zaG91bGRDbG9zZSA9PT0gbmV4dFByb3BzLnRvYXN0LnNob3VsZENsb3NlICYmCiAgICAgIHByZXZQcm9wcy50b2FzdC50b3RhbCA9PT0gbmV4dFByb3BzLnRvYXN0LnRvdGFsICYmCiAgICAgIHByZXZQcm9wcy5pc0dyb3VwSG92ZXJlZCA9PT0gbmV4dFByb3BzLmlzR3JvdXBIb3ZlcmVkICYmCiAgICAgIHByZXZQcm9wcy5leHBhbmRlZE9mZnNldCA9PT0gbmV4dFByb3BzLmV4cGFuZGVkT2Zmc2V0CiAgICApCiAgfQopCgpUb2FzdEl0ZW0uZGlzcGxheU5hbWUgPSAnVG9hc3RJdGVtJwoKY29uc3QgVG9hc3RNYW5hZ2VyOiBSZWFjdC5GQzx7CiAgdG9hc3RzOiBUb2FzdERhdGFbXQogIG9uUmVtb3ZlOiAoaWQ6IHN0cmluZykgPT4gdm9pZAogIGV4cGFuZGVkR2FwPzogbnVtYmVyCn0+ID0gUmVhY3QubWVtbygKICAoeyB0b2FzdHMsIG9uUmVtb3ZlLCBleHBhbmRlZEdhcCA9IEFOSU1BVElPTl9DT05GSUcuRVhQQU5ERURfR0FQIH0pID0+IHsKICAgIGNvbnN0IFtoZWlnaHRzLCBzZXRIZWlnaHRzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KQogICAgY29uc3QgW2hvdmVyZWQsIHNldEhvdmVyZWRdID0gdXNlU3RhdGU8UmVjb3JkPFRvYXN0UG9zaXRpb24sIGJvb2xlYW4+Pih7CiAgICAgICd0b3AtbGVmdCc6IGZhbHNlLAogICAgICAndG9wLWNlbnRlcic6IGZhbHNlLAogICAgICAndG9wLXJpZ2h0JzogZmFsc2UsCiAgICAgICdib3R0b20tbGVmdCc6IGZhbHNlLAogICAgICAnYm90dG9tLWNlbnRlcic6IGZhbHNlLAogICAgICAnYm90dG9tLXJpZ2h0JzogZmFsc2UsCiAgICB9KQoKICAgIGNvbnN0IHRvYXN0c0J5UG9zaXRpb24gPSB1c2VNZW1vKCgpID0+IHsKICAgICAgY29uc3QgZ3JvdXBlZCA9IHRvYXN0cy5yZWR1Y2UoCiAgICAgICAgKGFjYywgdG9hc3QpID0+IHsKICAgICAgICAgIGNvbnN0IHBvcyA9IHRvYXN0LnBvc2l0aW9uIHx8ICdib3R0b20tY2VudGVyJwogICAgICAgICAgaWYgKCFhY2NbcG9zXSkgYWNjW3Bvc10gPSBbXQogICAgICAgICAgYWNjW3Bvc10ucHVzaCh0b2FzdCkKICAgICAgICAgIHJldHVybiBhY2MKICAgICAgICB9LAogICAgICAgIHt9IGFzIFJlY29yZDxUb2FzdFBvc2l0aW9uLCBUb2FzdERhdGFbXT4KICAgICAgKQoKICAgICAgT2JqZWN0LmtleXMoZ3JvdXBlZCkuZm9yRWFjaCgocG9zaXRpb24pID0+IHsKICAgICAgICBjb25zdCBwb3NpdGlvbktleSA9IHBvc2l0aW9uIGFzIFRvYXN0UG9zaXRpb24KICAgICAgICBncm91cGVkW3Bvc2l0aW9uS2V5XSA9IGdyb3VwZWRbcG9zaXRpb25LZXldLm1hcCgodG9hc3QsIGluZGV4KSA9PiAoewogICAgICAgICAgLi4udG9hc3QsCiAgICAgICAgICBpbmRleCwKICAgICAgICAgIHRvdGFsOiBncm91cGVkW3Bvc2l0aW9uS2V5XS5sZW5ndGgsCiAgICAgICAgfSkpIGFzIChUb2FzdERhdGEgJiB7IGluZGV4OiBudW1iZXI7IHRvdGFsOiBudW1iZXIgfSlbXQogICAgICB9KQoKICAgICAgcmV0dXJuIGdyb3VwZWQgYXMgUmVjb3JkPAogICAgICAgIFRvYXN0UG9zaXRpb24sCiAgICAgICAgKFRvYXN0RGF0YSAmIHsgaW5kZXg6IG51bWJlcjsgdG90YWw6IG51bWJlciB9KVtdCiAgICAgID4KICAgIH0sIFt0b2FzdHNdKQoKICAgIHVzZUVmZmVjdCgoKSA9PiB7CiAgICAgIHNldEhvdmVyZWQoKHByZXYpID0+IHsKICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlCiAgICAgICAgY29uc3QgbmV4dCA9IHsgLi4ucHJldiB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gT2JqZWN0LmtleXMocHJldikgYXMgVG9hc3RQb3NpdGlvbltdCiAgICAgICAgZm9yIChjb25zdCBwb3Mgb2YgcG9zaXRpb25zKSB7CiAgICAgICAgICBjb25zdCBoYXNUb2FzdCA9ICh0b2FzdHNCeVBvc2l0aW9uW3Bvc10/Lmxlbmd0aCA/PyAwKSA+IDAKICAgICAgICAgIGlmICghaGFzVG9hc3QgJiYgbmV4dFtwb3NdKSB7CiAgICAgICAgICAgIG5leHRbcG9zXSA9IGZhbHNlCiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBjaGFuZ2VkID8gbmV4dCA6IHByZXYKICAgICAgfSkKICAgIH0sIFt0b2FzdHNCeVBvc2l0aW9uXSkKCiAgICBjb25zdCBwb3NpdGlvbkVudHJpZXMgPSB1c2VNZW1vKAogICAgICAoKSA9PiBPYmplY3QuZW50cmllcyh0b2FzdHNCeVBvc2l0aW9uKSwKICAgICAgW3RvYXN0c0J5UG9zaXRpb25dCiAgICApCgogICAgY29uc3QgZXhwYW5kZWRPZmZzZXRzQnlQb3NpdGlvbiA9IHVzZU1lbW8oKCkgPT4gewogICAgICBjb25zdCByZXN1bHQ6IFJlY29yZDxUb2FzdFBvc2l0aW9uLCBudW1iZXJbXT4gPSB7CiAgICAgICAgJ3RvcC1sZWZ0JzogW10sCiAgICAgICAgJ3RvcC1jZW50ZXInOiBbXSwKICAgICAgICAndG9wLXJpZ2h0JzogW10sCiAgICAgICAgJ2JvdHRvbS1sZWZ0JzogW10sCiAgICAgICAgJ2JvdHRvbS1jZW50ZXInOiBbXSwKICAgICAgICAnYm90dG9tLXJpZ2h0JzogW10sCiAgICAgIH0KICAgICAgZm9yIChjb25zdCBbcG9zLCBncm91cF0gb2YgcG9zaXRpb25FbnRyaWVzIGFzIFsKICAgICAgICBUb2FzdFBvc2l0aW9uLAogICAgICAgIChUb2FzdERhdGEgJiB7IGluZGV4OiBudW1iZXI7IHRvdGFsOiBudW1iZXIgfSlbXSwKICAgICAgXVtdKSB7CiAgICAgICAgY29uc3Qgb2Zmc2V0czogbnVtYmVyW10gPSBbXQogICAgICAgIGxldCBhY2MgPSAwCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKGkgPT09IDApIHsKICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKDApCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBwcmV2ID0gZ3JvdXBbaSAtIDFdCiAgICAgICAgICBjb25zdCBwcmV2SGVpZ2h0ID0gaGVpZ2h0c1twcmV2LmlkXSA/PyAwCiAgICAgICAgICBhY2MgKz0gcHJldkhlaWdodCArIGV4cGFuZGVkR2FwCiAgICAgICAgICBvZmZzZXRzLnB1c2goYWNjKQogICAgICAgIH0KICAgICAgICByZXN1bHRbcG9zXSA9IG9mZnNldHMKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0CiAgICB9LCBbcG9zaXRpb25FbnRyaWVzLCBoZWlnaHRzLCBleHBhbmRlZEdhcF0pCgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgaWYgKHBvc2l0aW9uRW50cmllcy5sZW5ndGggPT09IDApIHJldHVybgoKICAgICAgY29uc3QgaGFuZGxlciA9IChlOiBNb3VzZUV2ZW50KSA9PiB7CiAgICAgICAgY29uc3QgeyBjbGllbnRYOiB4LCBjbGllbnRZOiB5IH0gPSBlCiAgICAgICAgY29uc3QgbmV4dDogUmVjb3JkPFRvYXN0UG9zaXRpb24sIGJvb2xlYW4+ID0geyAuLi5ob3ZlcmVkIH0gYXMgUmVjb3JkPAogICAgICAgICAgVG9hc3RQb3NpdGlvbiwKICAgICAgICAgIGJvb2xlYW4KICAgICAgICA+CiAgICAgICAgZm9yIChjb25zdCBbcG9zLCBncm91cF0gb2YgcG9zaXRpb25FbnRyaWVzIGFzIFsKICAgICAgICAgIFRvYXN0UG9zaXRpb24sCiAgICAgICAgICAoVG9hc3REYXRhICYgeyBpbmRleDogbnVtYmVyOyB0b3RhbDogbnVtYmVyIH0pW10sCiAgICAgICAgXVtdKSB7CiAgICAgICAgICBsZXQgdG9wID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZCiAgICAgICAgICBsZXQgbGVmdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWQogICAgICAgICAgbGV0IHJpZ2h0ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZCiAgICAgICAgICBsZXQgYm90dG9tID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZCiAgICAgICAgICBsZXQgYW55ID0gZmFsc2UKICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBncm91cCkgewogICAgICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoCiAgICAgICAgICAgICAgYFtkYXRhLXRvYXN0LWlkPSIke3QuaWR9Il1gCiAgICAgICAgICAgICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsCiAgICAgICAgICAgIGlmICghZWwpIGNvbnRpbnVlCiAgICAgICAgICAgIGNvbnN0IHIgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKQogICAgICAgICAgICB0b3AgPSBNYXRoLm1pbih0b3AsIHIudG9wKQogICAgICAgICAgICBsZWZ0ID0gTWF0aC5taW4obGVmdCwgci5sZWZ0KQogICAgICAgICAgICByaWdodCA9IE1hdGgubWF4KHJpZ2h0LCByLnJpZ2h0KQogICAgICAgICAgICBib3R0b20gPSBNYXRoLm1heChib3R0b20sIHIuYm90dG9tKQogICAgICAgICAgICBhbnkgPSB0cnVlCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCFhbnkpIHsKICAgICAgICAgICAgbmV4dFtwb3NdID0gZmFsc2UKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBpbnNpZGUgPSB4ID49IGxlZnQgJiYgeCA8PSByaWdodCAmJiB5ID49IHRvcCAmJiB5IDw9IGJvdHRvbQogICAgICAgICAgbmV4dFtwb3NdID0gaW5zaWRlCiAgICAgICAgfQogICAgICAgIGNvbnN0IGNoYW5nZWQgPSBPYmplY3Qua2V5cyhuZXh0IGFzIFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+KS5zb21lKAogICAgICAgICAgKGspID0+CiAgICAgICAgICAgIChuZXh0IGFzIFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+KVtrXSAhPT0KICAgICAgICAgICAgKGhvdmVyZWQgYXMgUmVjb3JkPHN0cmluZywgYm9vbGVhbj4pW2tdCiAgICAgICAgKQogICAgICAgIGlmIChjaGFuZ2VkKSBzZXRIb3ZlcmVkKG5leHQpCiAgICAgIH0KCiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZXIpCiAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVyKQogICAgfSwgW2hvdmVyZWQsIHBvc2l0aW9uRW50cmllc10pCgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgaWYgKHBvc2l0aW9uRW50cmllcy5sZW5ndGggPT09IDApIHJldHVybgoKICAgICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7CiAgICAgICAgZm9yIChjb25zdCBbLCBncm91cF0gb2YgcG9zaXRpb25FbnRyaWVzKSB7CiAgICAgICAgICBjb25zdCBsYXRlc3QgPSBncm91cD8uWzBdCiAgICAgICAgICBpZiAoIWxhdGVzdCkgY29udGludWUKCiAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKAogICAgICAgICAgICBgW2RhdGEtdG9hc3QtaWQ9IiR7bGF0ZXN0LmlkfSJdYAogICAgICAgICAgKSBhcyBIVE1MRWxlbWVudCB8IG51bGwKICAgICAgICAgIGlmICghY29udGFpbmVyKSBjb250aW51ZQoKICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHsKICAgICAgICAgICAgY29uc3QgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCB8IG51bGwKICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBjb250YWluZXIuY29udGFpbnMoYWN0aXZlKSkgewogICAgICAgICAgICAgIGNvbnN0IGNsb3NlQnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoCiAgICAgICAgICAgICAgICAnW2FyaWEtbGFiZWw9IkNsb3NlIHRvYXN0Il0nCiAgICAgICAgICAgICAgKSBhcyBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGwKICAgICAgICAgICAgICBpZiAoY2xvc2VCdG4pIHsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgY2xvc2VCdG4uY2xpY2soKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pCiAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bikKICAgIH0sIFtwb3NpdGlvbkVudHJpZXNdKQoKICAgIGlmICh0b2FzdHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbAoKICAgIHJldHVybiAoCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJwb2ludGVyLWV2ZW50cy1ub25lIGZpeGVkIGluc2V0LTAgei01MCI+CiAgICAgICAge3Bvc2l0aW9uRW50cmllcy5tYXAoKFtwb3NpdGlvbiwgcG9zaXRpb25Ub2FzdHNdKSA9PiB7CiAgICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbiBhcyBUb2FzdFBvc2l0aW9uCiAgICAgICAgICBjb25zdCBleHBhbmRlZE9mZnNldHMgPSBleHBhbmRlZE9mZnNldHNCeVBvc2l0aW9uW3Bvc10KICAgICAgICAgIGNvbnN0IGlzSG92ZXJlZCA9IGhvdmVyZWRbcG9zXQogICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17cG9zaXRpb259PgogICAgICAgICAgICAgIHtwb3NpdGlvblRvYXN0cy5tYXAoKHRvYXN0LCBpZHgpID0+ICgKICAgICAgICAgICAgICAgIDxUb2FzdEl0ZW0KICAgICAgICAgICAgICAgICAga2V5PXt0b2FzdC5pZH0KICAgICAgICAgICAgICAgICAgdG9hc3Q9e3RvYXN0fQogICAgICAgICAgICAgICAgICBvblJlbW92ZT17b25SZW1vdmV9CiAgICAgICAgICAgICAgICAgIGlzR3JvdXBIb3ZlcmVkPXtpc0hvdmVyZWR9CiAgICAgICAgICAgICAgICAgIGV4cGFuZGVkT2Zmc2V0PXtleHBhbmRlZE9mZnNldHM/LltpZHhdID8/IDB9CiAgICAgICAgICAgICAgICAgIG9uSGVpZ2h0Q2hhbmdlPXsoaWQsIGgpID0+CiAgICAgICAgICAgICAgICAgICAgc2V0SGVpZ2h0cygocHJldikgPT4KICAgICAgICAgICAgICAgICAgICAgIHByZXZbaWRdID09PSBoID8gcHJldiA6IHsgLi4ucHJldiwgW2lkXTogaCB9CiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIG9uR3JvdXBIb3ZlckVudGVyPXsoKSA9PgogICAgICAgICAgICAgICAgICAgIHNldEhvdmVyZWQoKHByZXYpID0+ICh7IC4uLnByZXYsIFtwb3NdOiB0cnVlIH0pKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICkpfQogICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PgogICAgICAgICAgKQogICAgICAgIH0pfQogICAgICA8L2Rpdj4KICAgICkKICB9CikKClRvYXN0TWFuYWdlci5kaXNwbGF5TmFtZSA9ICdUb2FzdE1hbmFnZXInCgpleHBvcnQgY29uc3QgVG9hc3RlcjogUmVhY3QuRkM8eyBleHBhbmRlZEdhcD86IG51bWJlciB9PiA9ICh7CiAgZXhwYW5kZWRHYXAsCn0pID0+IHsKICBjb25zdCBbdG9hc3RzLCBzZXRUb2FzdHNdID0gdXNlU3RhdGU8VG9hc3REYXRhW10+KFtdKQogIGNvbnN0IFtpbnN0YW5jZUlkXSA9IHVzZVN0YXRlKCgpID0+IHRvYXN0ZXJJbnN0YW5jZU1hbmFnZXIucmVnaXN0ZXJJbnN0YW5jZSgpKQoKICB1c2VFZmZlY3QoKCkgPT4gewogICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0b2FzdFN0YXRlLnN1YnNjcmliZShzZXRUb2FzdHMpCiAgICByZXR1cm4gKCkgPT4gewogICAgICB1bnN1YnNjcmliZSgpCiAgICAgIHRvYXN0ZXJJbnN0YW5jZU1hbmFnZXIudW5yZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlSWQpCiAgICB9CiAgfSwgW2luc3RhbmNlSWRdKQoKICBjb25zdCBoYW5kbGVSZW1vdmUgPSB1c2VDYWxsYmFjaygoaWQ6IHN0cmluZykgPT4gewogICAgdG9hc3RTdGF0ZS5yZW1vdmUoaWQpCiAgfSwgW10pCgogIGlmICghdG9hc3Rlckluc3RhbmNlTWFuYWdlci5pc0FjdGl2ZUluc3RhbmNlKGluc3RhbmNlSWQpKSB7CiAgICByZXR1cm4gbnVsbAogIH0KCiAgcmV0dXJuICgKICAgIDxUb2FzdE1hbmFnZXIKICAgICAgdG9hc3RzPXt0b2FzdHN9CiAgICAgIG9uUmVtb3ZlPXtoYW5kbGVSZW1vdmV9CiAgICAgIGV4cGFuZGVkR2FwPXtleHBhbmRlZEdhcH0KICAgIC8+CiAgKQp9"
,
  "checkbox.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgewogIENoZWNrYm94IGFzIEFyaWFraXRDaGVja2JveCwKICB1c2VDaGVja2JveFN0b3JlLAogIHVzZVN0b3JlU3RhdGUsCn0gZnJvbSAnQGFyaWFraXQvcmVhY3QnCmltcG9ydCB7IGN2YSwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tICdjbGFzcy12YXJpYW5jZS1hdXRob3JpdHknCmltcG9ydCB0eXBlIFJlYWN0IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBJY29ucyB9IGZyb20gJ0AvYXBwL2NvbXBvbmVudHMvdWkvaWNvbnMnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBjaGVja2JveFZhcmlhbnRzID0gY3ZhKAogIFsKICAgICdyZWxhdGl2ZSBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcm91bmRlZCBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQnLAogICAgJ3RyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dCBjdXJzb3ItcG9pbnRlcicsCiAgICAnaGFzLVs6Zm9jdXMtdmlzaWJsZV06b3V0bGluZS1ub25lIGhhcy1bOmZvY3VzLXZpc2libGVdOnJpbmctMSBoYXMtWzpmb2N1cy12aXNpYmxlXTpyaW5nLW9mZnNldC0xJywKICAgICdoYXMtWzpmb2N1cy12aXNpYmxlXTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCcsCiAgICAnc2hhZG93LXNtIG5vdC1wcm9zZScsCiAgXSwKICB7CiAgICB2YXJpYW50czogewogICAgICBzaXplOiB7CiAgICAgICAgc206ICdoLTQgdy00JywKICAgICAgICBtZDogJ2gtNSB3LTUnLAogICAgICAgIGxnOiAnaC02IHctNicsCiAgICAgIH0sCiAgICAgIGNoZWNrZWQ6IHsKICAgICAgICB0cnVlOiAnJywKICAgICAgICBmYWxzZTogJycsCiAgICAgIH0sCiAgICAgIGRpc2FibGVkOiB7CiAgICAgICAgdHJ1ZTogJ29wYWNpdHktNTAgY3Vyc29yLW5vdC1hbGxvd2VkJywKICAgICAgICBmYWxzZTogJycsCiAgICAgIH0sCiAgICB9LAogICAgY29tcG91bmRWYXJpYW50czogWwogICAgICB7CiAgICAgICAgY2hlY2tlZDogdHJ1ZSwKICAgICAgICBjbGFzczoKICAgICAgICAgICdiZy1mb3JlZ3JvdW5kLW11dGVkIGJvcmRlci1ib3JkZXIgaGFzLVs6Zm9jdXMtdmlzaWJsZV06cmluZy1yaW5nLzUwJywKICAgICAgfSwKICAgICAgewogICAgICAgIGNoZWNrZWQ6IGZhbHNlLAogICAgICAgIGNsYXNzOgogICAgICAgICAgJ2JnLWJhY2tncm91bmQtbXV0ZWQgYm9yZGVyLWJvcmRlciBoYXMtWzpmb2N1cy12aXNpYmxlXTpyaW5nLXJpbmcvNTAnLAogICAgICB9LAogICAgXSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnbWQnLAogICAgICBjaGVja2VkOiBmYWxzZSwKICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgfSwKICB9CikKCmNvbnN0IGljb25WYXJpYW50cyA9IGN2YSgKICBbJ3RyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQgdGV4dC1iYWNrZ3JvdW5kJ10sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAnaC0zIHctMycsCiAgICAgICAgbWQ6ICdoLTQgdy00JywKICAgICAgICBsZzogJ2gtNC41IHctNC41JywKICAgICAgfSwKICAgICAgY2hlY2tlZDogewogICAgICAgIHRydWU6ICdvcGFjaXR5LTEwMCcsCiAgICAgICAgZmFsc2U6ICdvcGFjaXR5LTAnLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnbWQnLAogICAgICBjaGVja2VkOiBmYWxzZSwKICAgIH0sCiAgfQopCgpleHBvcnQgaW50ZXJmYWNlIENoZWNrYm94UHJvcHMKICBleHRlbmRzIE9taXQ8CiAgICAgIFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4sCiAgICAgICdzaXplJyB8ICdkaXNhYmxlZCcKICAgID4sCiAgICBPbWl0PFZhcmlhbnRQcm9wczx0eXBlb2YgY2hlY2tib3hWYXJpYW50cz4sICdjaGVja2VkJz4gewogIGNoZWNrZWQ/OiBib29sZWFuCiAgb25DaGVja2VkQ2hhbmdlPzogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQKICBkaXNhYmxlZD86IGJvb2xlYW4KICBjbGFzc05hbWU/OiBzdHJpbmcKICBpZD86IHN0cmluZwogIGRlZmF1bHRDaGVja2VkPzogYm9vbGVhbgp9CgpleHBvcnQgY29uc3QgQ2hlY2tib3g6IFJlYWN0LkZDPENoZWNrYm94UHJvcHM+ID0gKHsKICBjaGVja2VkLAogIG9uQ2hlY2tlZENoYW5nZSwKICBkZWZhdWx0Q2hlY2tlZCwKICBzaXplID0gJ21kJywKICBkaXNhYmxlZCA9IGZhbHNlLAogIGNsYXNzTmFtZSA9ICcnLAogIGlkLAogIC4uLnByb3BzCn0pID0+IHsKICBsZXQgcHJvcHNGb3JTdG9yZTogUGFyYW1ldGVyczx0eXBlb2YgdXNlQ2hlY2tib3hTdG9yZTxib29sZWFuPj5bMF0KICBpZiAodHlwZW9mIGNoZWNrZWQgIT09ICd1bmRlZmluZWQnKSB7CiAgICBwcm9wc0ZvclN0b3JlID0gewogICAgICB2YWx1ZTogY2hlY2tlZCwKICAgICAgc2V0VmFsdWU6IG9uQ2hlY2tlZENoYW5nZQogICAgICAgID8gKHZhbHVlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGJvb2wgPSBBcnJheS5pc0FycmF5KHZhbHVlKQogICAgICAgICAgICAgID8gdmFsdWUubGVuZ3RoID4gMAogICAgICAgICAgICAgIDogQm9vbGVhbih2YWx1ZSkKICAgICAgICAgICAgb25DaGVja2VkQ2hhbmdlKGJvb2wpCiAgICAgICAgICB9CiAgICAgICAgOiB1bmRlZmluZWQsCiAgICB9CiAgfSBlbHNlIHsKICAgIHByb3BzRm9yU3RvcmUgPSB7IGRlZmF1bHRWYWx1ZTogQm9vbGVhbihkZWZhdWx0Q2hlY2tlZCkgfQogIH0KICBjb25zdCBzdG9yZSA9IHVzZUNoZWNrYm94U3RvcmU8Ym9vbGVhbj4ocHJvcHNGb3JTdG9yZSkKCiAgY29uc3QgaXNDaGVja2VkID0gdXNlU3RvcmVTdGF0ZShzdG9yZSwgJ3ZhbHVlJykKCiAgcmV0dXJuICgKICAgIDxsYWJlbAogICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgIGNoZWNrYm94VmFyaWFudHMoeyBzaXplLCBjaGVja2VkOiBpc0NoZWNrZWQsIGRpc2FibGVkIH0pLAogICAgICAgIGNsYXNzTmFtZQogICAgICApfQogICAgICBodG1sRm9yPXtpZH0KICAgID4KICAgICAgPEFyaWFraXRDaGVja2JveAogICAgICAgIHN0b3JlPXtzdG9yZX0KICAgICAgICBjbGFzc05hbWU9InNyLW9ubHkiCiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgICAgIGlkPXtpZH0KICAgICAgICB7Li4ucHJvcHN9CiAgICAgIC8+CiAgICAgIDxJY29ucy5DaGVjawogICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgIGNsYXNzTmFtZT17aWNvblZhcmlhbnRzKHsgc2l6ZSwgY2hlY2tlZDogaXNDaGVja2VkIH0pfQogICAgICAvPgogICAgPC9sYWJlbD4KICApCn0="
,
  "dropdown-menu.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IGRyb3Bkb3duTWVudUNvbnRlbnRWYXJpYW50cyA9IGN2YSgKICBgei01MCByb3VuZGVkLW1kIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCBiZy1iYWNrZ3JvdW5kIGJvcmRlci1ib3JkZXIKICAgdGV4dC1mb3JlZ3JvdW5kLW11dGVkIHNoYWRvdy1tZCBub3QtcHJvc2UKICAgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dAogICBvcmlnaW4tdG9wIC10cmFuc2xhdGUteS0xIG9wYWNpdHktMCBzY2FsZS05NQogICBkYXRhLVtlbnRlcl06dHJhbnNsYXRlLXktMCBkYXRhLVtlbnRlcl06b3BhY2l0eS0xMDAgZGF0YS1bZW50ZXJdOnNjYWxlLTEwMAogICBkYXRhLVtsZWF2ZV06LXRyYW5zbGF0ZS15LTEgZGF0YS1bbGVhdmVdOm9wYWNpdHktMCBkYXRhLVtsZWF2ZV06c2NhbGUtOTVgLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHNpemU6IHsKICAgICAgICBzbTogJ21pbi13LVs4cmVtXSBwLTEnLAogICAgICAgIG1kOiAnbWluLXctWzEwcmVtXSBwLTEnLAogICAgICAgIGxnOiAnbWluLXctWzEycmVtXSBwLTInLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnbWQnLAogICAgfSwKICB9CikKCmNvbnN0IGRyb3Bkb3duU3ViTWVudUNvbnRlbnRWYXJpYW50cyA9IGN2YSgKICBgei01MCByb3VuZGVkLW1kIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCBiZy1iYWNrZ3JvdW5kIGJvcmRlci1ib3JkZXIKICAgdGV4dC1mb3JlZ3JvdW5kIHNoYWRvdy1tZCBub3QtcHJvc2UgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMAogICBvcmlnaW4tdG9wLWxlZnQgLXRyYW5zbGF0ZS15LTEgb3BhY2l0eS0wIHNjYWxlLTk1CiAgIGRhdGEtW2VudGVyXTp0cmFuc2xhdGUteS0wIGRhdGEtW2VudGVyXTpvcGFjaXR5LTEwMCBkYXRhLVtlbnRlcl06c2NhbGUtMTAwCiAgIGRhdGEtW2xlYXZlXTotdHJhbnNsYXRlLXktMSBkYXRhLVtsZWF2ZV06b3BhY2l0eS0wIGRhdGEtW2xlYXZlXTpzY2FsZS05NWAsCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAnbWluLXctWzdyZW1dIHAtMScsCiAgICAgICAgbWQ6ICdtaW4tdy1bOHJlbV0gcC0xJywKICAgICAgICBsZzogJ21pbi13LVsxMHJlbV0gcC0yJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgc2l6ZTogJ21kJywKICAgIH0sCiAgfQopCgpjb25zdCBkcm9wZG93bk1lbnVJdGVtVmFyaWFudHMgPSBjdmEoCiAgYHctZnVsbCByZWxhdGl2ZSBmbGV4IGN1cnNvci1wb2ludGVyIHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB4LTMgcHktMiB0ZXh0LXNtCiAgIG91dGxpbmUtbm9uZSB0cmFuc2l0aW9uLWNvbG9ycyBmb2N1cy12aXNpYmxlOmJnLWJhY2tncm91bmQtbXV0ZWQKICAgZm9jdXMtdmlzaWJsZTp0ZXh0LWZvcmVncm91bmQgYXJpYS1kaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lCiAgIGFyaWEtZGlzYWJsZWQ6b3BhY2l0eS01MCBob3ZlcjpiZy1iYWNrZ3JvdW5kLW11dGVkIGhvdmVyOnRleHQtZm9yZWdyb3VuZGAsCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgaW5zZXQ6IHsKICAgICAgICB0cnVlOiAncGwtOCcsCiAgICAgICAgZmFsc2U6ICcnLAogICAgICB9LAogICAgICBkZXN0cnVjdGl2ZTogewogICAgICAgIHRydWU6ICd0ZXh0LWVycm9yLzkwIGhvdmVyOnRleHQtZXJyb3IgaG92ZXI6YmctZXJyb3IvMTAnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgaW5zZXQ6IGZhbHNlLAogICAgICBkZXN0cnVjdGl2ZTogZmFsc2UsCiAgICB9LAogIH0KKQoKZXhwb3J0IGludGVyZmFjZSBEcm9wZG93bk1lbnVQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgRHJvcGRvd25NZW51OiBSZWFjdC5GQzxEcm9wZG93bk1lbnVQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKfSkgPT4gewogIGNvbnN0IG1lbnUgPSBBcmlha2l0LnVzZU1lbnVTdG9yZSh7IGFuaW1hdGVkOiB0cnVlIH0pCgogIHJldHVybiAoCiAgICA8QXJpYWtpdC5NZW51UHJvdmlkZXIgc3RvcmU9e21lbnV9PgogICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oJ25vdC1wcm9zZScsIGNsYXNzTmFtZSl9PntjaGlsZHJlbn08L2Rpdj4KICAgIDwvQXJpYWtpdC5NZW51UHJvdmlkZXI+CiAgKQp9CgpleHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duTWVudVRyaWdnZXJQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwogIGRpc2FibGVkPzogYm9vbGVhbgp9CgpleHBvcnQgY29uc3QgRHJvcGRvd25NZW51VHJpZ2dlcjogUmVhY3QuRkM8RHJvcGRvd25NZW51VHJpZ2dlclByb3BzPiA9ICh7CiAgY2hpbGRyZW4sCiAgY2xhc3NOYW1lLAogIGRpc2FibGVkLAp9KSA9PiB7CiAgY29uc3QgbWVudSA9IEFyaWFraXQudXNlTWVudUNvbnRleHQoKQoKICByZXR1cm4gKAogICAgPEFyaWFraXQuTWVudUJ1dHRvbgogICAgICBzdG9yZT17bWVudX0KICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICdhcHBlYXJhbmNlLW5vbmUgYmctdHJhbnNwYXJlbnQgcC0wIHRleHQtbGVmdCcsCiAgICAgICAgY2xhc3NOYW1lLAogICAgICAgIGRpc2FibGVkICYmICdvcGFjaXR5LTUwJwogICAgICApfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L0FyaWFraXQuTWVudUJ1dHRvbj4KICApCn0KCmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVDb250ZW50OiBSZWFjdC5GQzwKICB7CiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgICBjbGFzc05hbWU/OiBzdHJpbmcKICB9ICYgVmFyaWFudFByb3BzPHR5cGVvZiBkcm9wZG93bk1lbnVDb250ZW50VmFyaWFudHM+Cj4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBzaXplIH0pID0+ICgKICA8QXJpYWtpdC5NZW51CiAgICBwb3J0YWwKICAgIHNhbWVXaWR0aAogICAgZ3V0dGVyPXs0fQogICAgY2xhc3NOYW1lPXtjbihkcm9wZG93bk1lbnVDb250ZW50VmFyaWFudHMoeyBzaXplIH0pLCBjbGFzc05hbWUpfQogID4KICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIGdhcC0xIj57Y2hpbGRyZW59PC9kaXY+CiAgPC9Bcmlha2l0Lk1lbnU+CikKCmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtOiBSZWFjdC5GQzwKICB7CiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgICBjbGFzc05hbWU/OiBzdHJpbmcKICAgIGRpc2FibGVkPzogYm9vbGVhbgogICAgaW5zZXQ/OiBib29sZWFuCiAgICBkZXN0cnVjdGl2ZT86IGJvb2xlYW4KICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkCiAgfSAmIFZhcmlhbnRQcm9wczx0eXBlb2YgZHJvcGRvd25NZW51SXRlbVZhcmlhbnRzPgo+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgZGlzYWJsZWQsIGluc2V0LCBkZXN0cnVjdGl2ZSwgb25DbGljayB9KSA9PiAoCiAgPEFyaWFraXQuTWVudUl0ZW0KICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgIG9uQ2xpY2s9e29uQ2xpY2t9CiAgICBjbGFzc05hbWU9e2NuKGRyb3Bkb3duTWVudUl0ZW1WYXJpYW50cyh7IGluc2V0LCBkZXN0cnVjdGl2ZSB9KSwgY2xhc3NOYW1lKX0KICA+CiAgICB7Y2hpbGRyZW59CiAgPC9Bcmlha2l0Lk1lbnVJdGVtPgopCgpleHBvcnQgY29uc3QgRHJvcGRvd25NZW51U2VwYXJhdG9yOiBSZWFjdC5GQzx7IGNsYXNzTmFtZT86IHN0cmluZyB9PiA9ICh7CiAgY2xhc3NOYW1lLAp9KSA9PiAoCiAgPEFyaWFraXQuTWVudVNlcGFyYXRvcgogICAgY2xhc3NOYW1lPXtjbignYmctYm9yZGVyLW11dGVkIC1teC0xIG15LTEgaC1weCcsIGNsYXNzTmFtZSl9CiAgLz4KKQoKZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVN1YjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsKICBjaGlsZHJlbiwKfSkgPT4gewogIGNvbnN0IHN1Yk1lbnUgPSBBcmlha2l0LnVzZU1lbnVTdG9yZSh7IGFuaW1hdGVkOiB0cnVlIH0pCiAgcmV0dXJuIDxBcmlha2l0Lk1lbnVQcm92aWRlciBzdG9yZT17c3ViTWVudX0+e2NoaWxkcmVufTwvQXJpYWtpdC5NZW51UHJvdmlkZXI+Cn0KCmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVTdWJUcmlnZ2VyOiBSZWFjdC5GQzwKICB7CiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgICBjbGFzc05hbWU/OiBzdHJpbmcKICAgIGRpc2FibGVkPzogYm9vbGVhbgogICAgaW5zZXQ/OiBib29sZWFuCiAgICBkZXN0cnVjdGl2ZT86IGJvb2xlYW4KICB9ICYgVmFyaWFudFByb3BzPHR5cGVvZiBkcm9wZG93bk1lbnVJdGVtVmFyaWFudHM+Cj4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBkaXNhYmxlZCwgaW5zZXQsIGRlc3RydWN0aXZlIH0pID0+ICgKICA8QXJpYWtpdC5NZW51QnV0dG9uCiAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICBjbGFzc05hbWU9e2NuKGRyb3Bkb3duTWVudUl0ZW1WYXJpYW50cyh7IGluc2V0LCBkZXN0cnVjdGl2ZSB9KSwgY2xhc3NOYW1lKX0KICA+CiAgICA8c3BhbiBjbGFzc05hbWU9ImZsZXggZmxleC0xIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LXN0YXJ0Ij57Y2hpbGRyZW59PC9zcGFuPgogICAgPEFyaWFraXQuTWVudUJ1dHRvbkFycm93IGNsYXNzTmFtZT0ibWwtMiIgLz4KICA8L0FyaWFraXQuTWVudUJ1dHRvbj4KKQoKZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVN1YkNvbnRlbnQ6IFJlYWN0LkZDPAogIHsKICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICAgIGNsYXNzTmFtZT86IHN0cmluZwogIH0gJiBWYXJpYW50UHJvcHM8dHlwZW9mIGRyb3Bkb3duU3ViTWVudUNvbnRlbnRWYXJpYW50cz4KPiA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIHNpemUgfSkgPT4gKAogIDxBcmlha2l0Lk1lbnUKICAgIHBvcnRhbAogICAgY2xhc3NOYW1lPXtjbihkcm9wZG93blN1Yk1lbnVDb250ZW50VmFyaWFudHMoeyBzaXplIH0pLCBjbGFzc05hbWUpfQogID4KICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIGdhcC0xIj57Y2hpbGRyZW59PC9kaXY+CiAgPC9Bcmlha2l0Lk1lbnU+Cik="
,
  "slider.tsx": ""
,
  "spinner.tsx": "aW1wb3J0IHsgY3ZhLCB0eXBlIFZhcmlhbnRQcm9wcyB9IGZyb20gJ2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eScKaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBzcGlubmVyVmFyaWFudHMgPSBjdmEoCiAgWwogICAgJ2lubGluZS1ibG9jayByb3VuZGVkLWZ1bGwgYm9yZGVyLXNvbGlkIGJvcmRlci1jdXJyZW50IGJvcmRlci1yLXRyYW5zcGFyZW50JywKICAgICdhbmltYXRlLXNwaW4gbm90LXByb3NlJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiAndGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAndy00IGgtNCBib3JkZXItMicsCiAgICAgICAgbWQ6ICd3LTYgaC02IGJvcmRlci0yJywKICAgICAgICBsZzogJ3ctOCBoLTggYm9yZGVyLVszcHhdJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogJ2RlZmF1bHQnLAogICAgICBzaXplOiAnbWQnLAogICAgfSwKICB9CikKCmV4cG9ydCBpbnRlcmZhY2UgU3Bpbm5lclByb3BzCiAgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHNwaW5uZXJWYXJpYW50cz4gewogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgU3Bpbm5lcjogUmVhY3QuRkM8U3Bpbm5lclByb3BzPiA9ICh7CiAgc2l6ZSA9ICdtZCcsCiAgdmFyaWFudCA9ICdkZWZhdWx0JywKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgIGFyaWEtYnVzeT0idHJ1ZSIKICAgICAgY2xhc3NOYW1lPXtjbihzcGlubmVyVmFyaWFudHMoeyB2YXJpYW50LCBzaXplIH0pLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIDxzcGFuIGNsYXNzTmFtZT0ic3Itb25seSI+TG9hZGluZy4uLjwvc3Bhbj4KICAgIDwvZGl2PgogICkKfQ=="
,
  "combobox.tsx": ""
,
  "context-menu.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IGNvbnRleHRNZW51Q29udGVudFZhcmlhbnRzID0gY3ZhKAogIGB6LTUwIG92ZXJmbG93LWhpZGRlbiByb3VuZGVkLW1kIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCBiZy1iYWNrZ3JvdW5kIGJvcmRlci1ib3JkZXIKICAgdGV4dC1mb3JlZ3JvdW5kLW11dGVkIHNoYWRvdy1tZCBub3QtcHJvc2UKICAgdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dAogICBvcmlnaW4tdG9wIC10cmFuc2xhdGUteS0xIG9wYWNpdHktMCBzY2FsZS05NQogICBkYXRhLVtlbnRlcl06dHJhbnNsYXRlLXktMCBkYXRhLVtlbnRlcl06b3BhY2l0eS0xMDAgZGF0YS1bZW50ZXJdOnNjYWxlLTEwMAogICBkYXRhLVtsZWF2ZV06LXRyYW5zbGF0ZS15LTEgZGF0YS1bbGVhdmVdOm9wYWNpdHktMCBkYXRhLVtsZWF2ZV06c2NhbGUtOTVgLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHNpemU6IHsKICAgICAgICBzbTogJ21pbi13LVs4cmVtXSBwLTEnLAogICAgICAgIG1kOiAnbWluLXctWzEwcmVtXSBwLTEnLAogICAgICAgIGxnOiAnbWluLXctWzEycmVtXSBwLTInLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnbWQnLAogICAgfSwKICB9CikKCmNvbnN0IGNvbnRleHRTdWJNZW51Q29udGVudFZhcmlhbnRzID0gY3ZhKAogIGB6LTUwIHJvdW5kZWQtbWQgYm9yZGVyIGJvcmRlci1ub25lIGRhcms6Ym9yZGVyLXNvbGlkIGJnLWJhY2tncm91bmQgYm9yZGVyLWJvcmRlcgogICB0ZXh0LWZvcmVncm91bmQgc2hhZG93LW1kIG5vdC1wcm9zZSB0cmFuc2Zvcm0gdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwCiAgIG9yaWdpbi10b3AtbGVmdCAtdHJhbnNsYXRlLXktMSBvcGFjaXR5LTAgc2NhbGUtOTUKICAgZGF0YS1bZW50ZXJdOnRyYW5zbGF0ZS15LTAgZGF0YS1bZW50ZXJdOm9wYWNpdHktMTAwIGRhdGEtW2VudGVyXTpzY2FsZS0xMDAKICAgZGF0YS1bbGVhdmVdOi10cmFuc2xhdGUteS0xIGRhdGEtW2xlYXZlXTpvcGFjaXR5LTAgZGF0YS1bbGVhdmVdOnNjYWxlLTk1YCwKICB7CiAgICB2YXJpYW50czogewogICAgICBzaXplOiB7CiAgICAgICAgc206ICdtaW4tdy1bN3JlbV0gcC0xJywKICAgICAgICBtZDogJ21pbi13LVs4cmVtXSBwLTEnLAogICAgICAgIGxnOiAnbWluLXctWzEwcmVtXSBwLTInLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICBzaXplOiAnbWQnLAogICAgfSwKICB9CikKCmNvbnN0IGNvbnRleHRNZW51SXRlbVZhcmlhbnRzID0gY3ZhKAogIGB3LWZ1bGwgcmVsYXRpdmUgZmxleCBjdXJzb3ItcG9pbnRlciBzZWxlY3Qtbm9uZSBpdGVtcy1jZW50ZXIgcm91bmRlZC1zbSBweC0zIHB5LTIgdGV4dC1zbQogICBvdXRsaW5lLW5vbmUgdHJhbnNpdGlvbi1jb2xvcnMgZm9jdXMtdmlzaWJsZTpiZy1iYWNrZ3JvdW5kLW11dGVkCiAgIGZvY3VzLXZpc2libGU6dGV4dC1mb3JlZ3JvdW5kIGFyaWEtZGlzYWJsZWQ6cG9pbnRlci1ldmVudHMtbm9uZQogICBhcmlhLWRpc2FibGVkOm9wYWNpdHktNTAgaG92ZXI6YmctYmFja2dyb3VuZC1tdXRlZCBob3Zlcjp0ZXh0LWZvcmVncm91bmRgLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIGluc2V0OiB7CiAgICAgICAgdHJ1ZTogJ3BsLTgnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgICAgZGVzdHJ1Y3RpdmU6IHsKICAgICAgICB0cnVlOiAndGV4dC1lcnJvci85MCBob3Zlcjp0ZXh0LWVycm9yIGhvdmVyOmJnLWVycm9yLzEwJywKICAgICAgICBmYWxzZTogJycsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIGluc2V0OiBmYWxzZSwKICAgICAgZGVzdHJ1Y3RpdmU6IGZhbHNlLAogICAgfSwKICB9CikKCmV4cG9ydCBpbnRlcmZhY2UgQ29udGV4dE1lbnVQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgQ29udGV4dE1lbnU6IFJlYWN0LkZDPENvbnRleHRNZW51UHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBjbGFzc05hbWUsCn0pID0+IHsKICBjb25zdCBtZW51ID0gQXJpYWtpdC51c2VNZW51U3RvcmUoeyBhbmltYXRlZDogdHJ1ZSB9KQoKICByZXR1cm4gKAogICAgPEFyaWFraXQuTWVudVByb3ZpZGVyIHN0b3JlPXttZW51fT4KICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKCdub3QtcHJvc2UnLCBjbGFzc05hbWUpfT57Y2hpbGRyZW59PC9kaXY+CiAgICA8L0FyaWFraXQuTWVudVByb3ZpZGVyPgogICkKfQoKZXhwb3J0IGludGVyZmFjZSBDb250ZXh0TWVudVRyaWdnZXJQcm9wcyB7CiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogIGNsYXNzTmFtZT86IHN0cmluZwogIGRpc2FibGVkPzogYm9vbGVhbgp9CgpleHBvcnQgY29uc3QgQ29udGV4dE1lbnVUcmlnZ2VyOiBSZWFjdC5GQzxDb250ZXh0TWVudVRyaWdnZXJQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIGNsYXNzTmFtZSwKICBkaXNhYmxlZCwKfSkgPT4gewogIGNvbnN0IG1lbnUgPSBBcmlha2l0LnVzZU1lbnVDb250ZXh0KCkKCiAgcmV0dXJuICgKICAgIDxidXR0b24KICAgICAgdHlwZT0iYnV0dG9uIgogICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICAgIG9uQ29udGV4dE1lbnU9eyhlKSA9PiB7CiAgICAgICAgaWYgKCFkaXNhYmxlZCkgewogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICBtZW51Py5zZXRBbmNob3JFbGVtZW50KGUuY3VycmVudFRhcmdldCkKICAgICAgICAgIG1lbnU/LnNob3coKQogICAgICAgIH0KICAgICAgfX0KICAgICAgb25LZXlEb3duPXsoZSkgPT4gewogICAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuCiAgICAgICAgY29uc3QgaXNDb250ZXh0S2V5ID0gZS5rZXkgPT09ICdDb250ZXh0TWVudScKICAgICAgICBjb25zdCBpc1NoaWZ0RjEwID0gZS5rZXkgPT09ICdGMTAnICYmIGUuc2hpZnRLZXkKICAgICAgICBpZiAoaXNDb250ZXh0S2V5IHx8IGlzU2hpZnRGMTApIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICAgICAgbWVudT8uc2V0QW5jaG9yRWxlbWVudChlLmN1cnJlbnRUYXJnZXQpCiAgICAgICAgICBtZW51Py5zaG93KCkKICAgICAgICB9CiAgICAgIH19CiAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgJ2FwcGVhcmFuY2Utbm9uZSBiZy10cmFuc3BhcmVudCBwLTAgdGV4dC1sZWZ0JywKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZGlzYWJsZWQgJiYgJ29wYWNpdHktNTAnCiAgICAgICl9CiAgICA+CiAgICAgIHtjaGlsZHJlbn0KICAgIDwvYnV0dG9uPgogICkKfQoKZXhwb3J0IGNvbnN0IENvbnRleHRNZW51Q29udGVudDogUmVhY3QuRkM8CiAgewogICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogICAgY2xhc3NOYW1lPzogc3RyaW5nCiAgfSAmIFZhcmlhbnRQcm9wczx0eXBlb2YgY29udGV4dE1lbnVDb250ZW50VmFyaWFudHM+Cj4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBzaXplIH0pID0+ICgKICA8QXJpYWtpdC5NZW51CiAgICBwb3J0YWwKICAgIHNhbWVXaWR0aAogICAgZ3V0dGVyPXs0fQogICAgY2xhc3NOYW1lPXtjbihjb250ZXh0TWVudUNvbnRlbnRWYXJpYW50cyh7IHNpemUgfSksIGNsYXNzTmFtZSl9CiAgPgogICAgPGRpdiBjbGFzc05hbWU9ImZsZXggZmxleC1jb2wgZ2FwLTEiPntjaGlsZHJlbn08L2Rpdj4KICA8L0FyaWFraXQuTWVudT4KKQoKZXhwb3J0IGNvbnN0IENvbnRleHRNZW51SXRlbTogUmVhY3QuRkM8CiAgewogICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogICAgY2xhc3NOYW1lPzogc3RyaW5nCiAgICBkaXNhYmxlZD86IGJvb2xlYW4KICAgIGluc2V0PzogYm9vbGVhbgogICAgZGVzdHJ1Y3RpdmU/OiBib29sZWFuCiAgICBvbkNsaWNrPzogKCkgPT4gdm9pZAogIH0gJiBWYXJpYW50UHJvcHM8dHlwZW9mIGNvbnRleHRNZW51SXRlbVZhcmlhbnRzPgo+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgZGlzYWJsZWQsIGluc2V0LCBkZXN0cnVjdGl2ZSwgb25DbGljayB9KSA9PiAoCiAgPEFyaWFraXQuTWVudUl0ZW0KICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgIG9uQ2xpY2s9e29uQ2xpY2t9CiAgICBjbGFzc05hbWU9e2NuKGNvbnRleHRNZW51SXRlbVZhcmlhbnRzKHsgaW5zZXQsIGRlc3RydWN0aXZlIH0pLCBjbGFzc05hbWUpfQogID4KICAgIHtjaGlsZHJlbn0KICA8L0FyaWFraXQuTWVudUl0ZW0+CikKCmV4cG9ydCBjb25zdCBDb250ZXh0TWVudVNlcGFyYXRvcjogUmVhY3QuRkM8eyBjbGFzc05hbWU/OiBzdHJpbmcgfT4gPSAoewogIGNsYXNzTmFtZSwKfSkgPT4gKAogIDxBcmlha2l0Lk1lbnVTZXBhcmF0b3IKICAgIGNsYXNzTmFtZT17Y24oJ2JnLWJvcmRlci1tdXRlZCAtbXgtMSBteS0xIGgtcHgnLCBjbGFzc05hbWUpfQogIC8+CikKCmV4cG9ydCBjb25zdCBDb250ZXh0TWVudVN1YjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsKICBjaGlsZHJlbiwKfSkgPT4gewogIGNvbnN0IHN1Yk1lbnUgPSBBcmlha2l0LnVzZU1lbnVTdG9yZSh7IGFuaW1hdGVkOiB0cnVlIH0pCiAgcmV0dXJuIDxBcmlha2l0Lk1lbnVQcm92aWRlciBzdG9yZT17c3ViTWVudX0+e2NoaWxkcmVufTwvQXJpYWtpdC5NZW51UHJvdmlkZXI+Cn0KCmV4cG9ydCBjb25zdCBDb250ZXh0TWVudVN1YlRyaWdnZXI6IFJlYWN0LkZDPAogIHsKICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICAgIGNsYXNzTmFtZT86IHN0cmluZwogICAgZGlzYWJsZWQ/OiBib29sZWFuCiAgICBpbnNldD86IGJvb2xlYW4KICAgIGRlc3RydWN0aXZlPzogYm9vbGVhbgogIH0gJiBWYXJpYW50UHJvcHM8dHlwZW9mIGNvbnRleHRNZW51SXRlbVZhcmlhbnRzPgo+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgZGlzYWJsZWQsIGluc2V0LCBkZXN0cnVjdGl2ZSB9KSA9PiAoCiAgPEFyaWFraXQuTWVudUJ1dHRvbgogICAgZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgY2xhc3NOYW1lPXtjbihjb250ZXh0TWVudUl0ZW1WYXJpYW50cyh7IGluc2V0LCBkZXN0cnVjdGl2ZSB9KSwgY2xhc3NOYW1lKX0KICA+CiAgICA8c3BhbiBjbGFzc05hbWU9ImZsZXggZmxleC0xIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LXN0YXJ0Ij57Y2hpbGRyZW59PC9zcGFuPgogICAgPEFyaWFraXQuTWVudUJ1dHRvbkFycm93IGNsYXNzTmFtZT0ibWwtMiIgLz4KICA8L0FyaWFraXQuTWVudUJ1dHRvbj4KKQoKZXhwb3J0IGNvbnN0IENvbnRleHRNZW51U3ViQ29udGVudDogUmVhY3QuRkM8CiAgewogICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZQogICAgY2xhc3NOYW1lPzogc3RyaW5nCiAgfSAmIFZhcmlhbnRQcm9wczx0eXBlb2YgY29udGV4dFN1Yk1lbnVDb250ZW50VmFyaWFudHM+Cj4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBzaXplIH0pID0+ICgKICA8QXJpYWtpdC5NZW51CiAgICBwb3J0YWwKICAgIGNsYXNzTmFtZT17Y24oY29udGV4dFN1Yk1lbnVDb250ZW50VmFyaWFudHMoeyBzaXplIH0pLCBjbGFzc05hbWUpfQogID4KICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIGdhcC0xIj57Y2hpbGRyZW59PC9kaXY+CiAgPC9Bcmlha2l0Lk1lbnU+Cik="
,
  "dialog.tsx": ""
,
  "popover.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCBwb3BvdmVyVHJpZ2dlclZhcmlhbnRzID0gY3ZhKAogICdpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcm91bmRlZC1tZCBzaGFkb3ctc20gYm9yZGVyIGJvcmRlci1ub25lIGRhcms6Ym9yZGVyLXNvbGlkIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwIG5vdC1wcm9zZSBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwIG5vdC1wcm9zZSBjdXJzb3ItcG9pbnRlcicsCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogewogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAnYm9yZGVyLWJvcmRlciBiZy1iYWNrZ3JvdW5kIHRleHQtZm9yZWdyb3VuZCBob3ZlcjpiZy1iYWNrZ3JvdW5kLW11dGVkLzUwJywKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAncHgtMiBweS0xIHRleHQteHMnLAogICAgICAgIG1kOiAncHgtMyBweS0yIHRleHQtc20nLAogICAgICAgIGxnOiAncHgtNCBweS0zIHRleHQtYmFzZScsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6ICdkZWZhdWx0JywKICAgICAgc2l6ZTogJ21kJywKICAgIH0sCiAgfQopCgpjb25zdCBwb3BvdmVyQ29udGVudFZhcmlhbnRzID0gY3ZhKAogICd3LWZpdCBtaW4tdy1bOHJlbV0gbWF4LXctW3ZhcigtLXBvcG92ZXItYXZhaWxhYmxlLXdpZHRoLF90aGVtZShzcGFjaW5nLjgwKSldIHJvdW5kZWQtbGcgYmctYmFja2dyb3VuZC1tdXRlZCBwLTQgc2hhZG93LW1kIG5vdC1wcm9zZSByZWxhdGl2ZSB0ZXh0LWZvcmVncm91bmQgb3ZlcmZsb3ctaGlkZGVuIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCBib3JkZXItYm9yZGVyJywKICB7CiAgICB2YXJpYW50czogewogICAgICBzaXplOiB7CiAgICAgICAgc206ICdwLTIgdGV4dC1zbScsCiAgICAgICAgbWQ6ICdwLTQgdGV4dC1zbScsCiAgICAgICAgbGc6ICdwLTYgdGV4dC1iYXNlJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgc2l6ZTogJ21kJywKICAgIH0sCiAgfQopCgpjb25zdCBwb3BvdmVyTW90aW9uID0KICAndHJhbnNmb3JtIHdpbGwtY2hhbmdlLXRyYW5zZm9ybSBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQgdHJhbnNpdGlvbiBvcGFjaXR5LTAgc2NhbGUtOTUgdHJhbnNsYXRlLXktMSBkYXRhLVtlbnRlcl06b3BhY2l0eS0xMDAgZGF0YS1bZW50ZXJdOnNjYWxlLTEwMCBkYXRhLVtlbnRlcl06dHJhbnNsYXRlLXktMCBkYXRhLVtsZWF2ZV06b3BhY2l0eS0wIGRhdGEtW2xlYXZlXTpzY2FsZS05NSBkYXRhLVtsZWF2ZV06dHJhbnNsYXRlLXktMScKCmV4cG9ydCBpbnRlcmZhY2UgUG9wb3ZlclByb3BzIHsKICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgb3Blbj86IGJvb2xlYW4KICBkZWZhdWx0T3Blbj86IGJvb2xlYW4KICBvbk9wZW5DaGFuZ2U/OiAob3BlbjogYm9vbGVhbikgPT4gdm9pZAp9CgpleHBvcnQgaW50ZXJmYWNlIFBvcG92ZXJUcmlnZ2VyUHJvcHMKICBleHRlbmRzIFZhcmlhbnRQcm9wczx0eXBlb2YgcG9wb3ZlclRyaWdnZXJWYXJpYW50cz4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBhc0NoaWxkPzogYm9vbGVhbgogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIFBvcG92ZXJDb250ZW50UHJvcHMKICBleHRlbmRzIFZhcmlhbnRQcm9wczx0eXBlb2YgcG9wb3ZlckNvbnRlbnRWYXJpYW50cz4gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBjbGFzc05hbWU/OiBzdHJpbmcKICBwb3J0YWw/OiBib29sZWFuCiAgZml4ZWQ/OiBib29sZWFuCn0KCmNvbnN0IFBvcG92ZXJTdG9yZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEFyaWFraXQuUG9wb3ZlclN0b3JlIHwgbnVsbD4oCiAgbnVsbAopCgpleHBvcnQgY29uc3QgUG9wb3ZlcjogUmVhY3QuRkM8UG9wb3ZlclByb3BzPiA9ICh7CiAgY2hpbGRyZW4sCiAgb3BlbiwKICBkZWZhdWx0T3BlbiA9IGZhbHNlLAogIG9uT3BlbkNoYW5nZSwKfSkgPT4gewogIGNvbnN0IHN0b3JlID0gQXJpYWtpdC51c2VQb3BvdmVyU3RvcmUoewogICAgb3BlbiwKICAgIGRlZmF1bHRPcGVuLAogICAgc2V0T3Blbjogb25PcGVuQ2hhbmdlLAogIH0pCgogIHJldHVybiAoCiAgICA8UG9wb3ZlclN0b3JlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3RvcmV9PgogICAgICA8QXJpYWtpdC5Qb3BvdmVyUHJvdmlkZXIgc3RvcmU9e3N0b3JlfT4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibm90LXByb3NlIHJlbGF0aXZlIj57Y2hpbGRyZW59PC9kaXY+CiAgICAgIDwvQXJpYWtpdC5Qb3BvdmVyUHJvdmlkZXI+CiAgICA8L1BvcG92ZXJTdG9yZUNvbnRleHQuUHJvdmlkZXI+CiAgKQp9CgpleHBvcnQgY29uc3QgUG9wb3ZlclRyaWdnZXI6IFJlYWN0LkZDPFBvcG92ZXJUcmlnZ2VyUHJvcHM+ID0gKHsKICBjaGlsZHJlbiwKICBhc0NoaWxkID0gZmFsc2UsCiAgY2xhc3NOYW1lID0gJycsCiAgdmFyaWFudCA9ICdkZWZhdWx0JywKICBzaXplID0gJ21kJywKfSkgPT4gewogIGNvbnN0IHN0b3JlID0gUmVhY3QudXNlQ29udGV4dChQb3BvdmVyU3RvcmVDb250ZXh0KQogIGlmICghc3RvcmUpIHRocm93IG5ldyBFcnJvcignUG9wb3ZlclRyaWdnZXIgbXVzdCBiZSB1c2VkIHdpdGhpbiA8UG9wb3Zlcj4nKQoKICBpZiAoYXNDaGlsZCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHsKICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW4gYXMgUmVhY3QuUmVhY3RFbGVtZW50PHsgY2xhc3NOYW1lPzogc3RyaW5nIH0+CiAgICBjb25zdCBtZXJnZWQgPSBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsKICAgICAgY2xhc3NOYW1lOiBjbigKICAgICAgICBjaGlsZC5wcm9wcy5jbGFzc05hbWUsCiAgICAgICAgcG9wb3ZlclRyaWdnZXJWYXJpYW50cyh7IHZhcmlhbnQsIHNpemUgfSksCiAgICAgICAgJ2ZvbnQtbWVkaXVtJywKICAgICAgICBjbGFzc05hbWUKICAgICAgKSwKICAgIH0pCgogICAgcmV0dXJuIDxBcmlha2l0LlBvcG92ZXJEaXNjbG9zdXJlIHJlbmRlcj17bWVyZ2VkfSAvPgogIH0KCiAgcmV0dXJuICgKICAgIDxBcmlha2l0LlBvcG92ZXJEaXNjbG9zdXJlCiAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgcG9wb3ZlclRyaWdnZXJWYXJpYW50cyh7IHZhcmlhbnQsIHNpemUgfSksCiAgICAgICAgJ2ZvbnQtbWVkaXVtJywKICAgICAgICBjbGFzc05hbWUKICAgICAgKX0KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9Bcmlha2l0LlBvcG92ZXJEaXNjbG9zdXJlPgogICkKfQoKZXhwb3J0IGNvbnN0IFBvcG92ZXJDb250ZW50OiBSZWFjdC5GQzxQb3BvdmVyQ29udGVudFByb3BzPiA9ICh7CiAgY2hpbGRyZW4sCiAgY2xhc3NOYW1lID0gJycsCiAgc2l6ZSA9ICdtZCcsCiAgcG9ydGFsID0gdHJ1ZSwKICBmaXhlZCA9IGZhbHNlLAp9KSA9PiB7CiAgY29uc3Qgc3RvcmUgPSBSZWFjdC51c2VDb250ZXh0KFBvcG92ZXJTdG9yZUNvbnRleHQpCiAgaWYgKCFzdG9yZSkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyQ29udGVudCBtdXN0IGJlIHVzZWQgd2l0aGluIDxQb3BvdmVyPicpCgogIHJldHVybiAoCiAgICA8QXJpYWtpdC5Qb3BvdmVyCiAgICAgIHBvcnRhbD17cG9ydGFsfQogICAgICBmaXhlZD17Zml4ZWR9CiAgICAgIGd1dHRlcj17OH0KICAgICAgY2xhc3NOYW1lPXtjbihwb3BvdmVyQ29udGVudFZhcmlhbnRzKHsgc2l6ZSB9KSwgcG9wb3Zlck1vdGlvbiwgY2xhc3NOYW1lKX0KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9Bcmlha2l0LlBvcG92ZXI+CiAgKQp9"
,
  "textarea.tsx": "aW1wb3J0IHsgY3ZhLCB0eXBlIFZhcmlhbnRQcm9wcyB9IGZyb20gJ2NsYXNzLXZhcmlhbmNlLWF1dGhvcml0eScKaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnCmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnCgpjb25zdCB0ZXh0YXJlYVZhcmlhbnRzID0gY3ZhKAogIFsKICAgICd3LWZ1bGwgZmxleCByb3VuZGVkLWxnIGJvcmRlciBib3JkZXItbm9uZSBkYXJrOmJvcmRlci1zb2xpZCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQnLAogICAgJ2ZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMScsCiAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCcsCiAgICAnZGlzYWJsZWQ6b3BhY2l0eS01MCBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQnLAogICAgJ3BsYWNlaG9sZGVyOnRleHQtZm9yZWdyb3VuZC1zdWJ0bGUnLAogICAgJ3NoYWRvdy1zbSBub3QtcHJvc2UnLAogIF0sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogewogICAgICAgIGRlZmF1bHQ6IFsKICAgICAgICAgICdib3JkZXItYm9yZGVyJywKICAgICAgICAgICdiZy1iYWNrZ3JvdW5kJywKICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQnLAogICAgICAgICAgJ2ZvY3VzLXZpc2libGU6Ym9yZGVyLWJvcmRlcicsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLXJpbmcvNTAnLAogICAgICAgIF0sCiAgICAgICAgZXJyb3I6IFsKICAgICAgICAgICdib3JkZXItZXJyb3IvNDAnLAogICAgICAgICAgJ2JnLWJhY2tncm91bmQnLAogICAgICAgICAgJ3RleHQtZm9yZWdyb3VuZCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpib3JkZXItZXJyb3IvNTAnLAogICAgICAgICAgJ2ZvY3VzLXZpc2libGU6cmluZy1lcnJvci81MCBkYXJrOmZvY3VzLXZpc2libGU6cmluZy1lcnJvci81MCcsCiAgICAgICAgXSwKICAgICAgICBzdWNjZXNzOiBbCiAgICAgICAgICAnYm9yZGVyLXN1Y2Nlc3MvNDAnLAogICAgICAgICAgJ2JnLWJhY2tncm91bmQnLAogICAgICAgICAgJ3RleHQtZm9yZWdyb3VuZCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpib3JkZXItc3VjY2Vzcy81MCcsCiAgICAgICAgICAnZm9jdXMtdmlzaWJsZTpyaW5nLXN1Y2Nlc3MvNTAgZGFyazpmb2N1cy12aXNpYmxlOnJpbmctc3VjY2Vzcy81MCcsCiAgICAgICAgXSwKICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAncHgtMyBweS0yIHRleHQtc20nLAogICAgICAgIG1kOiAncHgtMyBweS0yIHRleHQtc20nLAogICAgICAgIGxnOiAncHgtNCBweS0zIHRleHQtYmFzZScsCiAgICAgIH0sCiAgICAgIHJlc2l6ZTogewogICAgICAgIG5vbmU6ICdyZXNpemUtbm9uZScsCiAgICAgICAgdmVydGljYWw6ICdyZXNpemUteScsCiAgICAgICAgaG9yaXpvbnRhbDogJ3Jlc2l6ZS14JywKICAgICAgICBib3RoOiAncmVzaXplJywKICAgICAgfSwKICAgIH0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogJ2RlZmF1bHQnLAogICAgICBzaXplOiAnbWQnLAogICAgICByZXNpemU6ICd2ZXJ0aWNhbCcsCiAgICB9LAogIH0KKQoKY29uc3QgbWVzc2FnZVZhcmlhbnRzID0gY3ZhKCdtdC0xLjUgdGV4dC1zbScsIHsKICB2YXJpYW50czogewogICAgdHlwZTogewogICAgICBlcnJvcjogJ3RleHQtZXJyb3IvOTAnLAogICAgICBzdWNjZXNzOiAndGV4dC1zdWNjZXNzLzkwJywKICAgICAgaGVscGVyOiAndGV4dC1mb3JlZ3JvdW5kLXN1YnRsZScsCiAgICB9LAogIH0sCn0pCgpleHBvcnQgaW50ZXJmYWNlIFRleHRhcmVhUHJvcHMKICBleHRlbmRzIE9taXQ8UmVhY3QuVGV4dGFyZWFIVE1MQXR0cmlidXRlczxIVE1MVGV4dEFyZWFFbGVtZW50PiwgJ3NpemUnPiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgdGV4dGFyZWFWYXJpYW50cz4gewogIGxhYmVsPzogc3RyaW5nCiAgaGVscGVyVGV4dD86IHN0cmluZwogIGVycm9yTWVzc2FnZT86IHN0cmluZwogIHN1Y2Nlc3NNZXNzYWdlPzogc3RyaW5nCiAgY2xhc3NOYW1lPzogc3RyaW5nCiAgY29udGFpbmVyQ2xhc3NOYW1lPzogc3RyaW5nCn0KCmxldCB0ZXh0YXJlYUlkQ291bnRlciA9IDAKY29uc3QgZ2VuZXJhdGVUZXh0YXJlYUlkID0gKCkgPT4gYHRleHRhcmVhLSR7Kyt0ZXh0YXJlYUlkQ291bnRlcn1gCgpleHBvcnQgY29uc3QgVGV4dGFyZWE6IFJlYWN0LkZDPFRleHRhcmVhUHJvcHM+ID0gKHsKICB2YXJpYW50ID0gJ2RlZmF1bHQnLAogIHNpemUgPSAnbWQnLAogIHJlc2l6ZSA9ICd2ZXJ0aWNhbCcsCiAgbGFiZWwsCiAgaGVscGVyVGV4dCwKICBlcnJvck1lc3NhZ2UsCiAgc3VjY2Vzc01lc3NhZ2UsCiAgY2xhc3NOYW1lID0gJycsCiAgY29udGFpbmVyQ2xhc3NOYW1lID0gJycsCiAgZGlzYWJsZWQsCiAgcm93cyA9IDQsCiAgaWQsCiAgLi4ucHJvcHMKfSkgPT4gewogIGNvbnN0IGRpc3BsYXlFcnJvck1lc3NhZ2UgPSB2YXJpYW50ID09PSAnZXJyb3InICYmIGVycm9yTWVzc2FnZQogIGNvbnN0IGRpc3BsYXlTdWNjZXNzTWVzc2FnZSA9IHZhcmlhbnQgPT09ICdzdWNjZXNzJyAmJiBzdWNjZXNzTWVzc2FnZQogIGNvbnN0IHRleHRhcmVhSWQgPSBpZCA/PyBnZW5lcmF0ZVRleHRhcmVhSWQoKQoKICBjb25zdCBoZWxwZXJJZCA9IGhlbHBlclRleHQgPyBgJHt0ZXh0YXJlYUlkfS1oZWxwZXJgIDogdW5kZWZpbmVkCiAgY29uc3QgZXJyb3JJZCA9IGRpc3BsYXlFcnJvck1lc3NhZ2UgPyBgJHt0ZXh0YXJlYUlkfS1lcnJvcmAgOiB1bmRlZmluZWQKICBjb25zdCBzdWNjZXNzSWQgPSBkaXNwbGF5U3VjY2Vzc01lc3NhZ2UgPyBgJHt0ZXh0YXJlYUlkfS1zdWNjZXNzYCA6IHVuZGVmaW5lZAogIGNvbnN0IGRlc2NyaWJlZEJ5ID0KICAgIFtoZWxwZXJJZCwgZXJyb3JJZCwgc3VjY2Vzc0lkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZAoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9e2NuKCdub3QtcHJvc2UnLCBjb250YWluZXJDbGFzc05hbWUpfT4KICAgICAge2xhYmVsICYmICgKICAgICAgICA8bGFiZWwKICAgICAgICAgIGh0bWxGb3I9e3RleHRhcmVhSWR9CiAgICAgICAgICBjbGFzc05hbWU9InRleHQtZm9yZWdyb3VuZC1tdXRlZCBtYi0xLjUgYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSIKICAgICAgICA+CiAgICAgICAgICB7bGFiZWx9CiAgICAgICAgPC9sYWJlbD4KICAgICAgKX0KCiAgICAgIDx0ZXh0YXJlYQogICAgICAgIGNsYXNzTmFtZT17Y24odGV4dGFyZWFWYXJpYW50cyh7IHZhcmlhbnQsIHNpemUsIHJlc2l6ZSB9KSwgY2xhc3NOYW1lKX0KICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICAgICAgcm93cz17cm93c30KICAgICAgICBpZD17dGV4dGFyZWFJZH0KICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXtkZXNjcmliZWRCeX0KICAgICAgICBhcmlhLWludmFsaWQ9e3ZhcmlhbnQgPT09ICdlcnJvcicgPyB0cnVlIDogdW5kZWZpbmVkfQogICAgICAgIHsuLi5wcm9wc30KICAgICAgLz4KCiAgICAgIHtkaXNwbGF5RXJyb3JNZXNzYWdlICYmICgKICAgICAgICA8cAogICAgICAgICAgaWQ9e2Vycm9ySWR9CiAgICAgICAgICBjbGFzc05hbWU9e21lc3NhZ2VWYXJpYW50cyh7IHR5cGU6ICdlcnJvcicgfSl9CiAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICA+CiAgICAgICAgICB7ZXJyb3JNZXNzYWdlfQogICAgICAgIDwvcD4KICAgICAgKX0KCiAgICAgIHtkaXNwbGF5U3VjY2Vzc01lc3NhZ2UgJiYgKAogICAgICAgIDxwCiAgICAgICAgICBpZD17c3VjY2Vzc0lkfQogICAgICAgICAgY2xhc3NOYW1lPXttZXNzYWdlVmFyaWFudHMoeyB0eXBlOiAnc3VjY2VzcycgfSl9CiAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICA+CiAgICAgICAgICB7c3VjY2Vzc01lc3NhZ2V9CiAgICAgICAgPC9wPgogICAgICApfQoKICAgICAge2hlbHBlclRleHQgJiYgIWRpc3BsYXlFcnJvck1lc3NhZ2UgJiYgIWRpc3BsYXlTdWNjZXNzTWVzc2FnZSAmJiAoCiAgICAgICAgPHAgaWQ9e2hlbHBlcklkfSBjbGFzc05hbWU9e21lc3NhZ2VWYXJpYW50cyh7IHR5cGU6ICdoZWxwZXInIH0pfT4KICAgICAgICAgIHtoZWxwZXJUZXh0fQogICAgICAgIDwvcD4KICAgICAgKX0KICAgIDwvZGl2PgogICkKfQ=="
,
  "button.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBCdXR0b24gYXMgQXJpYWtpdEJ1dHRvbiB9IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmV4cG9ydCBjb25zdCBidXR0b25WYXJpYW50cyA9IGN2YSgKICAncmVsYXRpdmUgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtbWQgZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0IGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXJpbmctb2Zmc2V0LzUwIGRpc2FibGVkOm9wYWNpdHktNTAgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIG5vdC1wcm9zZSBjdXJzb3ItcG9pbnRlcicsCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogewogICAgICAgIHByaW1hcnk6CiAgICAgICAgICAnYmctZm9yZWdyb3VuZCBob3ZlcjpiZy1mb3JlZ3JvdW5kLW11dGVkIHRleHQtYmFja2dyb3VuZCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgc2hhZG93LXNtJywKICAgICAgICBzZWNvbmRhcnk6CiAgICAgICAgICAnYmctYmFja2dyb3VuZCB0ZXh0LWZvcmVncm91bmQgaG92ZXI6YmctYmFja2dyb3VuZC1tdXRlZC81MCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXIgYm9yZGVyIGJvcmRlci1ub25lIGRhcms6Ym9yZGVyLXNvbGlkIGJvcmRlci1ib3JkZXIgc2hhZG93LXNtJywKICAgICAgICBnaG9zdDoKICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQtbXV0ZWQgaG92ZXI6YmctYmFja2dyb3VuZC1tdXRlZC81MCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXInLAogICAgICAgIGljb246ICd0ZXh0LWZvcmVncm91bmQtbXV0ZWQgaG92ZXI6YmctYmFja2dyb3VuZC1tdXRlZC81MCBmb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCBmb2N1cy12aXNpYmxlOmJvcmRlci1ib3JkZXInLAogICAgICB9LAogICAgICBzaXplOiB7CiAgICAgICAgc206ICdweC0zIHB5LTEuNSB0ZXh0LXNtJywKICAgICAgICBtZDogJ3B4LTQgcHktMiB0ZXh0LXNtJywKICAgICAgICBsZzogJ3B4LTYgcHktMyB0ZXh0LWJhc2UnLAogICAgICB9LAogICAgfSwKICAgIGNvbXBvdW5kVmFyaWFudHM6IFsKICAgICAgewogICAgICAgIHZhcmlhbnQ6ICdpY29uJywKICAgICAgICBzaXplOiAnc20nLAogICAgICAgIGNsYXNzOiAndy04IGgtOCBwLTAgdGV4dC1zbScsCiAgICAgIH0sCiAgICAgIHsKICAgICAgICB2YXJpYW50OiAnaWNvbicsCiAgICAgICAgc2l6ZTogJ21kJywKICAgICAgICBjbGFzczogJ3ctMTAgaC0xMCBwLTAgdGV4dC1zbScsCiAgICAgIH0sCiAgICAgIHsKICAgICAgICB2YXJpYW50OiAnaWNvbicsCiAgICAgICAgc2l6ZTogJ2xnJywKICAgICAgICBjbGFzczogJ3ctMTIgaC0xMiBwLTAgdGV4dC1iYXNlJywKICAgICAgfSwKICAgIF0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogJ3ByaW1hcnknLAogICAgICBzaXplOiAnbWQnLAogICAgfSwKICB9CikKCmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uUHJvcHMKICBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYnV0dG9uVmFyaWFudHM+IHsKICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgY2xhc3NOYW1lPzogc3RyaW5nCn0KCmV4cG9ydCBjb25zdCBCdXR0b246IFJlYWN0LkZDPEJ1dHRvblByb3BzPiA9ICh7CiAgY2hpbGRyZW4sCiAgdmFyaWFudCA9ICdwcmltYXJ5JywKICBzaXplID0gJ21kJywKICBjbGFzc05hbWUgPSAnJywKICB0eXBlLAogIC4uLnByb3BzCn0pID0+IHsKICByZXR1cm4gKAogICAgPEFyaWFraXRCdXR0b24KICAgICAgY2xhc3NOYW1lPXtjbigKICAgICAgICBidXR0b25WYXJpYW50cyh7CiAgICAgICAgICB2YXJpYW50LAogICAgICAgICAgc2l6ZSwKICAgICAgICB9KSwKICAgICAgICBjbGFzc05hbWUKICAgICAgKX0KICAgICAgdHlwZT17dHlwZSA/PyAnYnV0dG9uJ30KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7Y2hpbGRyZW59CiAgICA8L0FyaWFraXRCdXR0b24+CiAgKQp9"
,
  "table.tsx": ""
,
  "file-upload.tsx": ""
,
  "avatar.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JwoKaW1wb3J0IHsgSWNvbnMgfSBmcm9tICdAL2FwcC9jb21wb25lbnRzL3VpL2ljb25zJwppbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJwoKY29uc3QgYXZhdGFyVmFyaWFudHMgPSBjdmEoCiAgWwogICAgJ3JlbGF0aXZlIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlcicsCiAgICAnYmctYmFja2dyb3VuZC1tdXRlZCcsCiAgICAndGV4dC1mb3JlZ3JvdW5kLW11dGVkJywKICAgICdmb250LW1lZGl1bSBzZWxlY3Qtbm9uZScsCiAgICAndHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0JywKICAgICdub3QtcHJvc2UnLAogIF0sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgdmFyaWFudDogewogICAgICAgIGNpcmNsZTogJ3JvdW5kZWQtZnVsbCcsCiAgICAgICAgc3F1YXJlOiAncm91bmRlZC1sZycsCiAgICAgIH0sCiAgICAgIHNpemU6IHsKICAgICAgICB4czogJ2gtNiB3LTYnLAogICAgICAgIHNtOiAnaC04IHctOCcsCiAgICAgICAgbWQ6ICdoLTEwIHctMTAnLAogICAgICAgIGxnOiAnaC0xMiB3LTEyJywKICAgICAgICB4bDogJ2gtMTYgdy0xNicsCiAgICAgICAgJzJ4bCc6ICdoLTIwIHctMjAnLAogICAgICB9LAogICAgfSwKICAgIGRlZmF1bHRWYXJpYW50czogewogICAgICB2YXJpYW50OiAnY2lyY2xlJywKICAgICAgc2l6ZTogJ21kJywKICAgIH0sCiAgfQopCgpjb25zdCB0ZXh0VmFyaWFudHMgPSBjdmEoJ2ZvbnQtbWVkaXVtIHRleHQtZm9yZWdyb3VuZC1tdXRlZCcsIHsKICB2YXJpYW50czogewogICAgc2l6ZTogewogICAgICB4czogJ3RleHQteHMnLAogICAgICBzbTogJ3RleHQteHMnLAogICAgICBtZDogJ3RleHQtc20nLAogICAgICBsZzogJ3RleHQtYmFzZScsCiAgICAgIHhsOiAndGV4dC1sZycsCiAgICAgICcyeGwnOiAndGV4dC14bCcsCiAgICB9LAogIH0sCiAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICBzaXplOiAnbWQnLAogIH0sCn0pCgpjb25zdCBpY29uVmFyaWFudHMgPSBjdmEoJ3RleHQtZm9yZWdyb3VuZC1zdWJ0bGUnLCB7CiAgdmFyaWFudHM6IHsKICAgIHNpemU6IHsKICAgICAgeHM6ICdoLTMgdy0zJywKICAgICAgc206ICdoLTQgdy00JywKICAgICAgbWQ6ICdoLTUgdy01JywKICAgICAgbGc6ICdoLTYgdy02JywKICAgICAgeGw6ICdoLTggdy04JywKICAgICAgJzJ4bCc6ICdoLTEwIHctMTAnLAogICAgfSwKICB9LAogIGRlZmF1bHRWYXJpYW50czogewogICAgc2l6ZTogJ21kJywKICB9LAp9KQoKY29uc3Qgc3RhdHVzVmFyaWFudHMgPSBjdmEoJ2Fic29sdXRlIHJvdW5kZWQtZnVsbCByaW5nLXJpbmctb2Zmc2V0JywgewogIHZhcmlhbnRzOiB7CiAgICBzdGF0dXM6IHsKICAgICAgb25saW5lOiAnYmctc3VjY2VzcycsCiAgICAgIG9mZmxpbmU6ICdiZy1mb3JlZ3JvdW5kLXN1YnRsZScsCiAgICAgIGF3YXk6ICdiZy13YXJuaW5nJywKICAgICAgYnVzeTogJ2JnLWVycm9yJywKICAgIH0sCiAgICBzaXplOiB7CiAgICAgIHhzOiAnaC0xLjUgdy0xLjUgcmluZy0xIGJvdHRvbS0wIHJpZ2h0LTAnLAogICAgICBzbTogJ2gtMiB3LTIgcmluZy0xIGJvdHRvbS0wIHJpZ2h0LTAnLAogICAgICBtZDogJ2gtMi41IHctMi41IHJpbmctMSBib3R0b20tMC41IHJpZ2h0LTAuNScsCiAgICAgIGxnOiAnaC0zIHctMyByaW5nLTEgYm90dG9tLTAuNSByaWdodC0wLjUnLAogICAgICB4bDogJ2gtMy41IHctMy41IHJpbmctMSBib3R0b20tMSByaWdodC0xJywKICAgICAgJzJ4bCc6ICdoLTQgdy00IHJpbmctMSBib3R0b20tMSByaWdodC0xJywKICAgIH0sCiAgfSwKICBkZWZhdWx0VmFyaWFudHM6IHsKICAgIHNpemU6ICdtZCcsCiAgfSwKfSkKCmV4cG9ydCBpbnRlcmZhY2UgQXZhdGFyUHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYXZhdGFyVmFyaWFudHM+IHsKICBzcmM/OiBzdHJpbmcKICBhbHQ/OiBzdHJpbmcKICBmYWxsYmFjaz86IHN0cmluZwogIHN0YXR1cz86ICdvbmxpbmUnIHwgJ29mZmxpbmUnIHwgJ2F3YXknIHwgJ2J1c3knIHwgbnVsbAogIGNsYXNzTmFtZT86IHN0cmluZwp9CgpleHBvcnQgY29uc3QgQXZhdGFyOiBSZWFjdC5GQzxBdmF0YXJQcm9wcz4gPSAoewogIHNyYywKICBhbHQgPSAnJywKICBmYWxsYmFjaywKICBzaXplID0gJ21kJywKICB2YXJpYW50ID0gJ2NpcmNsZScsCiAgc3RhdHVzID0gbnVsbCwKICBjbGFzc05hbWUgPSAnJywKICAuLi5wcm9wcwp9KSA9PiB7CiAgY29uc3QgW2ltYWdlRXJyb3IsIHNldEltYWdlRXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpCgogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAoc3JjKSB7CiAgICAgIHNldEltYWdlRXJyb3IoZmFsc2UpCiAgICB9CiAgfSwgW3NyY10pCgogIGNvbnN0IGhhbmRsZUltYWdlRXJyb3IgPSAoKSA9PiB7CiAgICBzZXRJbWFnZUVycm9yKHRydWUpCiAgfQoKICBjb25zdCBnZXRJbml0aWFscyA9ICgpID0+IHsKICAgIGNvbnN0IHRleHQgPSBmYWxsYmFjayB8fCBhbHQgfHwgJycKICAgIGlmICghdGV4dCkgcmV0dXJuICcnCgogICAgaWYgKHRleHQubGVuZ3RoIDw9IDIgJiYgIXRleHQuaW5jbHVkZXMoJyAnKSkgewogICAgICByZXR1cm4gdGV4dC50b1VwcGVyQ2FzZSgpCiAgICB9CgogICAgcmV0dXJuIHRleHQKICAgICAgLnNwbGl0KCcgJykKICAgICAgLm1hcCgod29yZCkgPT4gd29yZC5jaGFyQXQoMCkpCiAgICAgIC5qb2luKCcnKQogICAgICAudG9VcHBlckNhc2UoKQogICAgICAuc2xpY2UoMCwgMikKICB9CgogIGNvbnN0IHNob3dJbWFnZSA9IHNyYyAmJiAhaW1hZ2VFcnJvcgogIGNvbnN0IHNob3dJbml0aWFscyA9ICFzaG93SW1hZ2UgJiYgZ2V0SW5pdGlhbHMoKQoKICByZXR1cm4gKAogICAgPGRpdgogICAgICBjbGFzc05hbWU9e2NuKGF2YXRhclZhcmlhbnRzKHsgdmFyaWFudCwgc2l6ZSB9KSwgY2xhc3NOYW1lKX0KICAgICAgey4uLnByb3BzfQogICAgPgogICAgICB7c2hvd0ltYWdlICYmICgKICAgICAgICAvKiBiaW9tZS1pZ25vcmUgbGludC9wZXJmb3JtYW5jZS9ub0ltZ0VsZW1lbnQ6IG5hdGl2ZSBpbWcgaXMgaW50ZW50aW9uYWwgaGVyZSAqLwogICAgICAgIDxpbWcKICAgICAgICAgIHNyYz17c3JjfQogICAgICAgICAgYWx0PXthbHR9CiAgICAgICAgICBjbGFzc05hbWU9e2NuKAogICAgICAgICAgICAnaC1mdWxsIHctZnVsbCBvYmplY3QtY292ZXInLAogICAgICAgICAgICB2YXJpYW50ID09PSAnY2lyY2xlJyA/ICdyb3VuZGVkLWZ1bGwnIDogJ3JvdW5kZWQtbGcnCiAgICAgICAgICApfQogICAgICAgICAgb25FcnJvcj17aGFuZGxlSW1hZ2VFcnJvcn0KICAgICAgICAgIGxvYWRpbmc9ImVhZ2VyIgogICAgICAgICAgc3R5bGU9e3sKICAgICAgICAgICAgdGV4dEluZGVudDogJy05OTk5cHgnLAogICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsCiAgICAgICAgICB9fQogICAgICAgIC8+CiAgICAgICl9CgogICAgICB7c2hvd0luaXRpYWxzICYmICgKICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3RleHRWYXJpYW50cyh7IHNpemUgfSl9PntnZXRJbml0aWFscygpfTwvc3Bhbj4KICAgICAgKX0KCiAgICAgIHshc2hvd0ltYWdlICYmICFzaG93SW5pdGlhbHMgJiYgKAogICAgICAgIDxJY29ucy5Vc2VyIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzc05hbWU9e2ljb25WYXJpYW50cyh7IHNpemUgfSl9IC8+CiAgICAgICl9CgogICAgICB7c3RhdHVzICYmICgKICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0YXR1c1ZhcmlhbnRzKHsgc3RhdHVzLCBzaXplIH0pfSBhcmlhLWhpZGRlbj0idHJ1ZSIgLz4KICAgICAgKX0KICAgIDwvZGl2PgogICkKfQ=="
,
  "switch.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JwppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IHN3aXRjaFZhcmlhbnRzID0gY3ZhKAogIFsKICAgICdyZWxhdGl2ZSBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcm91bmRlZC1mdWxsIGJvcmRlci0yIGJvcmRlci10cmFuc3BhcmVudCcsCiAgICAndHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0IGN1cnNvci1wb2ludGVyJywKICAgICdwZWVyLWZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIHBlZXItZm9jdXMtdmlzaWJsZTpyaW5nLTEnLAogICAgJ3BlZXItZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC0yIHBlZXItZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC1yaW5nLW9mZnNldC81MCcsCiAgXSwKICB7CiAgICB2YXJpYW50czogewogICAgICBzaXplOiB7CiAgICAgICAgc206ICdoLTUgdy05JywKICAgICAgICBtZDogJ2gtNiB3LTExJywKICAgICAgICBsZzogJ2gtNyB3LTEyJywKICAgICAgfSwKICAgICAgY2hlY2tlZDogewogICAgICAgIHRydWU6ICcnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgICAgZGlzYWJsZWQ6IHsKICAgICAgICB0cnVlOiAnb3BhY2l0eS01MCBjdXJzb3Itbm90LWFsbG93ZWQnLAogICAgICAgIGZhbHNlOiAnJywKICAgICAgfSwKICAgIH0sCiAgICBjb21wb3VuZFZhcmlhbnRzOiBbCiAgICAgIHsKICAgICAgICBjaGVja2VkOiB0cnVlLAogICAgICAgIGNsYXNzOiAnYmctZm9yZWdyb3VuZC1zdWJ0bGUgcGVlci1mb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCcsCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBjaGVja2VkOiBmYWxzZSwKICAgICAgICBjbGFzczogJ2JnLWJhY2tncm91bmQtZWxldmF0ZWQgcGVlci1mb2N1cy12aXNpYmxlOnJpbmctcmluZy81MCcsCiAgICAgIH0sCiAgICBdLAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHNpemU6ICdtZCcsCiAgICAgIGNoZWNrZWQ6IGZhbHNlLAogICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICB9LAogIH0KKQoKY29uc3QgdGh1bWJWYXJpYW50cyA9IGN2YSgKICBbCiAgICAnaW5saW5lLWJsb2NrIHJvdW5kZWQtZnVsbCBiZy1iYWNrZ3JvdW5kIGRhcms6YmctZm9yZWdyb3VuZCcsCiAgICAnc2hhZG93LXNtIHRyYW5zZm9ybSB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQnLAogIF0sCiAgewogICAgdmFyaWFudHM6IHsKICAgICAgc2l6ZTogewogICAgICAgIHNtOiAnaC0zIHctMycsCiAgICAgICAgbWQ6ICdoLTQgdy00JywKICAgICAgICBsZzogJ2gtNSB3LTUnLAogICAgICB9LAogICAgICBjaGVja2VkOiB7CiAgICAgICAgdHJ1ZTogJycsCiAgICAgICAgZmFsc2U6ICcnLAogICAgICB9LAogICAgfSwKICAgIGNvbXBvdW5kVmFyaWFudHM6IFsKICAgICAgeyBzaXplOiAnc20nLCBjaGVja2VkOiB0cnVlLCBjbGFzczogJ3RyYW5zbGF0ZS14LTQnIH0sCiAgICAgIHsgc2l6ZTogJ3NtJywgY2hlY2tlZDogZmFsc2UsIGNsYXNzOiAndHJhbnNsYXRlLXgtMScgfSwKICAgICAgeyBzaXplOiAnbWQnLCBjaGVja2VkOiB0cnVlLCBjbGFzczogJ3RyYW5zbGF0ZS14LTUnIH0sCiAgICAgIHsgc2l6ZTogJ21kJywgY2hlY2tlZDogZmFsc2UsIGNsYXNzOiAndHJhbnNsYXRlLXgtMScgfSwKICAgICAgeyBzaXplOiAnbGcnLCBjaGVja2VkOiB0cnVlLCBjbGFzczogJ3RyYW5zbGF0ZS14LTUnIH0sCiAgICAgIHsgc2l6ZTogJ2xnJywgY2hlY2tlZDogZmFsc2UsIGNsYXNzOiAndHJhbnNsYXRlLXgtMScgfSwKICAgIF0sCiAgICBkZWZhdWx0VmFyaWFudHM6IHsKICAgICAgc2l6ZTogJ21kJywKICAgICAgY2hlY2tlZDogZmFsc2UsCiAgICB9LAogIH0KKQoKZXhwb3J0IGludGVyZmFjZSBTd2l0Y2hQcm9wcwogIGV4dGVuZHMgT21pdDxSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIEFyaWFraXQuQ2hlY2tib3g+LCAnc2l6ZSc+LAogICAgT21pdDxWYXJpYW50UHJvcHM8dHlwZW9mIHN3aXRjaFZhcmlhbnRzPiwgJ2NoZWNrZWQnIHwgJ2Rpc2FibGVkJz4gewogIHNpemU/OiAnc20nIHwgJ21kJyB8ICdsZycKICBkaXNhYmxlZD86IGJvb2xlYW4KICBjbGFzc05hbWU/OiBzdHJpbmcKICBvbkNoZWNrZWRDaGFuZ2U/OiAoY2hlY2tlZDogYm9vbGVhbikgPT4gdm9pZAp9CgpleHBvcnQgY29uc3QgU3dpdGNoOiBSZWFjdC5GQzxTd2l0Y2hQcm9wcz4gPSAoewogIHNpemUgPSAnbWQnLAogIGRpc2FibGVkID0gZmFsc2UsCiAgY2xhc3NOYW1lLAogIG9uQ2hlY2tlZENoYW5nZSwKICBjaGVja2VkLAogIGRlZmF1bHRDaGVja2VkLAogIC4uLnByb3BzCn0pID0+IHsKICBjb25zdCBpZCA9IFJlYWN0LnVzZUlkKCkKICBjb25zdCBzdG9yZSA9IEFyaWFraXQudXNlQ2hlY2tib3hTdG9yZSh7CiAgICB2YWx1ZTogY2hlY2tlZCwKICAgIHNldFZhbHVlOiAodmFsKSA9PiBvbkNoZWNrZWRDaGFuZ2U/Lih2YWwgPT09IHRydWUpLAogICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0Q2hlY2tlZCA/PyBmYWxzZSwKICB9KQogIGNvbnN0IHZhbHVlID0gQXJpYWtpdC51c2VTdG9yZVN0YXRlKHN0b3JlLCAndmFsdWUnKQogIGNvbnN0IGlzQ2hlY2tlZCA9IHZhbHVlID09PSB0cnVlCgogIHJldHVybiAoCiAgICA8PgogICAgICA8QXJpYWtpdC5DaGVja2JveAogICAgICAgIGlkPXtpZH0KICAgICAgICBzdG9yZT17c3RvcmV9CiAgICAgICAgcm9sZT0ic3dpdGNoIgogICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0KICAgICAgICBjbGFzc05hbWU9InBlZXIgc3Itb25seSIKICAgICAgICB7Li4ucHJvcHN9CiAgICAgIC8+CiAgICAgIDxsYWJlbAogICAgICAgIGh0bWxGb3I9e2lkfQogICAgICAgIGNsYXNzTmFtZT17Y24oCiAgICAgICAgICBzd2l0Y2hWYXJpYW50cyh7IHNpemUsIGNoZWNrZWQ6IGlzQ2hlY2tlZCwgZGlzYWJsZWQgfSksCiAgICAgICAgICBjbGFzc05hbWUKICAgICAgICApfQogICAgICA+CiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXt0aHVtYlZhcmlhbnRzKHsgc2l6ZSwgY2hlY2tlZDogaXNDaGVja2VkIH0pfSAvPgogICAgICA8L2xhYmVsPgogICAgPC8+CiAgKQp9"
,
  "select.tsx": ""
,
  "breadcrumb.tsx": ""
,
  "sheet.tsx": ""
,
  "badge.tsx": "J3VzZSBjbGllbnQnCgppbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAnY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5JwppbXBvcnQgdHlwZSBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscycKCmNvbnN0IGJhZGdlVmFyaWFudHMgPSBjdmEoCiAgWwogICAgJ2lubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLWZ1bGwgZm9udC1tZWRpdW0nLAogICAgJ3RyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dCcsCiAgICAnd2hpdGVzcGFjZS1ub3dyYXAnLAogICAgJ25vdC1wcm9zZSBib3JkZXIgYm9yZGVyLW5vbmUgZGFyazpib3JkZXItc29saWQgc2hhZG93LXNtJywKICBdLAogIHsKICAgIHZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6IHsKICAgICAgICBkZWZhdWx0OiBbJ2JnLWZvcmVncm91bmQnLCAnaG92ZXI6b3BhY2l0eS04MCcsICd0ZXh0LWJhY2tncm91bmQnXSwKICAgICAgICBzZWNvbmRhcnk6IFsKICAgICAgICAgICdiZy1iYWNrZ3JvdW5kJywKICAgICAgICAgICd0ZXh0LWZvcmVncm91bmQnLAogICAgICAgICAgJ2hvdmVyOm9wYWNpdHktODAnLAogICAgICAgICAgJ2JvcmRlci1ib3JkZXInLAogICAgICAgIF0sCiAgICAgICAgZGVzdHJ1Y3RpdmU6IFsKICAgICAgICAgICdiZy1lcnJvci8xMCcsCiAgICAgICAgICAndGV4dC1lcnJvci85MCcsCiAgICAgICAgICAnaG92ZXI6b3BhY2l0eS04MCcsCiAgICAgICAgICAnYm9yZGVyLWVycm9yLzQwJywKICAgICAgICBdLAogICAgICAgIHN1Y2Nlc3M6IFsKICAgICAgICAgICdiZy1zdWNjZXNzLzEwJywKICAgICAgICAgICd0ZXh0LXN1Y2Nlc3MvOTAnLAogICAgICAgICAgJ2hvdmVyOm9wYWNpdHktODAnLAogICAgICAgICAgJ2JvcmRlci1zdWNjZXNzLzQwJywKICAgICAgICBdLAogICAgICAgIHdhcm5pbmc6IFsKICAgICAgICAgICdiZy13YXJuaW5nLzEwJywKICAgICAgICAgICd0ZXh0LXdhcm5pbmcvOTAnLAogICAgICAgICAgJ2hvdmVyOm9wYWNpdHktODAnLAogICAgICAgICAgJ2JvcmRlci13YXJuaW5nLzQwJywKICAgICAgICBdLAogICAgICB9LAogICAgICBzaXplOiB7CiAgICAgICAgc206ICdweC0yIHB5LTAuNSB0ZXh0LXhzJywKICAgICAgICBtZDogJ3B4LTIuNSBweS0xIHRleHQteHMnLAogICAgICAgIGxnOiAncHgtMyBweS0xLjUgdGV4dC1zbScsCiAgICAgIH0sCiAgICB9LAogICAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICAgIHZhcmlhbnQ6ICdkZWZhdWx0JywKICAgICAgc2l6ZTogJ21kJywKICAgIH0sCiAgfQopCgpleHBvcnQgaW50ZXJmYWNlIEJhZGdlUHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGJhZGdlVmFyaWFudHM+IHsKICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlCiAgY2xhc3NOYW1lPzogc3RyaW5nCn0KCmV4cG9ydCBjb25zdCBCYWRnZTogUmVhY3QuRkM8QmFkZ2VQcm9wcz4gPSAoewogIGNoaWxkcmVuLAogIHZhcmlhbnQgPSAnZGVmYXVsdCcsCiAgc2l6ZSA9ICdtZCcsCiAgY2xhc3NOYW1lID0gJycsCiAgLi4ucHJvcHMKfSkgPT4gewogIHJldHVybiAoCiAgICA8c3BhbgogICAgICBjbGFzc05hbWU9e2NuKGJhZGdlVmFyaWFudHMoeyB2YXJpYW50LCBzaXplIH0pLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIHtjaGlsZHJlbn0KICAgIDwvc3Bhbj4KICApCn0="

}
